'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4952
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization
Imports System.Configuration

'
'This source code was auto-generated by wsdl, Version=2.0.50727.1432.
'
Namespace Seguridad.UsrSeguridad.Dat_Usuarios


    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="Dat_UsuariosSoap", [Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class Dat_Usuarios
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private AgregarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private BorrarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private ModificarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerRegistroBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerRegistroPorLoginBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTotalBDOperationCompleted As System.Threading.SendOrPostCallback

        Private CantidadEventosBitacoraOperationCompleted As System.Threading.SendOrPostCallback

        Private ExisteOperationCompleted As System.Threading.SendOrPostCallback

        Private ExistePorCedulaOperationCompleted As System.Threading.SendOrPostCallback

        Private ExistePorLoginOperationCompleted As System.Threading.SendOrPostCallback

        Private CantidadTotalActivosBDOperationCompleted As System.Threading.SendOrPostCallback

        Private ModulosNoIntegradosDisponiblesOperationCompleted As System.Threading.SendOrPostCallback

        Private ControlAccesoOperationCompleted As System.Threading.SendOrPostCallback

        Private AgregarBD_LoginOperationCompleted As System.Threading.SendOrPostCallback

        Private BorrarBD_LoginOperationCompleted As System.Threading.SendOrPostCallback

        Private CambiarBD_LoginOperationCompleted As System.Threading.SendOrPostCallback

        Private CambiarClaveBDOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneDepartamentoOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New()
            Me.Url = ConfigurationManager.AppSettings(Constantes.ServidorDatos) + "UsrSeguridad/Dat_Usuarios.asmx"
        End Sub

        '''<remarks/>
        Public Event AgregarBDCompleted As AgregarBDCompletedEventHandler

        '''<remarks/>
        Public Event BorrarBDCompleted As BorrarBDCompletedEventHandler

        '''<remarks/>
        Public Event ModificarBDCompleted As ModificarBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerRegistroBDCompleted As TraerRegistroBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerRegistroPorLoginBDCompleted As TraerRegistroPorLoginBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTotalBDCompleted As TraerListaTotalBDCompletedEventHandler

        '''<remarks/>
        Public Event CantidadEventosBitacoraCompleted As CantidadEventosBitacoraCompletedEventHandler

        '''<remarks/>
        Public Event ExisteCompleted As ExisteCompletedEventHandler

        '''<remarks/>
        Public Event ExistePorCedulaCompleted As ExistePorCedulaCompletedEventHandler

        '''<remarks/>
        Public Event ExistePorLoginCompleted As ExistePorLoginCompletedEventHandler

        '''<remarks/>
        Public Event CantidadTotalActivosBDCompleted As CantidadTotalActivosBDCompletedEventHandler

        '''<remarks/>
        Public Event ModulosNoIntegradosDisponiblesCompleted As ModulosNoIntegradosDisponiblesCompletedEventHandler

        '''<remarks/>
        Public Event ControlAccesoCompleted As ControlAccesoCompletedEventHandler

        '''<remarks/>
        Public Event AgregarBD_LoginCompleted As AgregarBD_LoginCompletedEventHandler

        '''<remarks/>
        Public Event BorrarBD_LoginCompleted As BorrarBD_LoginCompletedEventHandler

        '''<remarks/>
        Public Event CambiarBD_LoginCompleted As CambiarBD_LoginCompletedEventHandler

        '''<remarks/>
        Public Event CambiarClaveBDCompleted As CambiarClaveBDCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneDepartamentoCompleted As ObtieneDepartamentoCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function AgregarBD( _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varPalabraClave As String, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String) As Double
            Dim results() As Object = Me.Invoke("AgregarBD", New Object() {varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varPalabraClave, varCodigoHorario, varComentario, usuario, IP})
            Return CType(results(0), Double)
        End Function

        '''<remarks/>
        Public Function BeginAgregarBD( _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varPalabraClave As String, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregarBD", New Object() {varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varPalabraClave, varCodigoHorario, varComentario, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndAgregarBD(ByVal asyncResult As System.IAsyncResult) As Double
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Double)
        End Function

        '''<remarks/>
        Public Overloads Sub AgregarBDAsync( _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varPalabraClave As String, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.AgregarBDAsync(varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varPalabraClave, varCodigoHorario, varComentario, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregarBDAsync( _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varPalabraClave As String, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.AgregarBDOperationCompleted Is Nothing) Then
                Me.AgregarBDOperationCompleted = AddressOf Me.OnAgregarBDOperationCompleted
            End If
            Me.InvokeAsync("AgregarBD", New Object() {varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varPalabraClave, varCodigoHorario, varComentario, usuario, IP}, Me.AgregarBDOperationCompleted, userState)
        End Sub

        Private Sub OnAgregarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregarBDCompleted(Me, New AgregarBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/BorrarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub BorrarBD(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("BorrarBD", New Object() {varCodigoUsuario, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginBorrarBD(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("BorrarBD", New Object() {varCodigoUsuario, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndBorrarBD(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub BorrarBDAsync(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String)
            Me.BorrarBDAsync(varCodigoUsuario, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub BorrarBDAsync(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.BorrarBDOperationCompleted Is Nothing) Then
                Me.BorrarBDOperationCompleted = AddressOf Me.OnBorrarBDOperationCompleted
            End If
            Me.InvokeAsync("BorrarBD", New Object() {varCodigoUsuario, usuario, IP}, Me.BorrarBDOperationCompleted, userState)
        End Sub

        Private Sub OnBorrarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.BorrarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BorrarBDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ModificarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ModificarBD( _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal varCodigoDepartamentoDefault As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.Invoke("ModificarBD", New Object() {varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, varCodigoDepartamentoDefault, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginModificarBD( _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal varCodigoDepartamentoDefault As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ModificarBD", New Object() {varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, varCodigoDepartamentoDefault, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndModificarBD(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ModificarBDAsync( _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal varCodigoDepartamentoDefault As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.ModificarBDAsync(varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, varCodigoDepartamentoDefault, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ModificarBDAsync( _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Char, _
                    ByVal varCambiarClave As Char, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal varCodigoDepartamentoDefault As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.ModificarBDOperationCompleted Is Nothing) Then
                Me.ModificarBDOperationCompleted = AddressOf Me.OnModificarBDOperationCompleted
            End If
            Me.InvokeAsync("ModificarBD", New Object() {varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, varCodigoDepartamentoDefault, usuario, IP}, Me.ModificarBDOperationCompleted, userState)
        End Sub

        Private Sub OnModificarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModificarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModificarBDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerRegistroBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub TraerRegistroBD( _
                    ByVal varCodigoUsuario As Double, _
                    ByRef varNombre1 As String, _
                    ByRef varNombre2 As String, _
                    ByRef varApellido1 As String, _
                    ByRef varApellido2 As String, _
                    ByRef varLogin As String, _
                    ByRef varEstado As Char, _
                    ByRef varCedula As String, _
                    ByRef varIdentificador1 As String, _
                    ByRef varIdentificador2 As String, _
                    ByRef varTipoAccesoEstaciones As Boolean, _
                    ByRef varCuentaBloqueada As Boolean, _
                    ByRef varCambiarClave As Boolean, _
                    ByRef varCodigoHorario As Double, _
                    ByRef varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Dim results() As Object = Me.Invoke("TraerRegistroBD", New Object() {varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, usuario, IP})
            varNombre1 = CType(results(0), String)
            varNombre2 = CType(results(1), String)
            varApellido1 = CType(results(2), String)
            varApellido2 = CType(results(3), String)
            varLogin = CType(results(4), String)
            varEstado = CType(results(5), Char)
            varCedula = CType(results(6), String)
            varIdentificador1 = CType(results(7), String)
            varIdentificador2 = CType(results(8), String)
            varTipoAccesoEstaciones = CType(results(9), Boolean)
            varCuentaBloqueada = CType(results(10), Boolean)
            varCambiarClave = CType(results(11), Boolean)
            varCodigoHorario = CType(results(12), Double)
            varComentario = CType(results(13), String)
        End Sub

        '''<remarks/>
        Public Function BeginTraerRegistroBD( _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Boolean, _
                    ByVal varCambiarClave As Boolean, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerRegistroBD", New Object() {varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndTraerRegistroBD(ByVal asyncResult As System.IAsyncResult, ByRef varNombre1 As String, ByRef varNombre2 As String, ByRef varApellido1 As String, ByRef varApellido2 As String, ByRef varLogin As String, ByRef varEstado As Char, ByRef varCedula As String, ByRef varIdentificador1 As String, ByRef varIdentificador2 As String, ByRef varTipoAccesoEstaciones As Boolean, ByRef varCuentaBloqueada As Boolean, ByRef varCambiarClave As Boolean, ByRef varCodigoHorario As Double, ByRef varComentario As String)
            Dim results() As Object = Me.EndInvoke(asyncResult)
            varNombre1 = CType(results(0), String)
            varNombre2 = CType(results(1), String)
            varApellido1 = CType(results(2), String)
            varApellido2 = CType(results(3), String)
            varLogin = CType(results(4), String)
            varEstado = CType(results(5), Char)
            varCedula = CType(results(6), String)
            varIdentificador1 = CType(results(7), String)
            varIdentificador2 = CType(results(8), String)
            varTipoAccesoEstaciones = CType(results(9), Boolean)
            varCuentaBloqueada = CType(results(10), Boolean)
            varCambiarClave = CType(results(11), Boolean)
            varCodigoHorario = CType(results(12), Double)
            varComentario = CType(results(13), String)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroBDAsync( _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Boolean, _
                    ByVal varCambiarClave As Boolean, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.TraerRegistroBDAsync(varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroBDAsync( _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varLogin As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Boolean, _
                    ByVal varCambiarClave As Boolean, _
                    ByVal varCodigoHorario As Double, _
                    ByVal varComentario As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.TraerRegistroBDOperationCompleted Is Nothing) Then
                Me.TraerRegistroBDOperationCompleted = AddressOf Me.OnTraerRegistroBDOperationCompleted
            End If
            Me.InvokeAsync("TraerRegistroBD", New Object() {varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varLogin, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, varComentario, usuario, IP}, Me.TraerRegistroBDOperationCompleted, userState)
        End Sub

        Private Sub OnTraerRegistroBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerRegistroBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerRegistroBDCompleted(Me, New TraerRegistroBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerRegistroPorLoginBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub TraerRegistroPorLoginBD( _
                    ByVal varLogin As String, _
                    ByRef varCodigoUsuario As Double, _
                    ByRef varNombre1 As String, _
                    ByRef varNombre2 As String, _
                    ByRef varApellido1 As String, _
                    ByRef varApellido2 As String, _
                    ByRef varEstado As Char, _
                    ByRef varCedula As String, _
                    ByRef varIdentificador1 As String, _
                    ByRef varIdentificador2 As String, _
                    ByRef varTipoAccesoEstaciones As Boolean, _
                    ByRef varCuentaBloqueada As Boolean, _
                    ByRef varCambiarClave As Boolean, _
                    ByRef varCodigoHorario As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Dim results() As Object = Me.Invoke("TraerRegistroPorLoginBD", New Object() {varLogin, varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, usuario, IP})
            varCodigoUsuario = CType(results(0), Double)
            varNombre1 = CType(results(1), String)
            varNombre2 = CType(results(2), String)
            varApellido1 = CType(results(3), String)
            varApellido2 = CType(results(4), String)
            varEstado = CType(results(5), Char)
            varCedula = CType(results(6), String)
            varIdentificador1 = CType(results(7), String)
            varIdentificador2 = CType(results(8), String)
            varTipoAccesoEstaciones = CType(results(9), Boolean)
            varCuentaBloqueada = CType(results(10), Boolean)
            varCambiarClave = CType(results(11), Boolean)
            varCodigoHorario = CType(results(12), Double)
        End Sub

        '''<remarks/>
        Public Function BeginTraerRegistroPorLoginBD( _
                    ByVal varLogin As String, _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Boolean, _
                    ByVal varCambiarClave As Boolean, _
                    ByVal varCodigoHorario As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerRegistroPorLoginBD", New Object() {varLogin, varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndTraerRegistroPorLoginBD(ByVal asyncResult As System.IAsyncResult, ByRef varCodigoUsuario As Double, ByRef varNombre1 As String, ByRef varNombre2 As String, ByRef varApellido1 As String, ByRef varApellido2 As String, ByRef varEstado As Char, ByRef varCedula As String, ByRef varIdentificador1 As String, ByRef varIdentificador2 As String, ByRef varTipoAccesoEstaciones As Boolean, ByRef varCuentaBloqueada As Boolean, ByRef varCambiarClave As Boolean, ByRef varCodigoHorario As Double)
            Dim results() As Object = Me.EndInvoke(asyncResult)
            varCodigoUsuario = CType(results(0), Double)
            varNombre1 = CType(results(1), String)
            varNombre2 = CType(results(2), String)
            varApellido1 = CType(results(3), String)
            varApellido2 = CType(results(4), String)
            varEstado = CType(results(5), Char)
            varCedula = CType(results(6), String)
            varIdentificador1 = CType(results(7), String)
            varIdentificador2 = CType(results(8), String)
            varTipoAccesoEstaciones = CType(results(9), Boolean)
            varCuentaBloqueada = CType(results(10), Boolean)
            varCambiarClave = CType(results(11), Boolean)
            varCodigoHorario = CType(results(12), Double)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroPorLoginBDAsync( _
                    ByVal varLogin As String, _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Boolean, _
                    ByVal varCambiarClave As Boolean, _
                    ByVal varCodigoHorario As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.TraerRegistroPorLoginBDAsync(varLogin, varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroPorLoginBDAsync( _
                    ByVal varLogin As String, _
                    ByVal varCodigoUsuario As Double, _
                    ByVal varNombre1 As String, _
                    ByVal varNombre2 As String, _
                    ByVal varApellido1 As String, _
                    ByVal varApellido2 As String, _
                    ByVal varEstado As Char, _
                    ByVal varCedula As String, _
                    ByVal varIdentificador1 As String, _
                    ByVal varIdentificador2 As String, _
                    ByVal varTipoAccesoEstaciones As Boolean, _
                    ByVal varCuentaBloqueada As Boolean, _
                    ByVal varCambiarClave As Boolean, _
                    ByVal varCodigoHorario As Double, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.TraerRegistroPorLoginBDOperationCompleted Is Nothing) Then
                Me.TraerRegistroPorLoginBDOperationCompleted = AddressOf Me.OnTraerRegistroPorLoginBDOperationCompleted
            End If
            Me.InvokeAsync("TraerRegistroPorLoginBD", New Object() {varLogin, varCodigoUsuario, varNombre1, varNombre2, varApellido1, varApellido2, varEstado, varCedula, varIdentificador1, varIdentificador2, varTipoAccesoEstaciones, varCuentaBloqueada, varCambiarClave, varCodigoHorario, usuario, IP}, Me.TraerRegistroPorLoginBDOperationCompleted, userState)
        End Sub

        Private Sub OnTraerRegistroPorLoginBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerRegistroPorLoginBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerRegistroPorLoginBDCompleted(Me, New TraerRegistroPorLoginBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTotalBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTotalBD(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTotalBD", New Object() {ListaCondiciones, MaxRegistros, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTotalBD(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTotalBD", New Object() {ListaCondiciones, MaxRegistros, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTotalBD(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTotalBDAsync(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTotalBDAsync(ListaCondiciones, MaxRegistros, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTotalBDAsync(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTotalBDOperationCompleted Is Nothing) Then
                Me.TraerListaTotalBDOperationCompleted = AddressOf Me.OnTraerListaTotalBDOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTotalBD", New Object() {ListaCondiciones, MaxRegistros, usuario, IP}, Me.TraerListaTotalBDOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTotalBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTotalBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTotalBDCompleted(Me, New TraerListaTotalBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/CantidadEventosBitacora", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CantidadEventosBitacora(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String) As Integer
            Dim results() As Object = Me.Invoke("CantidadEventosBitacora", New Object() {varCodigoUsuario, usuario, IP})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Function BeginCantidadEventosBitacora(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CantidadEventosBitacora", New Object() {varCodigoUsuario, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCantidadEventosBitacora(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub CantidadEventosBitacoraAsync(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String)
            Me.CantidadEventosBitacoraAsync(varCodigoUsuario, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CantidadEventosBitacoraAsync(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.CantidadEventosBitacoraOperationCompleted Is Nothing) Then
                Me.CantidadEventosBitacoraOperationCompleted = AddressOf Me.OnCantidadEventosBitacoraOperationCompleted
            End If
            Me.InvokeAsync("CantidadEventosBitacora", New Object() {varCodigoUsuario, usuario, IP}, Me.CantidadEventosBitacoraOperationCompleted, userState)
        End Sub

        Private Sub OnCantidadEventosBitacoraOperationCompleted(ByVal arg As Object)
            If (Not (Me.CantidadEventosBitacoraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CantidadEventosBitacoraCompleted(Me, New CantidadEventosBitacoraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/Existe", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function Existe(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("Existe", New Object() {varCodigoUsuario, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginExiste(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Existe", New Object() {varCodigoUsuario, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndExiste(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ExisteAsync(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String)
            Me.ExisteAsync(varCodigoUsuario, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExisteAsync(ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ExisteOperationCompleted Is Nothing) Then
                Me.ExisteOperationCompleted = AddressOf Me.OnExisteOperationCompleted
            End If
            Me.InvokeAsync("Existe", New Object() {varCodigoUsuario, usuario, IP}, Me.ExisteOperationCompleted, userState)
        End Sub

        Private Sub OnExisteOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExisteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExisteCompleted(Me, New ExisteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExistePorCedula", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExistePorCedula(ByVal varCedula As String, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("ExistePorCedula", New Object() {varCedula, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginExistePorCedula(ByVal varCedula As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExistePorCedula", New Object() {varCedula, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndExistePorCedula(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ExistePorCedulaAsync(ByVal varCedula As String, ByVal usuario As String, ByVal IP As String)
            Me.ExistePorCedulaAsync(varCedula, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExistePorCedulaAsync(ByVal varCedula As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ExistePorCedulaOperationCompleted Is Nothing) Then
                Me.ExistePorCedulaOperationCompleted = AddressOf Me.OnExistePorCedulaOperationCompleted
            End If
            Me.InvokeAsync("ExistePorCedula", New Object() {varCedula, usuario, IP}, Me.ExistePorCedulaOperationCompleted, userState)
        End Sub

        Private Sub OnExistePorCedulaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistePorCedulaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistePorCedulaCompleted(Me, New ExistePorCedulaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExistePorLogin", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExistePorLogin(ByVal varLogin As String, ByRef varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("ExistePorLogin", New Object() {varLogin, varCodigoUsuario, usuario, IP})
            varCodigoUsuario = CType(results(1), Double)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginExistePorLogin(ByVal varLogin As String, ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExistePorLogin", New Object() {varLogin, varCodigoUsuario, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndExistePorLogin(ByVal asyncResult As System.IAsyncResult, ByRef varCodigoUsuario As Double) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            varCodigoUsuario = CType(results(1), Double)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ExistePorLoginAsync(ByVal varLogin As String, ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String)
            Me.ExistePorLoginAsync(varLogin, varCodigoUsuario, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExistePorLoginAsync(ByVal varLogin As String, ByVal varCodigoUsuario As Double, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ExistePorLoginOperationCompleted Is Nothing) Then
                Me.ExistePorLoginOperationCompleted = AddressOf Me.OnExistePorLoginOperationCompleted
            End If
            Me.InvokeAsync("ExistePorLogin", New Object() {varLogin, varCodigoUsuario, usuario, IP}, Me.ExistePorLoginOperationCompleted, userState)
        End Sub

        Private Sub OnExistePorLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistePorLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistePorLoginCompleted(Me, New ExistePorLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/CantidadTotalActivosBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CantidadTotalActivosBD(ByVal usuario As String, ByVal IP As String) As Double
            Dim results() As Object = Me.Invoke("CantidadTotalActivosBD", New Object() {usuario, IP})
            Return CType(results(0), Double)
        End Function

        '''<remarks/>
        Public Function BeginCantidadTotalActivosBD(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CantidadTotalActivosBD", New Object() {usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCantidadTotalActivosBD(ByVal asyncResult As System.IAsyncResult) As Double
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Double)
        End Function

        '''<remarks/>
        Public Overloads Sub CantidadTotalActivosBDAsync(ByVal usuario As String, ByVal IP As String)
            Me.CantidadTotalActivosBDAsync(usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CantidadTotalActivosBDAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.CantidadTotalActivosBDOperationCompleted Is Nothing) Then
                Me.CantidadTotalActivosBDOperationCompleted = AddressOf Me.OnCantidadTotalActivosBDOperationCompleted
            End If
            Me.InvokeAsync("CantidadTotalActivosBD", New Object() {usuario, IP}, Me.CantidadTotalActivosBDOperationCompleted, userState)
        End Sub

        Private Sub OnCantidadTotalActivosBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CantidadTotalActivosBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CantidadTotalActivosBDCompleted(Me, New CantidadTotalActivosBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ModulosNoIntegradosDisponibles", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ModulosNoIntegradosDisponibles(ByVal varLogin As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ModulosNoIntegradosDisponibles", New Object() {varLogin, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginModulosNoIntegradosDisponibles(ByVal varLogin As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ModulosNoIntegradosDisponibles", New Object() {varLogin, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndModulosNoIntegradosDisponibles(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub ModulosNoIntegradosDisponiblesAsync(ByVal varLogin As String, ByVal usuario As String, ByVal IP As String)
            Me.ModulosNoIntegradosDisponiblesAsync(varLogin, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ModulosNoIntegradosDisponiblesAsync(ByVal varLogin As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ModulosNoIntegradosDisponiblesOperationCompleted Is Nothing) Then
                Me.ModulosNoIntegradosDisponiblesOperationCompleted = AddressOf Me.OnModulosNoIntegradosDisponiblesOperationCompleted
            End If
            Me.InvokeAsync("ModulosNoIntegradosDisponibles", New Object() {varLogin, usuario, IP}, Me.ModulosNoIntegradosDisponiblesOperationCompleted, userState)
        End Sub

        Private Sub OnModulosNoIntegradosDisponiblesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModulosNoIntegradosDisponiblesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModulosNoIntegradosDisponiblesCompleted(Me, New ModulosNoIntegradosDisponiblesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ControlAcceso", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ControlAcceso(ByVal varLogin As String, ByVal varEstacion As Double, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("ControlAcceso", New Object() {varLogin, varEstacion, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginControlAcceso(ByVal varLogin As String, ByVal varEstacion As Double, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ControlAcceso", New Object() {varLogin, varEstacion, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndControlAcceso(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ControlAccesoAsync(ByVal varLogin As String, ByVal varEstacion As Double, ByVal usuario As String, ByVal IP As String)
            Me.ControlAccesoAsync(varLogin, varEstacion, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ControlAccesoAsync(ByVal varLogin As String, ByVal varEstacion As Double, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ControlAccesoOperationCompleted Is Nothing) Then
                Me.ControlAccesoOperationCompleted = AddressOf Me.OnControlAccesoOperationCompleted
            End If
            Me.InvokeAsync("ControlAcceso", New Object() {varLogin, varEstacion, usuario, IP}, Me.ControlAccesoOperationCompleted, userState)
        End Sub

        Private Sub OnControlAccesoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ControlAccesoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ControlAccesoCompleted(Me, New ControlAccesoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregarBD_Login", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function AgregarBD_Login(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("AgregarBD_Login", New Object() {varLogin, varPalabraClave, varNombre, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginAgregarBD_Login(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregarBD_Login", New Object() {varLogin, varPalabraClave, varNombre, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndAgregarBD_Login(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub AgregarBD_LoginAsync(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String, ByVal usuario As String, ByVal IP As String)
            Me.AgregarBD_LoginAsync(varLogin, varPalabraClave, varNombre, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregarBD_LoginAsync(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.AgregarBD_LoginOperationCompleted Is Nothing) Then
                Me.AgregarBD_LoginOperationCompleted = AddressOf Me.OnAgregarBD_LoginOperationCompleted
            End If
            Me.InvokeAsync("AgregarBD_Login", New Object() {varLogin, varPalabraClave, varNombre, usuario, IP}, Me.AgregarBD_LoginOperationCompleted, userState)
        End Sub

        Private Sub OnAgregarBD_LoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregarBD_LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregarBD_LoginCompleted(Me, New AgregarBD_LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/BorrarBD_Login", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function BorrarBD_Login(ByVal varLogin As String) As Boolean
            Dim results() As Object = Me.Invoke("BorrarBD_Login", New Object() {varLogin})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginBorrarBD_Login(ByVal varLogin As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("BorrarBD_Login", New Object() {varLogin}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndBorrarBD_Login(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub BorrarBD_LoginAsync(ByVal varLogin As String)
            Me.BorrarBD_LoginAsync(varLogin, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub BorrarBD_LoginAsync(ByVal varLogin As String, ByVal userState As Object)
            If (Me.BorrarBD_LoginOperationCompleted Is Nothing) Then
                Me.BorrarBD_LoginOperationCompleted = AddressOf Me.OnBorrarBD_LoginOperationCompleted
            End If
            Me.InvokeAsync("BorrarBD_Login", New Object() {varLogin}, Me.BorrarBD_LoginOperationCompleted, userState)
        End Sub

        Private Sub OnBorrarBD_LoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.BorrarBD_LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BorrarBD_LoginCompleted(Me, New BorrarBD_LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/CambiarBD_Login", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CambiarBD_Login(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String) As Boolean
            Dim results() As Object = Me.Invoke("CambiarBD_Login", New Object() {varLogin, varPalabraClave, varNombre})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginCambiarBD_Login(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CambiarBD_Login", New Object() {varLogin, varPalabraClave, varNombre}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCambiarBD_Login(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub CambiarBD_LoginAsync(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String)
            Me.CambiarBD_LoginAsync(varLogin, varPalabraClave, varNombre, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CambiarBD_LoginAsync(ByVal varLogin As String, ByVal varPalabraClave As String, ByVal varNombre As String, ByVal userState As Object)
            If (Me.CambiarBD_LoginOperationCompleted Is Nothing) Then
                Me.CambiarBD_LoginOperationCompleted = AddressOf Me.OnCambiarBD_LoginOperationCompleted
            End If
            Me.InvokeAsync("CambiarBD_Login", New Object() {varLogin, varPalabraClave, varNombre}, Me.CambiarBD_LoginOperationCompleted, userState)
        End Sub

        Private Sub OnCambiarBD_LoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.CambiarBD_LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CambiarBD_LoginCompleted(Me, New CambiarBD_LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/CambiarClaveBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CambiarClaveBD(ByVal varLogin As String, ByVal varPalabraClaveActual As String, ByVal varClaveNueva As String) As Boolean
            Dim results() As Object = Me.Invoke("CambiarClaveBD", New Object() {varLogin, varPalabraClaveActual, varClaveNueva})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginCambiarClaveBD(ByVal varLogin As String, ByVal varPalabraClaveActual As String, ByVal varClaveNueva As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CambiarClaveBD", New Object() {varLogin, varPalabraClaveActual, varClaveNueva}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCambiarClaveBD(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub CambiarClaveBDAsync(ByVal varLogin As String, ByVal varPalabraClaveActual As String, ByVal varClaveNueva As String)
            Me.CambiarClaveBDAsync(varLogin, varPalabraClaveActual, varClaveNueva, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CambiarClaveBDAsync(ByVal varLogin As String, ByVal varPalabraClaveActual As String, ByVal varClaveNueva As String, ByVal userState As Object)
            If (Me.CambiarClaveBDOperationCompleted Is Nothing) Then
                Me.CambiarClaveBDOperationCompleted = AddressOf Me.OnCambiarClaveBDOperationCompleted
            End If
            Me.InvokeAsync("CambiarClaveBD", New Object() {varLogin, varPalabraClaveActual, varClaveNueva}, Me.CambiarClaveBDOperationCompleted, userState)
        End Sub

        Private Sub OnCambiarClaveBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CambiarClaveBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CambiarClaveBDCompleted(Me, New CambiarClaveBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneDepartamento", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneDepartamento(ByVal pLogin As String) As Long
            Dim results() As Object = Me.Invoke("ObtieneDepartamento", New Object() {pLogin})
            Return CType(results(0), Long)
        End Function

        '''<remarks/>
        Public Function BeginObtieneDepartamento(ByVal pLogin As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneDepartamento", New Object() {pLogin}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneDepartamento(ByVal asyncResult As System.IAsyncResult) As Long
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Long)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneDepartamentoAsync(ByVal pLogin As String)
            Me.ObtieneDepartamentoAsync(pLogin, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneDepartamentoAsync(ByVal pLogin As String, ByVal userState As Object)
            If (Me.ObtieneDepartamentoOperationCompleted Is Nothing) Then
                Me.ObtieneDepartamentoOperationCompleted = AddressOf Me.OnObtieneDepartamentoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneDepartamento", New Object() {pLogin}, Me.ObtieneDepartamentoOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneDepartamentoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneDepartamentoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneDepartamentoCompleted(Me, New ObtieneDepartamentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub AgregarBDCompletedEventHandler(ByVal sender As Object, ByVal e As AgregarBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class AgregarBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Double)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub BorrarBDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ModificarBDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub TraerRegistroBDCompletedEventHandler(ByVal sender As Object, ByVal e As TraerRegistroBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerRegistroBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property varNombre1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varNombre2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varApellido1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(2), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varApellido2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(3), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varLogin() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(4), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varEstado() As Char
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(5), Char)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCedula() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(6), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varIdentificador1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(7), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varIdentificador2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(8), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varTipoAccesoEstaciones() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(9), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCuentaBloqueada() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(10), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCambiarClave() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(11), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCodigoHorario() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(12), Double)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varComentario() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(13), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub TraerRegistroPorLoginBDCompletedEventHandler(ByVal sender As Object, ByVal e As TraerRegistroPorLoginBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerRegistroPorLoginBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property varCodigoUsuario() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Double)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varNombre1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varNombre2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(2), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varApellido1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(3), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varApellido2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(4), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varEstado() As Char
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(5), Char)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCedula() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(6), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varIdentificador1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(7), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varIdentificador2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(8), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varTipoAccesoEstaciones() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(9), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCuentaBloqueada() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(10), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCambiarClave() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(11), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCodigoHorario() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(12), Double)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub TraerListaTotalBDCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTotalBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTotalBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub CantidadEventosBitacoraCompletedEventHandler(ByVal sender As Object, ByVal e As CantidadEventosBitacoraCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CantidadEventosBitacoraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ExisteCompletedEventHandler(ByVal sender As Object, ByVal e As ExisteCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExisteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ExistePorCedulaCompletedEventHandler(ByVal sender As Object, ByVal e As ExistePorCedulaCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExistePorCedulaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ExistePorLoginCompletedEventHandler(ByVal sender As Object, ByVal e As ExistePorLoginCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExistePorLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property varCodigoUsuario() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), Double)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub CantidadTotalActivosBDCompletedEventHandler(ByVal sender As Object, ByVal e As CantidadTotalActivosBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CantidadTotalActivosBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Double)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ModulosNoIntegradosDisponiblesCompletedEventHandler(ByVal sender As Object, ByVal e As ModulosNoIntegradosDisponiblesCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ModulosNoIntegradosDisponiblesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ControlAccesoCompletedEventHandler(ByVal sender As Object, ByVal e As ControlAccesoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ControlAccesoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub AgregarBD_LoginCompletedEventHandler(ByVal sender As Object, ByVal e As AgregarBD_LoginCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class AgregarBD_LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub BorrarBD_LoginCompletedEventHandler(ByVal sender As Object, ByVal e As BorrarBD_LoginCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class BorrarBD_LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub CambiarBD_LoginCompletedEventHandler(ByVal sender As Object, ByVal e As CambiarBD_LoginCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CambiarBD_LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub CambiarClaveBDCompletedEventHandler(ByVal sender As Object, ByVal e As CambiarClaveBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CambiarClaveBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ObtieneDepartamentoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneDepartamentoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneDepartamentoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Long)
            End Get
        End Property
    End Class
End Namespace