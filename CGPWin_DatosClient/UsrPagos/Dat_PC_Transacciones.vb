'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5466
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization
Imports System.Configuration

'
'This source code was auto-generated by wsdl, Version=2.0.50727.1432.
'
Namespace UsrPagos.Dat_PC_Transacciones


    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="Dat_PC_TransaccionesSoap", [Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class Dat_PC_Transacciones
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private EliminaPagosTemporalOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneDocumentosInternosPorLiquidarOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneTransaccionesSinDocumentoInternoPorLiquidarOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtienePagosImportadosOperationCompleted As System.Threading.SendOrPostCallback

        Private AgregarConOrdenPagoOperationCompleted As System.Threading.SendOrPostCallback

        Private AgregarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private BorrarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private ModificarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerRegistroBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTotalBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTranCentroPropioOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTranCentroPropioUserOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTranPorEnvioOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTranPorEnvioCentroCostoOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTotalConciliarOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTranParamOperationCompleted As System.Threading.SendOrPostCallback

        Private EnviarAAprobacionOperationCompleted As System.Threading.SendOrPostCallback

        Private IncluirEnEnvioOperationCompleted As System.Threading.SendOrPostCallback

        Private IncluirEnEnvioTodoLoPendienteOperationCompleted As System.Threading.SendOrPostCallback

        Private ExcluirDeEnvioOperationCompleted As System.Threading.SendOrPostCallback

        Private ExcluirDeEnvioTotalOperationCompleted As System.Threading.SendOrPostCallback

        Private ActualizaNumeroDocumentoInternoOperationCompleted As System.Threading.SendOrPostCallback

        Private ActualizaCodigoReferenciaOperationCompleted As System.Threading.SendOrPostCallback

        Private ActualizaCamposParaTFTOperationCompleted As System.Threading.SendOrPostCallback

        Private ActualizarEstadoOperationCompleted As System.Threading.SendOrPostCallback

        Private ActualizarEstadosOperationCompleted As System.Threading.SendOrPostCallback

        Private ActualizarTransaccionOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTranPorEnvioParaProcesarTFTOperationCompleted As System.Threading.SendOrPostCallback

        Private AnularTransaccionOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New()
            Me.Url = ConfigurationManager.AppSettings(Constantes.ServidorDatos) + "UsrPagos/Dat_PC_Transacciones.asmx"

        End Sub

        '''<remarks/>
        Public Event EliminaPagosTemporalCompleted As EliminaPagosTemporalCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneDocumentosInternosPorLiquidarCompleted As ObtieneDocumentosInternosPorLiquidarCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompleted As ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompleted As ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompletedEventHandler

        '''<remarks/>
        Public Event ObtienePagosImportadosCompleted As ObtienePagosImportadosCompletedEventHandler

        '''<remarks/>
        Public Event AgregarConOrdenPagoCompleted As AgregarConOrdenPagoCompletedEventHandler

        '''<remarks/>
        Public Event AgregarBDCompleted As AgregarBDCompletedEventHandler

        '''<remarks/>
        Public Event BorrarBDCompleted As BorrarBDCompletedEventHandler

        '''<remarks/>
        Public Event ModificarBDCompleted As ModificarBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerRegistroBDCompleted As TraerRegistroBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTotalBDCompleted As TraerListaTotalBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTranCentroPropioCompleted As TraerListaTranCentroPropioCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTranCentroPropioUserCompleted As TraerListaTranCentroPropioUserCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTranPorEnvioCompleted As TraerListaTranPorEnvioCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTranPorEnvioCentroCostoCompleted As TraerListaTranPorEnvioCentroCostoCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTotalConciliarCompleted As TraerListaTotalConciliarCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTranParamCompleted As TraerListaTranParamCompletedEventHandler

        '''<remarks/>
        Public Event EnviarAAprobacionCompleted As EnviarAAprobacionCompletedEventHandler

        '''<remarks/>
        Public Event IncluirEnEnvioCompleted As IncluirEnEnvioCompletedEventHandler

        '''<remarks/>
        Public Event IncluirEnEnvioTodoLoPendienteCompleted As IncluirEnEnvioTodoLoPendienteCompletedEventHandler

        '''<remarks/>
        Public Event ExcluirDeEnvioCompleted As ExcluirDeEnvioCompletedEventHandler

        '''<remarks/>
        Public Event ExcluirDeEnvioTotalCompleted As ExcluirDeEnvioTotalCompletedEventHandler

        '''<remarks/>
        Public Event ActualizaNumeroDocumentoInternoCompleted As ActualizaNumeroDocumentoInternoCompletedEventHandler

        '''<remarks/>
        Public Event ActualizaCodigoReferenciaCompleted As ActualizaCodigoReferenciaCompletedEventHandler

        '''<remarks/>
        Public Event ActualizaCamposParaTFTCompleted As ActualizaCamposParaTFTCompletedEventHandler

        '''<remarks/>
        Public Event ActualizarEstadoCompleted As ActualizarEstadoCompletedEventHandler

        '''<remarks/>
        Public Event ActualizarEstadosCompleted As ActualizarEstadosCompletedEventHandler

        '''<remarks/>
        Public Event ActualizarTransaccionCompleted As ActualizarTransaccionCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTranPorEnvioParaProcesarTFTCompleted As TraerListaTranPorEnvioParaProcesarTFTCompletedEventHandler

        '''<remarks/>
        Public Event AnularTransaccionCompleted As AnularTransaccionCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/EliminaPagosTemporal", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub EliminaPagosTemporal(ByVal usuario As String, ByVal IP As String)
            Me.Invoke("EliminaPagosTemporal", New Object() {usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginEliminaPagosTemporal(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EliminaPagosTemporal", New Object() {usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndEliminaPagosTemporal(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub EliminaPagosTemporalAsync(ByVal usuario As String, ByVal IP As String)
            Me.EliminaPagosTemporalAsync(usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EliminaPagosTemporalAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.EliminaPagosTemporalOperationCompleted Is Nothing) Then
                Me.EliminaPagosTemporalOperationCompleted = AddressOf Me.OnEliminaPagosTemporalOperationCompleted
            End If
            Me.InvokeAsync("EliminaPagosTemporal", New Object() {usuario, IP}, Me.EliminaPagosTemporalOperationCompleted, userState)
        End Sub

        Private Sub OnEliminaPagosTemporalOperationCompleted(ByVal arg As Object)
            If (Not (Me.EliminaPagosTemporalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EliminaPagosTemporalCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneDocumentosInternosPorLiquidar", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneDocumentosInternosPorLiquidar(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneDocumentosInternosPorLiquidar", New Object() {tipoOperacion, numeroEnvio, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginObtieneDocumentosInternosPorLiquidar(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneDocumentosInternosPorLiquidar", New Object() {tipoOperacion, numeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneDocumentosInternosPorLiquidar(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneDocumentosInternosPorLiquidarAsync(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.ObtieneDocumentosInternosPorLiquidarAsync(tipoOperacion, numeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneDocumentosInternosPorLiquidarAsync(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ObtieneDocumentosInternosPorLiquidarOperationCompleted Is Nothing) Then
                Me.ObtieneDocumentosInternosPorLiquidarOperationCompleted = AddressOf Me.OnObtieneDocumentosInternosPorLiquidarOperationCompleted
            End If
            Me.InvokeAsync("ObtieneDocumentosInternosPorLiquidar", New Object() {tipoOperacion, numeroEnvio, usuario, IP}, Me.ObtieneDocumentosInternosPorLiquidarOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneDocumentosInternosPorLiquidarOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneDocumentosInternosPorLiquidarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneDocumentosInternosPorLiquidarCompleted(Me, New ObtieneDocumentosInternosPorLiquidarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneTransaccionesSinDocumentoInternoPorLiquidar", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneTransaccionesSinDocumentoInternoPorLiquidar(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneTransaccionesSinDocumentoInternoPorLiquidar", New Object() {tipoOperacion, numeroEnvio, modalidad, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginObtieneTransaccionesSinDocumentoInternoPorLiquidar(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneTransaccionesSinDocumentoInternoPorLiquidar", New Object() {tipoOperacion, numeroEnvio, modalidad, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneTransaccionesSinDocumentoInternoPorLiquidar(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneTransaccionesSinDocumentoInternoPorLiquidarAsync(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal usuario As String, ByVal IP As String)
            Me.ObtieneTransaccionesSinDocumentoInternoPorLiquidarAsync(tipoOperacion, numeroEnvio, modalidad, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneTransaccionesSinDocumentoInternoPorLiquidarAsync(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ObtieneTransaccionesSinDocumentoInternoPorLiquidarOperationCompleted Is Nothing) Then
                Me.ObtieneTransaccionesSinDocumentoInternoPorLiquidarOperationCompleted = AddressOf Me.OnObtieneTransaccionesSinDocumentoInternoPorLiquidarOperationCompleted
            End If
            Me.InvokeAsync("ObtieneTransaccionesSinDocumentoInternoPorLiquidar", New Object() {tipoOperacion, numeroEnvio, modalidad, usuario, IP}, Me.ObtieneTransaccionesSinDocumentoInternoPorLiquidarOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneTransaccionesSinDocumentoInternoPorLiquidarOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompleted(Me, New ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumento", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumento(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String) As Decimal
            Dim results() As Object = Me.Invoke("ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumento", New Object() {tipoOperacion, numeroEnvio, modalidad, numeroDocumento, usuario, IP})
            Return CType(results(0), Decimal)
        End Function

        '''<remarks/>
        Public Function BeginObtieneMontoTotalTransaccionesPagadasPorNumeroDocumento(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumento", New Object() {tipoOperacion, numeroEnvio, modalidad, numeroDocumento, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneMontoTotalTransaccionesPagadasPorNumeroDocumento(ByVal asyncResult As System.IAsyncResult) As Decimal
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Decimal)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoAsync(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String)
            Me.ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoAsync(tipoOperacion, numeroEnvio, modalidad, numeroDocumento, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoAsync(ByVal tipoOperacion As String, ByVal numeroEnvio As Integer, ByVal modalidad As String, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoOperationCompleted Is Nothing) Then
                Me.ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoOperationCompleted = AddressOf Me.OnObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoOperationCompleted
            End If
            Me.InvokeAsync("ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumento", New Object() {tipoOperacion, numeroEnvio, modalidad, numeroDocumento, usuario, IP}, Me.ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompleted(Me, New ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtienePagosImportados", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtienePagosImportados(ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtienePagosImportados", New Object() {usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginObtienePagosImportados(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtienePagosImportados", New Object() {usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtienePagosImportados(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtienePagosImportadosAsync(ByVal usuario As String, ByVal IP As String)
            Me.ObtienePagosImportadosAsync(usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtienePagosImportadosAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ObtienePagosImportadosOperationCompleted Is Nothing) Then
                Me.ObtienePagosImportadosOperationCompleted = AddressOf Me.OnObtienePagosImportadosOperationCompleted
            End If
            Me.InvokeAsync("ObtienePagosImportados", New Object() {usuario, IP}, Me.ObtienePagosImportadosOperationCompleted, userState)
        End Sub

        Private Sub OnObtienePagosImportadosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtienePagosImportadosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtienePagosImportadosCompleted(Me, New ObtienePagosImportadosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregarConOrdenPago", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function AgregarConOrdenPago( _
                ByRef numero_transaccion As Integer, _
                ByVal tipo_operacion As String, _
                ByRef numero_orden As Integer, _
                ByVal cedula_persona As String, _
                ByVal nombre_persona As String, _
                ByVal cedula_persona_serv As String, _
                ByVal nombre_persona_serv As String, _
                ByVal codigo_moneda As Integer, _
                ByVal cuenta_cliente As String, _
                ByVal monto As Decimal, _
                ByVal codigo_servicio As Integer, _
                ByVal codigo_concepto As Integer, _
                ByVal codigo_referencia As String, _
                ByVal numero_envio As Integer, _
                ByVal codigo_centro As Integer, _
                ByVal centro_costo_origen As Integer, _
                ByVal numero_documento As String, _
                ByVal numero_servicio As String, _
                ByVal id_servicio As String, _
                ByVal codigo_entidad As String, _
                ByVal modalidad As String, _
                ByVal descripcion_tran As String, _
                ByVal codigo_motivo_envio As Integer, _
                ByVal estado_tran As String, _
                ByVal usuario_registra As String, _
                ByVal codigo_motivo_rechazo As Integer, _
                ByVal id_verificacion As String, _
                ByVal importado As String, _
                ByVal CedulaClienteOrigen As String, _
                ByVal NombreClienteOrigen As String, _
                ByVal CuentaClienteOrigen As String, _
                ByVal CodOficina As String, _
                ByVal LugarIntercambio As Integer, _
                ByVal ErrorFisico As Integer, _
                ByVal LoteDocumentos As String, _
                ByVal TipoCheque As String, _
                ByVal usuario As String, _
                ByVal IP As String, _
                ByVal canal As Integer) As Integer
            Dim results() As Object = Me.Invoke("AgregarConOrdenPago", New Object() {numero_transaccion, tipo_operacion, numero_orden, cedula_persona, nombre_persona, cedula_persona_serv, nombre_persona_serv, codigo_moneda, cuenta_cliente, monto, codigo_servicio, codigo_concepto, codigo_referencia, numero_envio, codigo_centro, centro_costo_origen, numero_documento, numero_servicio, id_servicio, codigo_entidad, modalidad, descripcion_tran, codigo_motivo_envio, estado_tran, usuario_registra, codigo_motivo_rechazo, id_verificacion, importado, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen, CodOficina, LugarIntercambio, ErrorFisico, LoteDocumentos, TipoCheque, usuario, IP, canal})
            numero_transaccion = CType(results(1), Integer)
            numero_orden = CType(results(2), Integer)
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Function BeginAgregarConOrdenPago( _
                    ByVal numero_transaccion As Integer, _
                    ByVal tipo_operacion As String, _
                    ByVal numero_orden As Integer, _
                    ByVal cedula_persona As String, _
                    ByVal nombre_persona As String, _
                    ByVal cedula_persona_serv As String, _
                    ByVal nombre_persona_serv As String, _
                    ByVal codigo_moneda As Integer, _
                    ByVal cuenta_cliente As String, _
                    ByVal monto As Decimal, _
                    ByVal codigo_servicio As Integer, _
                    ByVal codigo_concepto As Integer, _
                    ByVal codigo_referencia As String, _
                    ByVal numero_envio As Integer, _
                    ByVal codigo_centro As Integer, _
                    ByVal centro_costo_origen As Integer, _
                    ByVal numero_documento As String, _
                    ByVal numero_servicio As String, _
                    ByVal id_servicio As String, _
                    ByVal codigo_entidad As String, _
                    ByVal modalidad As String, _
                    ByVal descripcion_tran As String, _
                    ByVal codigo_motivo_envio As Integer, _
                    ByVal estado_tran As String, _
                    ByVal usuario_registra As String, _
                    ByVal codigo_motivo_rechazo As Integer, _
                    ByVal id_verificacion As String, _
                    ByVal importado As String, _
                    ByVal CedulaClienteOrigen As String, _
                    ByVal NombreClienteOrigen As String, _
                    ByVal CuentaClienteOrigen As String, _
                    ByVal CodOficina As String, _
                    ByVal LugarIntercambio As Integer, _
                    ByVal ErrorFisico As Integer, _
                    ByVal LoteDocumentos As String, _
                    ByVal TipoCheque As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal canal As Integer, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregarConOrdenPago", New Object() {numero_transaccion, tipo_operacion, numero_orden, cedula_persona, nombre_persona, cedula_persona_serv, nombre_persona_serv, codigo_moneda, cuenta_cliente, monto, codigo_servicio, codigo_concepto, codigo_referencia, numero_envio, codigo_centro, centro_costo_origen, numero_documento, numero_servicio, id_servicio, codigo_entidad, modalidad, descripcion_tran, codigo_motivo_envio, estado_tran, usuario_registra, codigo_motivo_rechazo, id_verificacion, importado, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen, CodOficina, LugarIntercambio, ErrorFisico, LoteDocumentos, TipoCheque, usuario, IP, canal}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndAgregarConOrdenPago(ByVal asyncResult As System.IAsyncResult, ByRef numero_transaccion As Integer, ByRef numero_orden As Integer) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            numero_transaccion = CType(results(1), Integer)
            numero_orden = CType(results(2), Integer)
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub AgregarConOrdenPagoAsync( _
                    ByVal numero_transaccion As Integer, _
                    ByVal tipo_operacion As String, _
                    ByVal numero_orden As Integer, _
                    ByVal cedula_persona As String, _
                    ByVal nombre_persona As String, _
                    ByVal cedula_persona_serv As String, _
                    ByVal nombre_persona_serv As String, _
                    ByVal codigo_moneda As Integer, _
                    ByVal cuenta_cliente As String, _
                    ByVal monto As Decimal, _
                    ByVal codigo_servicio As Integer, _
                    ByVal codigo_concepto As Integer, _
                    ByVal codigo_referencia As String, _
                    ByVal numero_envio As Integer, _
                    ByVal codigo_centro As Integer, _
                    ByVal centro_costo_origen As Integer, _
                    ByVal numero_documento As String, _
                    ByVal numero_servicio As String, _
                    ByVal id_servicio As String, _
                    ByVal codigo_entidad As String, _
                    ByVal modalidad As String, _
                    ByVal descripcion_tran As String, _
                    ByVal codigo_motivo_envio As Integer, _
                    ByVal estado_tran As String, _
                    ByVal usuario_registra As String, _
                    ByVal codigo_motivo_rechazo As Integer, _
                    ByVal id_verificacion As String, _
                    ByVal importado As String, _
                    ByVal CedulaClienteOrigen As String, _
                    ByVal NombreClienteOrigen As String, _
                    ByVal CuentaClienteOrigen As String, _
                    ByVal CodOficina As String, _
                    ByVal LugarIntercambio As Integer, _
                    ByVal ErrorFisico As Integer, _
                    ByVal LoteDocumentos As String, _
                    ByVal TipoCheque As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal canal As Integer)
            Me.AgregarConOrdenPagoAsync(numero_transaccion, tipo_operacion, numero_orden, cedula_persona, nombre_persona, cedula_persona_serv, nombre_persona_serv, codigo_moneda, cuenta_cliente, monto, codigo_servicio, codigo_concepto, codigo_referencia, numero_envio, codigo_centro, centro_costo_origen, numero_documento, numero_servicio, id_servicio, codigo_entidad, modalidad, descripcion_tran, codigo_motivo_envio, estado_tran, usuario_registra, codigo_motivo_rechazo, id_verificacion, importado, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen, CodOficina, LugarIntercambio, ErrorFisico, LoteDocumentos, TipoCheque, usuario, IP, canal, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregarConOrdenPagoAsync( _
                    ByVal numero_transaccion As Integer, _
                    ByVal tipo_operacion As String, _
                    ByVal numero_orden As Integer, _
                    ByVal cedula_persona As String, _
                    ByVal nombre_persona As String, _
                    ByVal cedula_persona_serv As String, _
                    ByVal nombre_persona_serv As String, _
                    ByVal codigo_moneda As Integer, _
                    ByVal cuenta_cliente As String, _
                    ByVal monto As Decimal, _
                    ByVal codigo_servicio As Integer, _
                    ByVal codigo_concepto As Integer, _
                    ByVal codigo_referencia As String, _
                    ByVal numero_envio As Integer, _
                    ByVal codigo_centro As Integer, _
                    ByVal centro_costo_origen As Integer, _
                    ByVal numero_documento As String, _
                    ByVal numero_servicio As String, _
                    ByVal id_servicio As String, _
                    ByVal codigo_entidad As String, _
                    ByVal modalidad As String, _
                    ByVal descripcion_tran As String, _
                    ByVal codigo_motivo_envio As Integer, _
                    ByVal estado_tran As String, _
                    ByVal usuario_registra As String, _
                    ByVal codigo_motivo_rechazo As Integer, _
                    ByVal id_verificacion As String, _
                    ByVal importado As String, _
                    ByVal CedulaClienteOrigen As String, _
                    ByVal NombreClienteOrigen As String, _
                    ByVal CuentaClienteOrigen As String, _
                    ByVal CodOficina As String, _
                    ByVal LugarIntercambio As Integer, _
                    ByVal ErrorFisico As Integer, _
                    ByVal LoteDocumentos As String, _
                    ByVal TipoCheque As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal canal As Integer, _
                    ByVal userState As Object)
            If (Me.AgregarConOrdenPagoOperationCompleted Is Nothing) Then
                Me.AgregarConOrdenPagoOperationCompleted = AddressOf Me.OnAgregarConOrdenPagoOperationCompleted
            End If
            Me.InvokeAsync("AgregarConOrdenPago", New Object() {numero_transaccion, tipo_operacion, numero_orden, cedula_persona, nombre_persona, cedula_persona_serv, nombre_persona_serv, codigo_moneda, cuenta_cliente, monto, codigo_servicio, codigo_concepto, codigo_referencia, numero_envio, codigo_centro, centro_costo_origen, numero_documento, numero_servicio, id_servicio, codigo_entidad, modalidad, descripcion_tran, codigo_motivo_envio, estado_tran, usuario_registra, codigo_motivo_rechazo, id_verificacion, importado, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen, CodOficina, LugarIntercambio, ErrorFisico, LoteDocumentos, TipoCheque, usuario, IP, canal}, Me.AgregarConOrdenPagoOperationCompleted, userState)
        End Sub

        Private Sub OnAgregarConOrdenPagoOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregarConOrdenPagoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregarConOrdenPagoCompleted(Me, New AgregarConOrdenPagoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function AgregarBD( _
                ByVal v_TipoOperacion As String, _
                ByVal v_CodigoServicio As Integer, _
                ByVal v_NumeroOrden As Integer, _
                ByVal v_CodigoCentro As Integer, _
                ByVal v_CodigoConcepto As Integer, _
                ByVal v_CedulaPersona As String, _
                ByVal v_CodigoMoneda As Integer, _
                ByVal v_CuentaCliente As String, _
                ByVal v_Monto As Decimal, _
                ByVal v_NumeroDocumento As String, _
                ByVal v_DescripcionTran As String, _
                ByVal v_NumeroServicio As String, _
                ByVal v_CodigoMotivoEnvio As Integer, _
                ByVal v_Importado As String, _
                ByVal v_EstadoTran As String, _
                ByVal v_NumeroTarjeta As String, _
                ByVal v_MontoCC As Decimal, _
                ByVal v_CodigoMonedaCC As Integer, _
                ByVal v_TipoCambio As Decimal, _
                ByVal v_TipoCambioCC As Decimal, _
                ByVal v_Modalidad As String, _
                ByVal v_NumeroEnvio As Integer, _
                ByVal usuario As String, _
                ByVal IP As String) As Integer
            Dim results() As Object = Me.Invoke("AgregarBD", New Object() {v_TipoOperacion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_Importado, v_EstadoTran, v_NumeroTarjeta, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, v_NumeroEnvio, usuario, IP})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Function BeginAgregarBD( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Decimal, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_Importado As String, _
                    ByVal v_EstadoTran As String, _
                    ByVal v_NumeroTarjeta As String, _
                    ByVal v_MontoCC As Decimal, _
                    ByVal v_CodigoMonedaCC As Integer, _
                    ByVal v_TipoCambio As Decimal, _
                    ByVal v_TipoCambioCC As Decimal, _
                    ByVal v_Modalidad As String, _
                    ByVal v_NumeroEnvio As Integer, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregarBD", New Object() {v_TipoOperacion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_Importado, v_EstadoTran, v_NumeroTarjeta, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, v_NumeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndAgregarBD(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub AgregarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Decimal, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_Importado As String, _
                    ByVal v_EstadoTran As String, _
                    ByVal v_NumeroTarjeta As String, _
                    ByVal v_MontoCC As Decimal, _
                    ByVal v_CodigoMonedaCC As Integer, _
                    ByVal v_TipoCambio As Decimal, _
                    ByVal v_TipoCambioCC As Decimal, _
                    ByVal v_Modalidad As String, _
                    ByVal v_NumeroEnvio As Integer, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.AgregarBDAsync(v_TipoOperacion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_Importado, v_EstadoTran, v_NumeroTarjeta, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, v_NumeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Decimal, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_Importado As String, _
                    ByVal v_EstadoTran As String, _
                    ByVal v_NumeroTarjeta As String, _
                    ByVal v_MontoCC As Decimal, _
                    ByVal v_CodigoMonedaCC As Integer, _
                    ByVal v_TipoCambio As Decimal, _
                    ByVal v_TipoCambioCC As Decimal, _
                    ByVal v_Modalidad As String, _
                    ByVal v_NumeroEnvio As Integer, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.AgregarBDOperationCompleted Is Nothing) Then
                Me.AgregarBDOperationCompleted = AddressOf Me.OnAgregarBDOperationCompleted
            End If
            Me.InvokeAsync("AgregarBD", New Object() {v_TipoOperacion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_Importado, v_EstadoTran, v_NumeroTarjeta, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, v_NumeroEnvio, usuario, IP}, Me.AgregarBDOperationCompleted, userState)
        End Sub

        Private Sub OnAgregarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregarBDCompleted(Me, New AgregarBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/BorrarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub BorrarBD(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("BorrarBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginBorrarBD(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("BorrarBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndBorrarBD(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub BorrarBDAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String)
            Me.BorrarBDAsync(v_TipoOperacion, v_NumeroTransaccion, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub BorrarBDAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.BorrarBDOperationCompleted Is Nothing) Then
                Me.BorrarBDOperationCompleted = AddressOf Me.OnBorrarBDOperationCompleted
            End If
            Me.InvokeAsync("BorrarBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP}, Me.BorrarBDOperationCompleted, userState)
        End Sub

        Private Sub OnBorrarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.BorrarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BorrarBDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ModificarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ModificarBD( _
                ByVal v_TipoOperacion As String, _
                ByVal v_NumeroTransaccion As Integer, _
                ByVal v_CodigoServicio As Integer, _
                ByVal v_NumeroOrden As Integer, _
                ByVal v_CodigoCentro As Integer, _
                ByVal v_CodigoConcepto As Integer, _
                ByVal v_CedulaPersona As String, _
                ByVal v_CodigoMoneda As Integer, _
                ByVal v_CuentaCliente As String, _
                ByVal v_Monto As Decimal, _
                ByVal v_NumeroDocumento As String, _
                ByVal v_DescripcionTran As String, _
                ByVal v_NumeroServicio As String, _
                ByVal v_CodigoMotivoEnvio As Integer, _
                ByVal v_MontoCC As Double, _
                ByVal v_CodigoMonedaCC As Integer, _
                ByVal v_TipoCambio As Decimal, _
                ByVal v_TipoCambioCC As Decimal, _
                ByVal v_Modalidad As String, _
                ByVal usuario As String, _
                ByVal IP As String)
            Me.Invoke("ModificarBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginModificarBD( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroTransaccion As Integer, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Decimal, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_MontoCC As Double, _
                    ByVal v_CodigoMonedaCC As Integer, _
                    ByVal v_TipoCambio As Decimal, _
                    ByVal v_TipoCambioCC As Decimal, _
                    ByVal v_Modalidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ModificarBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndModificarBD(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ModificarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroTransaccion As Integer, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Decimal, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_MontoCC As Double, _
                    ByVal v_CodigoMonedaCC As Integer, _
                    ByVal v_TipoCambio As Decimal, _
                    ByVal v_TipoCambioCC As Decimal, _
                    ByVal v_Modalidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.ModificarBDAsync(v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ModificarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroTransaccion As Integer, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Decimal, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_MontoCC As Double, _
                    ByVal v_CodigoMonedaCC As Integer, _
                    ByVal v_TipoCambio As Decimal, _
                    ByVal v_TipoCambioCC As Decimal, _
                    ByVal v_Modalidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.ModificarBDOperationCompleted Is Nothing) Then
                Me.ModificarBDOperationCompleted = AddressOf Me.OnModificarBDOperationCompleted
            End If
            Me.InvokeAsync("ModificarBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoMotivoEnvio, v_MontoCC, v_CodigoMonedaCC, v_TipoCambio, v_TipoCambioCC, v_Modalidad, usuario, IP}, Me.ModificarBDOperationCompleted, userState)
        End Sub

        Private Sub OnModificarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModificarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModificarBDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerRegistroBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub TraerRegistroBD( _
                ByVal v_TipoOperacion As String, _
                ByVal v_NumeroTransaccion As Integer, _
                ByRef v_CodigoServicio As Integer, _
                ByRef v_NumeroOrden As Integer, _
                ByRef v_CodigoCentro As Integer, _
                ByRef v_CodigoConcepto As Integer, _
                ByRef v_CedulaPersona As String, _
                ByRef v_CodigoMoneda As Integer, _
                ByRef v_CuentaCliente As String, _
                ByRef v_Monto As Double, _
                ByRef v_NumeroDocumento As String, _
                ByRef v_DescripcionTran As String, _
                ByRef v_NumeroServicio As String, _
                ByRef v_CodigoReferencia As String, _
                ByRef v_CodigoMotivoEnvio As Integer, _
                ByRef v_NumeroEnvio As Integer, _
                ByRef v_Importado As String, _
                ByRef v_EstadoTran As String, _
                ByRef v_UsuarioRegistra As String, _
                ByRef v_FechaRegistro As Date, _
                ByRef v_UsuarioAprueba As String, _
                ByRef v_FechaAprobacion As Date, _
                ByRef v_CodMotivoRechazo As Integer, _
                ByRef v_IdVerificacion As String, _
                ByRef v_CedulaPersonaServ As String, _
                ByVal usuario As String, _
                ByVal IP As String)
            Dim results() As Object = Me.Invoke("TraerRegistroBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoReferencia, v_CodigoMotivoEnvio, v_NumeroEnvio, v_Importado, v_EstadoTran, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_CodMotivoRechazo, v_IdVerificacion, v_CedulaPersonaServ, usuario, IP})
            v_CodigoServicio = CType(results(0), Integer)
            v_NumeroOrden = CType(results(1), Integer)
            v_CodigoCentro = CType(results(2), Integer)
            v_CodigoConcepto = CType(results(3), Integer)
            v_CedulaPersona = CType(results(4), String)
            v_CodigoMoneda = CType(results(5), Integer)
            v_CuentaCliente = CType(results(6), String)
            v_Monto = CType(results(7), Double)
            v_NumeroDocumento = CType(results(8), String)
            v_DescripcionTran = CType(results(9), String)
            v_NumeroServicio = CType(results(10), String)
            v_CodigoReferencia = CType(results(11), String)
            v_CodigoMotivoEnvio = CType(results(12), Integer)
            v_NumeroEnvio = CType(results(13), Integer)
            v_Importado = CType(results(14), String)
            v_EstadoTran = CType(results(15), String)
            v_UsuarioRegistra = CType(results(16), String)
            v_FechaRegistro = CType(results(17), Date)
            v_UsuarioAprueba = CType(results(18), String)
            v_FechaAprobacion = CType(results(19), Date)
            v_CodMotivoRechazo = CType(results(20), Integer)
            v_IdVerificacion = CType(results(21), String)
            v_CedulaPersonaServ = CType(results(22), String)
        End Sub

        '''<remarks/>
        Public Function BeginTraerRegistroBD( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroTransaccion As Integer, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Double, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoReferencia As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_NumeroEnvio As Integer, _
                    ByVal v_Importado As String, _
                    ByVal v_EstadoTran As String, _
                    ByVal v_UsuarioRegistra As String, _
                    ByVal v_FechaRegistro As Date, _
                    ByVal v_UsuarioAprueba As String, _
                    ByVal v_FechaAprobacion As Date, _
                    ByVal v_CodMotivoRechazo As Integer, _
                    ByVal v_IdVerificacion As String, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerRegistroBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoReferencia, v_CodigoMotivoEnvio, v_NumeroEnvio, v_Importado, v_EstadoTran, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_CodMotivoRechazo, v_IdVerificacion, v_CedulaPersonaServ, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndTraerRegistroBD( _
                    ByVal asyncResult As System.IAsyncResult, _
                    ByRef v_CodigoServicio As Integer, _
                    ByRef v_NumeroOrden As Integer, _
                    ByRef v_CodigoCentro As Integer, _
                    ByRef v_CodigoConcepto As Integer, _
                    ByRef v_CedulaPersona As String, _
                    ByRef v_CodigoMoneda As Integer, _
                    ByRef v_CuentaCliente As String, _
                    ByRef v_Monto As Double, _
                    ByRef v_NumeroDocumento As String, _
                    ByRef v_DescripcionTran As String, _
                    ByRef v_NumeroServicio As String, _
                    ByRef v_CodigoReferencia As String, _
                    ByRef v_CodigoMotivoEnvio As Integer, _
                    ByRef v_NumeroEnvio As Integer, _
                    ByRef v_Importado As String, _
                    ByRef v_EstadoTran As String, _
                    ByRef v_UsuarioRegistra As String, _
                    ByRef v_FechaRegistro As Date, _
                    ByRef v_UsuarioAprueba As String, _
                    ByRef v_FechaAprobacion As Date, _
                    ByRef v_CodMotivoRechazo As Integer, _
                    ByRef v_IdVerificacion As String, _
                    ByRef v_CedulaPersonaServ As String)
            Dim results() As Object = Me.EndInvoke(asyncResult)
            v_CodigoServicio = CType(results(0), Integer)
            v_NumeroOrden = CType(results(1), Integer)
            v_CodigoCentro = CType(results(2), Integer)
            v_CodigoConcepto = CType(results(3), Integer)
            v_CedulaPersona = CType(results(4), String)
            v_CodigoMoneda = CType(results(5), Integer)
            v_CuentaCliente = CType(results(6), String)
            v_Monto = CType(results(7), Double)
            v_NumeroDocumento = CType(results(8), String)
            v_DescripcionTran = CType(results(9), String)
            v_NumeroServicio = CType(results(10), String)
            v_CodigoReferencia = CType(results(11), String)
            v_CodigoMotivoEnvio = CType(results(12), Integer)
            v_NumeroEnvio = CType(results(13), Integer)
            v_Importado = CType(results(14), String)
            v_EstadoTran = CType(results(15), String)
            v_UsuarioRegistra = CType(results(16), String)
            v_FechaRegistro = CType(results(17), Date)
            v_UsuarioAprueba = CType(results(18), String)
            v_FechaAprobacion = CType(results(19), Date)
            v_CodMotivoRechazo = CType(results(20), Integer)
            v_IdVerificacion = CType(results(21), String)
            v_CedulaPersonaServ = CType(results(22), String)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroTransaccion As Integer, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Double, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoReferencia As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_NumeroEnvio As Integer, _
                    ByVal v_Importado As String, _
                    ByVal v_EstadoTran As String, _
                    ByVal v_UsuarioRegistra As String, _
                    ByVal v_FechaRegistro As Date, _
                    ByVal v_UsuarioAprueba As String, _
                    ByVal v_FechaAprobacion As Date, _
                    ByVal v_CodMotivoRechazo As Integer, _
                    ByVal v_IdVerificacion As String, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.TraerRegistroBDAsync(v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoReferencia, v_CodigoMotivoEnvio, v_NumeroEnvio, v_Importado, v_EstadoTran, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_CodMotivoRechazo, v_IdVerificacion, v_CedulaPersonaServ, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroTransaccion As Integer, _
                    ByVal v_CodigoServicio As Integer, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CodigoCentro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_Monto As Double, _
                    ByVal v_NumeroDocumento As String, _
                    ByVal v_DescripcionTran As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_CodigoReferencia As String, _
                    ByVal v_CodigoMotivoEnvio As Integer, _
                    ByVal v_NumeroEnvio As Integer, _
                    ByVal v_Importado As String, _
                    ByVal v_EstadoTran As String, _
                    ByVal v_UsuarioRegistra As String, _
                    ByVal v_FechaRegistro As Date, _
                    ByVal v_UsuarioAprueba As String, _
                    ByVal v_FechaAprobacion As Date, _
                    ByVal v_CodMotivoRechazo As Integer, _
                    ByVal v_IdVerificacion As String, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.TraerRegistroBDOperationCompleted Is Nothing) Then
                Me.TraerRegistroBDOperationCompleted = AddressOf Me.OnTraerRegistroBDOperationCompleted
            End If
            Me.InvokeAsync("TraerRegistroBD", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_CodigoServicio, v_NumeroOrden, v_CodigoCentro, v_CodigoConcepto, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_Monto, v_NumeroDocumento, v_DescripcionTran, v_NumeroServicio, v_CodigoReferencia, v_CodigoMotivoEnvio, v_NumeroEnvio, v_Importado, v_EstadoTran, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_CodMotivoRechazo, v_IdVerificacion, v_CedulaPersonaServ, usuario, IP}, Me.TraerRegistroBDOperationCompleted, userState)
        End Sub

        Private Sub OnTraerRegistroBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerRegistroBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerRegistroBDCompleted(Me, New TraerRegistroBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTotalBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTotalBD(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTotalBD", New Object() {ListaCondiciones, MaxRegistros, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTotalBD(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTotalBD", New Object() {ListaCondiciones, MaxRegistros, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTotalBD(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTotalBDAsync(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTotalBDAsync(ListaCondiciones, MaxRegistros, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTotalBDAsync(ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTotalBDOperationCompleted Is Nothing) Then
                Me.TraerListaTotalBDOperationCompleted = AddressOf Me.OnTraerListaTotalBDOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTotalBD", New Object() {ListaCondiciones, MaxRegistros, usuario, IP}, Me.TraerListaTotalBDOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTotalBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTotalBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTotalBDCompleted(Me, New TraerListaTotalBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTranCentroPropio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTranCentroPropio(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTranCentroPropio", New Object() {lTipoOperacion, lEstado, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTranCentroPropio(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTranCentroPropio", New Object() {lTipoOperacion, lEstado, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTranCentroPropio(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTranCentroPropioAsync(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTranCentroPropioAsync(lTipoOperacion, lEstado, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTranCentroPropioAsync(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTranCentroPropioOperationCompleted Is Nothing) Then
                Me.TraerListaTranCentroPropioOperationCompleted = AddressOf Me.OnTraerListaTranCentroPropioOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTranCentroPropio", New Object() {lTipoOperacion, lEstado, usuario, IP}, Me.TraerListaTranCentroPropioOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTranCentroPropioOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTranCentroPropioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTranCentroPropioCompleted(Me, New TraerListaTranCentroPropioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTranCentroPropioUser", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTranCentroPropioUser(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal lCodigoServicio As Integer, ByVal lCodigoCentro As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTranCentroPropioUser", New Object() {lTipoOperacion, lEstado, lCodigoServicio, lCodigoCentro, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTranCentroPropioUser(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal lCodigoServicio As Integer, ByVal lCodigoCentro As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTranCentroPropioUser", New Object() {lTipoOperacion, lEstado, lCodigoServicio, lCodigoCentro, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTranCentroPropioUser(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTranCentroPropioUserAsync(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal lCodigoServicio As Integer, ByVal lCodigoCentro As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTranCentroPropioUserAsync(lTipoOperacion, lEstado, lCodigoServicio, lCodigoCentro, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTranCentroPropioUserAsync(ByVal lTipoOperacion As String, ByVal lEstado As String, ByVal lCodigoServicio As Integer, ByVal lCodigoCentro As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTranCentroPropioUserOperationCompleted Is Nothing) Then
                Me.TraerListaTranCentroPropioUserOperationCompleted = AddressOf Me.OnTraerListaTranCentroPropioUserOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTranCentroPropioUser", New Object() {lTipoOperacion, lEstado, lCodigoServicio, lCodigoCentro, usuario, IP}, Me.TraerListaTranCentroPropioUserOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTranCentroPropioUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTranCentroPropioUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTranCentroPropioUserCompleted(Me, New TraerListaTranCentroPropioUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTranPorEnvio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTranPorEnvio(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTranPorEnvio", New Object() {lTipoOperacion, lNumeroEnvio, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTranPorEnvio(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTranPorEnvio", New Object() {lTipoOperacion, lNumeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTranPorEnvio(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTranPorEnvioAsync(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTranPorEnvioAsync(lTipoOperacion, lNumeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTranPorEnvioAsync(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTranPorEnvioOperationCompleted Is Nothing) Then
                Me.TraerListaTranPorEnvioOperationCompleted = AddressOf Me.OnTraerListaTranPorEnvioOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTranPorEnvio", New Object() {lTipoOperacion, lNumeroEnvio, usuario, IP}, Me.TraerListaTranPorEnvioOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTranPorEnvioOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTranPorEnvioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTranPorEnvioCompleted(Me, New TraerListaTranPorEnvioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTranPorEnvioCentroCosto", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTranPorEnvioCentroCosto(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal lCentroCosto As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTranPorEnvioCentroCosto", New Object() {lTipoOperacion, lNumeroEnvio, lCentroCosto, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTranPorEnvioCentroCosto(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal lCentroCosto As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTranPorEnvioCentroCosto", New Object() {lTipoOperacion, lNumeroEnvio, lCentroCosto, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTranPorEnvioCentroCosto(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTranPorEnvioCentroCostoAsync(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal lCentroCosto As String, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTranPorEnvioCentroCostoAsync(lTipoOperacion, lNumeroEnvio, lCentroCosto, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTranPorEnvioCentroCostoAsync(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal lCentroCosto As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTranPorEnvioCentroCostoOperationCompleted Is Nothing) Then
                Me.TraerListaTranPorEnvioCentroCostoOperationCompleted = AddressOf Me.OnTraerListaTranPorEnvioCentroCostoOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTranPorEnvioCentroCosto", New Object() {lTipoOperacion, lNumeroEnvio, lCentroCosto, usuario, IP}, Me.TraerListaTranPorEnvioCentroCostoOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTranPorEnvioCentroCostoOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTranPorEnvioCentroCostoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTranPorEnvioCentroCostoCompleted(Me, New TraerListaTranPorEnvioCentroCostoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTotalConciliar", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTotalConciliar(ByVal tipoOp As String, ByVal Servicio As String, ByVal fechaCiclo As Date, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTotalConciliar", New Object() {tipoOp, Servicio, fechaCiclo, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTotalConciliar(ByVal tipoOp As String, ByVal Servicio As String, ByVal fechaCiclo As Date, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTotalConciliar", New Object() {tipoOp, Servicio, fechaCiclo, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTotalConciliar(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTotalConciliarAsync(ByVal tipoOp As String, ByVal Servicio As String, ByVal fechaCiclo As Date, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTotalConciliarAsync(tipoOp, Servicio, fechaCiclo, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTotalConciliarAsync(ByVal tipoOp As String, ByVal Servicio As String, ByVal fechaCiclo As Date, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTotalConciliarOperationCompleted Is Nothing) Then
                Me.TraerListaTotalConciliarOperationCompleted = AddressOf Me.OnTraerListaTotalConciliarOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTotalConciliar", New Object() {tipoOp, Servicio, fechaCiclo, usuario, IP}, Me.TraerListaTotalConciliarOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTotalConciliarOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTotalConciliarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTotalConciliarCompleted(Me, New TraerListaTotalConciliarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTranParam", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTranParam( _
                ByVal lTipoOperacion As String, _
                ByVal lNumeroTran_desde As Integer, _
                ByVal lNumeroTran_hasta As Integer, _
                ByVal lFecha_desde As Date, _
                ByVal lFecha_hasta As Date, _
                ByVal lCodigoServicio As Integer, _
                ByVal lCentroCosto As Integer, _
                ByVal lCedula As String, _
                ByVal lCodigoConcepto As Integer, _
                ByVal lCodigoMoneda As Integer, _
                ByVal lEstado As String, _
                ByVal lEntidad As String, _
                ByVal lModalidad As String, _
                ByVal lUsuario As String, _
                ByVal lEstadoEnvio As String, _
                ByVal lCuenta As String, _
                ByVal lEsParaLiquidacion As Boolean, _
                ByVal usuario As String, _
                ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTranParam", New Object() {lTipoOperacion, lNumeroTran_desde, lNumeroTran_hasta, lFecha_desde, lFecha_hasta, lCodigoServicio, lCentroCosto, lCedula, lCodigoConcepto, lCodigoMoneda, lEstado, lEntidad, lModalidad, lUsuario, lEstadoEnvio, lCuenta, lEsParaLiquidacion, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTranParam( _
                    ByVal lTipoOperacion As String, _
                    ByVal lNumeroTran_desde As Integer, _
                    ByVal lNumeroTran_hasta As Integer, _
                    ByVal lFecha_desde As Date, _
                    ByVal lFecha_hasta As Date, _
                    ByVal lCodigoServicio As Integer, _
                    ByVal lCentroCosto As Integer, _
                    ByVal lCedula As String, _
                    ByVal lCodigoConcepto As Integer, _
                    ByVal lCodigoMoneda As Integer, _
                    ByVal lEstado As String, _
                    ByVal lEntidad As String, _
                    ByVal lModalidad As String, _
                    ByVal lUsuario As String, _
                    ByVal lEstadoEnvio As String, _
                    ByVal lCuenta As String, _
                    ByVal lEsParaLiquidacion As Boolean, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTranParam", New Object() {lTipoOperacion, lNumeroTran_desde, lNumeroTran_hasta, lFecha_desde, lFecha_hasta, lCodigoServicio, lCentroCosto, lCedula, lCodigoConcepto, lCodigoMoneda, lEstado, lEntidad, lModalidad, lUsuario, lEstadoEnvio, lCuenta, lEsParaLiquidacion, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTranParam(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTranParamAsync( _
                    ByVal lTipoOperacion As String, _
                    ByVal lNumeroTran_desde As Integer, _
                    ByVal lNumeroTran_hasta As Integer, _
                    ByVal lFecha_desde As Date, _
                    ByVal lFecha_hasta As Date, _
                    ByVal lCodigoServicio As Integer, _
                    ByVal lCentroCosto As Integer, _
                    ByVal lCedula As String, _
                    ByVal lCodigoConcepto As Integer, _
                    ByVal lCodigoMoneda As Integer, _
                    ByVal lEstado As String, _
                    ByVal lEntidad As String, _
                    ByVal lModalidad As String, _
                    ByVal lUsuario As String, _
                    ByVal lEstadoEnvio As String, _
                    ByVal lCuenta As String, _
                    ByVal lEsParaLiquidacion As Boolean, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.TraerListaTranParamAsync(lTipoOperacion, lNumeroTran_desde, lNumeroTran_hasta, lFecha_desde, lFecha_hasta, lCodigoServicio, lCentroCosto, lCedula, lCodigoConcepto, lCodigoMoneda, lEstado, lEntidad, lModalidad, lUsuario, lEstadoEnvio, lCuenta, lEsParaLiquidacion, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTranParamAsync( _
                    ByVal lTipoOperacion As String, _
                    ByVal lNumeroTran_desde As Integer, _
                    ByVal lNumeroTran_hasta As Integer, _
                    ByVal lFecha_desde As Date, _
                    ByVal lFecha_hasta As Date, _
                    ByVal lCodigoServicio As Integer, _
                    ByVal lCentroCosto As Integer, _
                    ByVal lCedula As String, _
                    ByVal lCodigoConcepto As Integer, _
                    ByVal lCodigoMoneda As Integer, _
                    ByVal lEstado As String, _
                    ByVal lEntidad As String, _
                    ByVal lModalidad As String, _
                    ByVal lUsuario As String, _
                    ByVal lEstadoEnvio As String, _
                    ByVal lCuenta As String, _
                    ByVal lEsParaLiquidacion As Boolean, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.TraerListaTranParamOperationCompleted Is Nothing) Then
                Me.TraerListaTranParamOperationCompleted = AddressOf Me.OnTraerListaTranParamOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTranParam", New Object() {lTipoOperacion, lNumeroTran_desde, lNumeroTran_hasta, lFecha_desde, lFecha_hasta, lCodigoServicio, lCentroCosto, lCedula, lCodigoConcepto, lCodigoMoneda, lEstado, lEntidad, lModalidad, lUsuario, lEstadoEnvio, lCuenta, lEsParaLiquidacion, usuario, IP}, Me.TraerListaTranParamOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTranParamOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTranParamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTranParamCompleted(Me, New TraerListaTranParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/EnviarAAprobacion", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub EnviarAAprobacion(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("EnviarAAprobacion", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginEnviarAAprobacion(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EnviarAAprobacion", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndEnviarAAprobacion(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub EnviarAAprobacionAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String)
            Me.EnviarAAprobacionAsync(v_TipoOperacion, v_NumeroTransaccion, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EnviarAAprobacionAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.EnviarAAprobacionOperationCompleted Is Nothing) Then
                Me.EnviarAAprobacionOperationCompleted = AddressOf Me.OnEnviarAAprobacionOperationCompleted
            End If
            Me.InvokeAsync("EnviarAAprobacion", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP}, Me.EnviarAAprobacionOperationCompleted, userState)
        End Sub

        Private Sub OnEnviarAAprobacionOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnviarAAprobacionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnviarAAprobacionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/IncluirEnEnvio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub IncluirEnEnvio(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("IncluirEnEnvio", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginIncluirEnEnvio(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IncluirEnEnvio", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndIncluirEnEnvio(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub IncluirEnEnvioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.IncluirEnEnvioAsync(v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub IncluirEnEnvioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.IncluirEnEnvioOperationCompleted Is Nothing) Then
                Me.IncluirEnEnvioOperationCompleted = AddressOf Me.OnIncluirEnEnvioOperationCompleted
            End If
            Me.InvokeAsync("IncluirEnEnvio", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP}, Me.IncluirEnEnvioOperationCompleted, userState)
        End Sub

        Private Sub OnIncluirEnEnvioOperationCompleted(ByVal arg As Object)
            If (Not (Me.IncluirEnEnvioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IncluirEnEnvioCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/IncluirEnEnvioTodoLoPendiente", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub IncluirEnEnvioTodoLoPendiente(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal v_CentroCosto As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("IncluirEnEnvioTodoLoPendiente", New Object() {v_TipoOperacion, v_NumeroEnvio, v_CentroCosto, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginIncluirEnEnvioTodoLoPendiente(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal v_CentroCosto As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IncluirEnEnvioTodoLoPendiente", New Object() {v_TipoOperacion, v_NumeroEnvio, v_CentroCosto, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndIncluirEnEnvioTodoLoPendiente(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub IncluirEnEnvioTodoLoPendienteAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal v_CentroCosto As Integer, ByVal usuario As String, ByVal IP As String)
            Me.IncluirEnEnvioTodoLoPendienteAsync(v_TipoOperacion, v_NumeroEnvio, v_CentroCosto, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub IncluirEnEnvioTodoLoPendienteAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal v_CentroCosto As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.IncluirEnEnvioTodoLoPendienteOperationCompleted Is Nothing) Then
                Me.IncluirEnEnvioTodoLoPendienteOperationCompleted = AddressOf Me.OnIncluirEnEnvioTodoLoPendienteOperationCompleted
            End If
            Me.InvokeAsync("IncluirEnEnvioTodoLoPendiente", New Object() {v_TipoOperacion, v_NumeroEnvio, v_CentroCosto, usuario, IP}, Me.IncluirEnEnvioTodoLoPendienteOperationCompleted, userState)
        End Sub

        Private Sub OnIncluirEnEnvioTodoLoPendienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.IncluirEnEnvioTodoLoPendienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IncluirEnEnvioTodoLoPendienteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExcluirDeEnvio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ExcluirDeEnvio(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("ExcluirDeEnvio", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginExcluirDeEnvio(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExcluirDeEnvio", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndExcluirDeEnvio(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluirDeEnvioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.ExcluirDeEnvioAsync(v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluirDeEnvioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ExcluirDeEnvioOperationCompleted Is Nothing) Then
                Me.ExcluirDeEnvioOperationCompleted = AddressOf Me.OnExcluirDeEnvioOperationCompleted
            End If
            Me.InvokeAsync("ExcluirDeEnvio", New Object() {v_TipoOperacion, v_NumeroTransaccion, v_NumeroEnvio, usuario, IP}, Me.ExcluirDeEnvioOperationCompleted, userState)
        End Sub

        Private Sub OnExcluirDeEnvioOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluirDeEnvioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluirDeEnvioCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExcluirDeEnvioTotal", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ExcluirDeEnvioTotal(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("ExcluirDeEnvioTotal", New Object() {v_TipoOperacion, v_NumeroEnvio, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginExcluirDeEnvioTotal(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExcluirDeEnvioTotal", New Object() {v_TipoOperacion, v_NumeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndExcluirDeEnvioTotal(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluirDeEnvioTotalAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.ExcluirDeEnvioTotalAsync(v_TipoOperacion, v_NumeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExcluirDeEnvioTotalAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ExcluirDeEnvioTotalOperationCompleted Is Nothing) Then
                Me.ExcluirDeEnvioTotalOperationCompleted = AddressOf Me.OnExcluirDeEnvioTotalOperationCompleted
            End If
            Me.InvokeAsync("ExcluirDeEnvioTotal", New Object() {v_TipoOperacion, v_NumeroEnvio, usuario, IP}, Me.ExcluirDeEnvioTotalOperationCompleted, userState)
        End Sub

        Private Sub OnExcluirDeEnvioTotalOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcluirDeEnvioTotalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcluirDeEnvioTotalCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ActualizaNumeroDocumentoInterno", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ActualizaNumeroDocumentoInterno(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("ActualizaNumeroDocumentoInterno", New Object() {tipoOperacion, numeroTransaccion, numeroDocumento, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginActualizaNumeroDocumentoInterno(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ActualizaNumeroDocumentoInterno", New Object() {tipoOperacion, numeroTransaccion, numeroDocumento, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndActualizaNumeroDocumentoInterno(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ActualizaNumeroDocumentoInternoAsync(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String)
            Me.ActualizaNumeroDocumentoInternoAsync(tipoOperacion, numeroTransaccion, numeroDocumento, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizaNumeroDocumentoInternoAsync(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal numeroDocumento As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ActualizaNumeroDocumentoInternoOperationCompleted Is Nothing) Then
                Me.ActualizaNumeroDocumentoInternoOperationCompleted = AddressOf Me.OnActualizaNumeroDocumentoInternoOperationCompleted
            End If
            Me.InvokeAsync("ActualizaNumeroDocumentoInterno", New Object() {tipoOperacion, numeroTransaccion, numeroDocumento, usuario, IP}, Me.ActualizaNumeroDocumentoInternoOperationCompleted, userState)
        End Sub

        Private Sub OnActualizaNumeroDocumentoInternoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizaNumeroDocumentoInternoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizaNumeroDocumentoInternoCompleted(Me, New ActualizaNumeroDocumentoInternoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ActualizaCodigoReferencia", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ActualizaCodigoReferencia(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CodigoReferencia As String, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("ActualizaCodigoReferencia", New Object() {NumeroTransaccion, TipoOperacion, CodigoReferencia, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginActualizaCodigoReferencia(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CodigoReferencia As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ActualizaCodigoReferencia", New Object() {NumeroTransaccion, TipoOperacion, CodigoReferencia, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndActualizaCodigoReferencia(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizaCodigoReferenciaAsync(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CodigoReferencia As String, ByVal usuario As String, ByVal IP As String)
            Me.ActualizaCodigoReferenciaAsync(NumeroTransaccion, TipoOperacion, CodigoReferencia, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizaCodigoReferenciaAsync(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CodigoReferencia As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ActualizaCodigoReferenciaOperationCompleted Is Nothing) Then
                Me.ActualizaCodigoReferenciaOperationCompleted = AddressOf Me.OnActualizaCodigoReferenciaOperationCompleted
            End If
            Me.InvokeAsync("ActualizaCodigoReferencia", New Object() {NumeroTransaccion, TipoOperacion, CodigoReferencia, usuario, IP}, Me.ActualizaCodigoReferenciaOperationCompleted, userState)
        End Sub

        Private Sub OnActualizaCodigoReferenciaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizaCodigoReferenciaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizaCodigoReferenciaCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ActualizaCamposParaTFT", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ActualizaCamposParaTFT(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CedulaOrigen As String, ByVal NombreOrigen As String, ByVal CuentaClienteOrigen As String, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("ActualizaCamposParaTFT", New Object() {NumeroTransaccion, TipoOperacion, CedulaOrigen, NombreOrigen, CuentaClienteOrigen, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginActualizaCamposParaTFT(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CedulaOrigen As String, ByVal NombreOrigen As String, ByVal CuentaClienteOrigen As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ActualizaCamposParaTFT", New Object() {NumeroTransaccion, TipoOperacion, CedulaOrigen, NombreOrigen, CuentaClienteOrigen, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndActualizaCamposParaTFT(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizaCamposParaTFTAsync(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CedulaOrigen As String, ByVal NombreOrigen As String, ByVal CuentaClienteOrigen As String, ByVal usuario As String, ByVal IP As String)
            Me.ActualizaCamposParaTFTAsync(NumeroTransaccion, TipoOperacion, CedulaOrigen, NombreOrigen, CuentaClienteOrigen, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizaCamposParaTFTAsync(ByVal NumeroTransaccion As Integer, ByVal TipoOperacion As String, ByVal CedulaOrigen As String, ByVal NombreOrigen As String, ByVal CuentaClienteOrigen As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ActualizaCamposParaTFTOperationCompleted Is Nothing) Then
                Me.ActualizaCamposParaTFTOperationCompleted = AddressOf Me.OnActualizaCamposParaTFTOperationCompleted
            End If
            Me.InvokeAsync("ActualizaCamposParaTFT", New Object() {NumeroTransaccion, TipoOperacion, CedulaOrigen, NombreOrigen, CuentaClienteOrigen, usuario, IP}, Me.ActualizaCamposParaTFTOperationCompleted, userState)
        End Sub

        Private Sub OnActualizaCamposParaTFTOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizaCamposParaTFTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizaCamposParaTFTCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ActualizarEstado", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ActualizarEstado(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estado As String, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("ActualizarEstado", New Object() {tipoOperacion, numeroTransaccion, estado, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginActualizarEstado(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estado As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ActualizarEstado", New Object() {tipoOperacion, numeroTransaccion, estado, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndActualizarEstado(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ActualizarEstadoAsync(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estado As String, ByVal usuario As String, ByVal IP As String)
            Me.ActualizarEstadoAsync(tipoOperacion, numeroTransaccion, estado, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizarEstadoAsync(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estado As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ActualizarEstadoOperationCompleted Is Nothing) Then
                Me.ActualizarEstadoOperationCompleted = AddressOf Me.OnActualizarEstadoOperationCompleted
            End If
            Me.InvokeAsync("ActualizarEstado", New Object() {tipoOperacion, numeroTransaccion, estado, usuario, IP}, Me.ActualizarEstadoOperationCompleted, userState)
        End Sub

        Private Sub OnActualizarEstadoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizarEstadoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizarEstadoCompleted(Me, New ActualizarEstadoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ActualizarEstados", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ActualizarEstados(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estadoTransaccion As String, ByVal estadoSINPE As String, ByVal estadoSiistemaInterno As String, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("ActualizarEstados", New Object() {tipoOperacion, numeroTransaccion, estadoTransaccion, estadoSINPE, estadoSiistemaInterno, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginActualizarEstados(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estadoTransaccion As String, ByVal estadoSINPE As String, ByVal estadoSiistemaInterno As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ActualizarEstados", New Object() {tipoOperacion, numeroTransaccion, estadoTransaccion, estadoSINPE, estadoSiistemaInterno, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndActualizarEstados(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ActualizarEstadosAsync(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estadoTransaccion As String, ByVal estadoSINPE As String, ByVal estadoSiistemaInterno As String, ByVal usuario As String, ByVal IP As String)
            Me.ActualizarEstadosAsync(tipoOperacion, numeroTransaccion, estadoTransaccion, estadoSINPE, estadoSiistemaInterno, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizarEstadosAsync(ByVal tipoOperacion As String, ByVal numeroTransaccion As Integer, ByVal estadoTransaccion As String, ByVal estadoSINPE As String, ByVal estadoSiistemaInterno As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ActualizarEstadosOperationCompleted Is Nothing) Then
                Me.ActualizarEstadosOperationCompleted = AddressOf Me.OnActualizarEstadosOperationCompleted
            End If
            Me.InvokeAsync("ActualizarEstados", New Object() {tipoOperacion, numeroTransaccion, estadoTransaccion, estadoSINPE, estadoSiistemaInterno, usuario, IP}, Me.ActualizarEstadosOperationCompleted, userState)
        End Sub

        Private Sub OnActualizarEstadosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizarEstadosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizarEstadosCompleted(Me, New ActualizarEstadosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ActualizarTransaccion", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ActualizarTransaccion(ByVal numeroTransaccion As Integer, ByVal codMotivo As Integer, ByVal estadoTran As String, ByVal usuario As String, ByVal IP As String, ByVal TipoOperacion As String)
            Me.Invoke("ActualizarTransaccion", New Object() {numeroTransaccion, codMotivo, estadoTran, usuario, IP, TipoOperacion})
        End Sub

        '''<remarks/>
        Public Function BeginActualizarTransaccion(ByVal numeroTransaccion As Integer, ByVal codMotivo As Integer, ByVal estadoTran As String, ByVal usuario As String, ByVal IP As String, ByVal TipoOperacion As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ActualizarTransaccion", New Object() {numeroTransaccion, codMotivo, estadoTran, usuario, IP, TipoOperacion}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndActualizarTransaccion(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizarTransaccionAsync(ByVal numeroTransaccion As Integer, ByVal codMotivo As Integer, ByVal estadoTran As String, ByVal usuario As String, ByVal IP As String, ByVal TipoOperacion As String)
            Me.ActualizarTransaccionAsync(numeroTransaccion, codMotivo, estadoTran, usuario, IP, TipoOperacion, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ActualizarTransaccionAsync(ByVal numeroTransaccion As Integer, ByVal codMotivo As Integer, ByVal estadoTran As String, ByVal usuario As String, ByVal IP As String, ByVal TipoOperacion As String, ByVal userState As Object)
            If (Me.ActualizarTransaccionOperationCompleted Is Nothing) Then
                Me.ActualizarTransaccionOperationCompleted = AddressOf Me.OnActualizarTransaccionOperationCompleted
            End If
            Me.InvokeAsync("ActualizarTransaccion", New Object() {numeroTransaccion, codMotivo, estadoTran, usuario, IP, TipoOperacion}, Me.ActualizarTransaccionOperationCompleted, userState)
        End Sub

        Private Sub OnActualizarTransaccionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActualizarTransaccionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActualizarTransaccionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTranPorEnvioParaProcesarTFT", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTranPorEnvioParaProcesarTFT(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTranPorEnvioParaProcesarTFT", New Object() {lTipoOperacion, lNumeroEnvio, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTranPorEnvioParaProcesarTFT(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTranPorEnvioParaProcesarTFT", New Object() {lTipoOperacion, lNumeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTranPorEnvioParaProcesarTFT(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTranPorEnvioParaProcesarTFTAsync(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTranPorEnvioParaProcesarTFTAsync(lTipoOperacion, lNumeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTranPorEnvioParaProcesarTFTAsync(ByVal lTipoOperacion As String, ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTranPorEnvioParaProcesarTFTOperationCompleted Is Nothing) Then
                Me.TraerListaTranPorEnvioParaProcesarTFTOperationCompleted = AddressOf Me.OnTraerListaTranPorEnvioParaProcesarTFTOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTranPorEnvioParaProcesarTFT", New Object() {lTipoOperacion, lNumeroEnvio, usuario, IP}, Me.TraerListaTranPorEnvioParaProcesarTFTOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTranPorEnvioParaProcesarTFTOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTranPorEnvioParaProcesarTFTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTranPorEnvioParaProcesarTFTCompleted(Me, New TraerListaTranPorEnvioParaProcesarTFTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AnularTransaccion", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function AnularTransaccion(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String) As Boolean
            Dim results() As Object = Me.Invoke("AnularTransaccion", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginAnularTransaccion(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AnularTransaccion", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndAnularTransaccion(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub AnularTransaccionAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String)
            Me.AnularTransaccionAsync(v_TipoOperacion, v_NumeroTransaccion, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AnularTransaccionAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.AnularTransaccionOperationCompleted Is Nothing) Then
                Me.AnularTransaccionOperationCompleted = AddressOf Me.OnAnularTransaccionOperationCompleted
            End If
            Me.InvokeAsync("AnularTransaccion", New Object() {v_TipoOperacion, v_NumeroTransaccion, usuario, IP}, Me.AnularTransaccionOperationCompleted, userState)
        End Sub

        Private Sub OnAnularTransaccionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AnularTransaccionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AnularTransaccionCompleted(Me, New AnularTransaccionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class clsListaCondiciones

        Private listaField() As clsCondicion

        '''<remarks/>
        Public Property Lista() As clsCondicion()
            Get
                Return Me.listaField
            End Get
            Set(ByVal value As clsCondicion())
                Me.listaField = value
            End Set
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class clsCondicion

        Private campoField As clsCampo

        Private operadorField As TOperadorLogico

        Private valorField As String

        '''<remarks/>
        Public Property Campo() As clsCampo
            Get
                Return Me.campoField
            End Get
            Set(ByVal value As clsCampo)
                Me.campoField = value
            End Set
        End Property

        '''<remarks/>
        Public Property Operador() As TOperadorLogico
            Get
                Return Me.operadorField
            End Get
            Set(ByVal value As TOperadorLogico)
                Me.operadorField = value
            End Set
        End Property

        '''<remarks/>
        Public Property Valor() As String
            Get
                Return Me.valorField
            End Get
            Set(ByVal value As String)
                Me.valorField = value
            End Set
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class clsCampo

        Private nombreField As String

        Private descripcionField As String

        Private nombreBDField As String

        Private tipoDatoField As TTipo

        Private largoPMostrarField As Integer

        Private llaveField As Boolean

        '''<remarks/>
        Public Property Nombre() As String
            Get
                Return Me.nombreField
            End Get
            Set(ByVal value As String)
                Me.nombreField = value
            End Set
        End Property

        '''<remarks/>
        Public Property Descripcion() As String
            Get
                Return Me.descripcionField
            End Get
            Set(ByVal value As String)
                Me.descripcionField = value
            End Set
        End Property

        '''<remarks/>
        Public Property NombreBD() As String
            Get
                Return Me.nombreBDField
            End Get
            Set(ByVal value As String)
                Me.nombreBDField = value
            End Set
        End Property

        '''<remarks/>
        Public Property TipoDato() As TTipo
            Get
                Return Me.tipoDatoField
            End Get
            Set(ByVal value As TTipo)
                Me.tipoDatoField = value
            End Set
        End Property

        '''<remarks/>
        Public Property LargoPMostrar() As Integer
            Get
                Return Me.largoPMostrarField
            End Get
            Set(ByVal value As Integer)
                Me.largoPMostrarField = value
            End Set
        End Property

        '''<remarks/>
        Public Property Llave() As Boolean
            Get
                Return Me.llaveField
            End Get
            Set(ByVal value As Boolean)
                Me.llaveField = value
            End Set
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Public Enum TTipo

        '''<remarks/>
        Entero

        '''<remarks/>
        Caracter

        '''<remarks/>
        Fecha
    End Enum

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Public Enum TOperadorLogico

        '''<remarks/>
        Igual

        '''<remarks/>
        MayorIgual

        '''<remarks/>
        MenorIgual

        '''<remarks/>
        Contiene

        '''<remarks/>
        Entre
    End Enum

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub EliminaPagosTemporalCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ObtieneDocumentosInternosPorLiquidarCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneDocumentosInternosPorLiquidarCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneDocumentosInternosPorLiquidarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneTransaccionesSinDocumentoInternoPorLiquidarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneMontoTotalTransaccionesPagadasPorNumeroDocumentoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Decimal)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ObtienePagosImportadosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtienePagosImportadosCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtienePagosImportadosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AgregarConOrdenPagoCompletedEventHandler(ByVal sender As Object, ByVal e As AgregarConOrdenPagoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class AgregarConOrdenPagoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property numero_transaccion() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property numero_orden() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(2), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AgregarBDCompletedEventHandler(ByVal sender As Object, ByVal e As AgregarBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class AgregarBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub BorrarBDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ModificarBDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerRegistroBDCompletedEventHandler(ByVal sender As Object, ByVal e As TraerRegistroBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerRegistroBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property v_CodigoServicio() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_NumeroOrden() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoCentro() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(2), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoConcepto() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(3), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CedulaPersona() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(4), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoMoneda() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(5), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CuentaCliente() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(6), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_Monto() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(7), Double)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_NumeroDocumento() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(8), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_DescripcionTran() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(9), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_NumeroServicio() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(10), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoReferencia() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(11), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoMotivoEnvio() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(12), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_NumeroEnvio() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(13), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_Importado() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(14), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_EstadoTran() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(15), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_UsuarioRegistra() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(16), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_FechaRegistro() As Date
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(17), Date)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_UsuarioAprueba() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(18), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_FechaAprobacion() As Date
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(19), Date)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodMotivoRechazo() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(20), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_IdVerificacion() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(21), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CedulaPersonaServ() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(22), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTotalBDCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTotalBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTotalBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTranCentroPropioCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTranCentroPropioCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTranCentroPropioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTranCentroPropioUserCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTranCentroPropioUserCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTranCentroPropioUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTranPorEnvioCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTranPorEnvioCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTranPorEnvioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTranPorEnvioCentroCostoCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTranPorEnvioCentroCostoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTranPorEnvioCentroCostoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTotalConciliarCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTotalConciliarCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTotalConciliarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTranParamCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTranParamCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTranParamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub EnviarAAprobacionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub IncluirEnEnvioCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub IncluirEnEnvioTodoLoPendienteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ExcluirDeEnvioCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ExcluirDeEnvioTotalCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ActualizaNumeroDocumentoInternoCompletedEventHandler(ByVal sender As Object, ByVal e As ActualizaNumeroDocumentoInternoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ActualizaNumeroDocumentoInternoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ActualizaCodigoReferenciaCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ActualizaCamposParaTFTCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ActualizarEstadoCompletedEventHandler(ByVal sender As Object, ByVal e As ActualizarEstadoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ActualizarEstadoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ActualizarEstadosCompletedEventHandler(ByVal sender As Object, ByVal e As ActualizarEstadosCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ActualizarEstadosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ActualizarTransaccionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTranPorEnvioParaProcesarTFTCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTranPorEnvioParaProcesarTFTCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTranPorEnvioParaProcesarTFTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AnularTransaccionCompletedEventHandler(ByVal sender As Object, ByVal e As AnularTransaccionCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class AnularTransaccionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class
End Namespace