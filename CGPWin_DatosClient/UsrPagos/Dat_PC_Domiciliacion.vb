'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.6407
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization
Imports System.Configuration

Namespace UsrPagos.Dat_PC_Domiciliacion
    '
    'This source code was auto-generated by wsdl, Version=2.0.50727.1432.
    '

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="Dat_PC_DomiciliacionSoap", [Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class Dat_PC_Domiciliacion
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private AgregarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private AgregaADASPOperationCompleted As System.Threading.SendOrPostCallback

        Private AgregaDomiciliacionConceptoOperationCompleted As System.Threading.SendOrPostCallback

        Private AgregarServicioOperationCompleted As System.Threading.SendOrPostCallback

        Private ExisteServicioDomiciliacionOperationCompleted As System.Threading.SendOrPostCallback

        Private EliminaDomiciliacionConceptoOperationCompleted As System.Threading.SendOrPostCallback

        Private EliminarServicioOperationCompleted As System.Threading.SendOrPostCallback

        Private CrearEnvioADAOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerDomiciliacionesPorEnvioOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerResumenDomicOperationCompleted As System.Threading.SendOrPostCallback

        Private BorrarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private ModificarBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaServiciosOperationCompleted As System.Threading.SendOrPostCallback

        Private AprobarOrdenOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerNombrePersonaServOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerRegistroBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerRegistroDomiciliacionConceptoOperationCompleted As System.Threading.SendOrPostCallback

        Private TraeCantidadDomicPendientesOperationCompleted As System.Threading.SendOrPostCallback

        Private TraeCantidadDomicPorCedulaOperationCompleted As System.Threading.SendOrPostCallback

        Private TraeCuentasDomicPorCedulaOperationCompleted As System.Threading.SendOrPostCallback

        Private TraeCuentasDomicPorCedula2OperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTotalBDOperationCompleted As System.Threading.SendOrPostCallback

        Private TraerListaTotalActivasPorPersonaOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New()
            Me.Url = ConfigurationManager.AppSettings(Constantes.ServidorDatos) + "UsrPagos/Dat_PC_Domiciliacion.asmx"

        End Sub

        '''<remarks/>
        Public Event AgregarBDCompleted As AgregarBDCompletedEventHandler

        '''<remarks/>
        Public Event AgregaADASPCompleted As AgregaADASPCompletedEventHandler

        '''<remarks/>
        Public Event AgregaDomiciliacionConceptoCompleted As AgregaDomiciliacionConceptoCompletedEventHandler

        '''<remarks/>
        Public Event AgregarServicioCompleted As AgregarServicioCompletedEventHandler

        '''<remarks/>
        Public Event ExisteServicioDomiciliacionCompleted As ExisteServicioDomiciliacionCompletedEventHandler

        '''<remarks/>
        Public Event EliminaDomiciliacionConceptoCompleted As EliminaDomiciliacionConceptoCompletedEventHandler

        '''<remarks/>
        Public Event EliminarServicioCompleted As EliminarServicioCompletedEventHandler

        '''<remarks/>
        Public Event CrearEnvioADACompleted As CrearEnvioADACompletedEventHandler

        '''<remarks/>
        Public Event TraerDomiciliacionesPorEnvioCompleted As TraerDomiciliacionesPorEnvioCompletedEventHandler

        '''<remarks/>
        Public Event TraerResumenDomicCompleted As TraerResumenDomicCompletedEventHandler

        '''<remarks/>
        Public Event BorrarBDCompleted As BorrarBDCompletedEventHandler

        '''<remarks/>
        Public Event ModificarBDCompleted As ModificarBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaServiciosCompleted As TraerListaServiciosCompletedEventHandler

        '''<remarks/>
        Public Event AprobarOrdenCompleted As AprobarOrdenCompletedEventHandler

        '''<remarks/>
        Public Event TraerNombrePersonaServCompleted As TraerNombrePersonaServCompletedEventHandler

        '''<remarks/>
        Public Event TraerRegistroBDCompleted As TraerRegistroBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerRegistroDomiciliacionConceptoCompleted As TraerRegistroDomiciliacionConceptoCompletedEventHandler

        '''<remarks/>
        Public Event TraeCantidadDomicPendientesCompleted As TraeCantidadDomicPendientesCompletedEventHandler

        '''<remarks/>
        Public Event TraeCantidadDomicPorCedulaCompleted As TraeCantidadDomicPorCedulaCompletedEventHandler

        '''<remarks/>
        Public Event TraeCuentasDomicPorCedulaCompleted As TraeCuentasDomicPorCedulaCompletedEventHandler

        '''<remarks/>
        Public Event TraeCuentasDomicPorCedula2Completed As TraeCuentasDomicPorCedula2CompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTotalBDCompleted As TraerListaTotalBDCompletedEventHandler

        '''<remarks/>
        Public Event TraerListaTotalActivasPorPersonaCompleted As TraerListaTotalActivasPorPersonaCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function AgregarBD( _
                ByVal v_TipoOperacion As String, _
                ByVal v_CedulaPersona As String, _
                ByVal v_NombrePersona As String, _
                ByVal v_EnPadron As String, _
                ByVal v_CodigoMoneda As Integer, _
                ByVal v_CuentaCliente As String, _
                ByVal v_MontoDesde As Double, _
                ByVal v_MontoHasta As Double, _
                ByVal v_FechaDesde As Date, _
                ByVal v_FechaHasta As Date, _
                ByVal v_CedulaPersonaServ As String, _
                ByVal v_NombrePersonaServ As String, _
                ByVal v_NumeroServicio As String, _
                ByVal v_EstadoOrden As String, _
                ByVal v_Constancia As String, _
                ByVal v_Modalidad As String, _
                ByVal v_CodigoEntidad As String, _
                ByVal v_NomNegocio As String, _
                ByVal v_NombreNegocio As String, _
                ByVal usuario As String, _
                ByVal IP As String) As Decimal
            Dim results() As Object = Me.Invoke("AgregarBD", New Object() {v_TipoOperacion, v_CedulaPersona, v_NombrePersona, v_EnPadron, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, v_NomNegocio, v_NombreNegocio, usuario, IP})
            Return CType(results(0), Decimal)
        End Function

        '''<remarks/>
        Public Function BeginAgregarBD( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_NombrePersona As String, _
                    ByVal v_EnPadron As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_Constancia As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal v_NomNegocio As String, _
                    ByVal v_NombreNegocio As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregarBD", New Object() {v_TipoOperacion, v_CedulaPersona, v_NombrePersona, v_EnPadron, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, v_NomNegocio, v_NombreNegocio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndAgregarBD(ByVal asyncResult As System.IAsyncResult) As Decimal
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Decimal)
        End Function

        '''<remarks/>
        Public Overloads Sub AgregarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_NombrePersona As String, _
                    ByVal v_EnPadron As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_Constancia As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal v_NomNegocio As String, _
                    ByVal v_NombreNegocio As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.AgregarBDAsync(v_TipoOperacion, v_CedulaPersona, v_NombrePersona, v_EnPadron, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, v_NomNegocio, v_NombreNegocio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_NombrePersona As String, _
                    ByVal v_EnPadron As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_Constancia As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal v_NomNegocio As String, _
                    ByVal v_NombreNegocio As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.AgregarBDOperationCompleted Is Nothing) Then
                Me.AgregarBDOperationCompleted = AddressOf Me.OnAgregarBDOperationCompleted
            End If
            Me.InvokeAsync("AgregarBD", New Object() {v_TipoOperacion, v_CedulaPersona, v_NombrePersona, v_EnPadron, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, v_NomNegocio, v_NombreNegocio, usuario, IP}, Me.AgregarBDOperationCompleted, userState)
        End Sub

        Private Sub OnAgregarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregarBDCompleted(Me, New AgregarBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregaADASP", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function AgregaADASP( _
                <System.Xml.Serialization.XmlElementAttribute(IsNullable:=True)> ByVal tipoOperacion As System.Nullable(Of Char), _
                <System.Xml.Serialization.XmlElementAttribute(IsNullable:=True)> ByRef numeroOrden As System.Nullable(Of Integer), _
                ByVal cedulaPersona As String, _
                <System.Xml.Serialization.XmlElementAttribute(IsNullable:=True)> ByVal codigoMoneda As System.Nullable(Of Integer), _
                ByVal CC As String, _
                <System.Xml.Serialization.XmlElementAttribute(IsNullable:=True)> ByVal montoDesde As System.Nullable(Of Decimal), _
                ByVal montoHasta As Decimal, _
                ByVal fechaDesde As Date, _
                ByVal fechaHasta As Date, _
                ByVal cedulaPersonaServ As String, _
                ByVal nombrePersonaServ As String, _
                ByVal numeroServicio As String, _
                ByVal usuarioRegistra As String, _
                ByVal nomNegocio As String, _
                ByVal descripcionGen As String, _
                ByVal CodEntidad As String, _
                ByVal cedulaClienteOrigen As String, _
                ByVal nomClienteOrigen As String, _
                ByVal usuario As String, _
                ByVal ip As String, _
                ByVal canal As Integer, _
                ByVal CCOrigen As String) As Integer
            Dim results() As Object = Me.Invoke("AgregaADASP", New Object() {tipoOperacion, numeroOrden, cedulaPersona, codigoMoneda, CC, montoDesde, montoHasta, fechaDesde, fechaHasta, cedulaPersonaServ, nombrePersonaServ, numeroServicio, usuarioRegistra, nomNegocio, descripcionGen, CodEntidad, cedulaClienteOrigen, nomClienteOrigen, usuario, ip, canal, CCOrigen})
            numeroOrden = CType(results(1), System.Nullable(Of Integer))
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Function BeginAgregaADASP( _
                    ByVal tipoOperacion As System.Nullable(Of Char), _
                    ByVal numeroOrden As System.Nullable(Of Integer), _
                    ByVal cedulaPersona As String, _
                    ByVal codigoMoneda As System.Nullable(Of Integer), _
                    ByVal CC As String, _
                    ByVal montoDesde As System.Nullable(Of Decimal), _
                    ByVal montoHasta As Decimal, _
                    ByVal fechaDesde As Date, _
                    ByVal fechaHasta As Date, _
                    ByVal cedulaPersonaServ As String, _
                    ByVal nombrePersonaServ As String, _
                    ByVal numeroServicio As String, _
                    ByVal usuarioRegistra As String, _
                    ByVal nomNegocio As String, _
                    ByVal descripcionGen As String, _
                    ByVal CodEntidad As String, _
                    ByVal cedulaClienteOrigen As String, _
                    ByVal nomClienteOrigen As String, _
                    ByVal usuario As String, _
                    ByVal ip As String, _
                    ByVal canal As Integer, _
                    ByVal CCOrigen As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregaADASP", New Object() {tipoOperacion, numeroOrden, cedulaPersona, codigoMoneda, CC, montoDesde, montoHasta, fechaDesde, fechaHasta, cedulaPersonaServ, nombrePersonaServ, numeroServicio, usuarioRegistra, nomNegocio, descripcionGen, CodEntidad, cedulaClienteOrigen, nomClienteOrigen, usuario, ip, canal, CCOrigen}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndAgregaADASP(ByVal asyncResult As System.IAsyncResult, ByRef numeroOrden As System.Nullable(Of Integer)) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            numeroOrden = CType(results(1), System.Nullable(Of Integer))
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub AgregaADASPAsync( _
                    ByVal tipoOperacion As System.Nullable(Of Char), _
                    ByVal numeroOrden As System.Nullable(Of Integer), _
                    ByVal cedulaPersona As String, _
                    ByVal codigoMoneda As System.Nullable(Of Integer), _
                    ByVal CC As String, _
                    ByVal montoDesde As System.Nullable(Of Decimal), _
                    ByVal montoHasta As Decimal, _
                    ByVal fechaDesde As Date, _
                    ByVal fechaHasta As Date, _
                    ByVal cedulaPersonaServ As String, _
                    ByVal nombrePersonaServ As String, _
                    ByVal numeroServicio As String, _
                    ByVal usuarioRegistra As String, _
                    ByVal nomNegocio As String, _
                    ByVal descripcionGen As String, _
                    ByVal CodEntidad As String, _
                    ByVal cedulaClienteOrigen As String, _
                    ByVal nomClienteOrigen As String, _
                    ByVal usuario As String, _
                    ByVal ip As String, _
                    ByVal canal As Integer, _
                    ByVal CCOrigen As String)
            Me.AgregaADASPAsync(tipoOperacion, numeroOrden, cedulaPersona, codigoMoneda, CC, montoDesde, montoHasta, fechaDesde, fechaHasta, cedulaPersonaServ, nombrePersonaServ, numeroServicio, usuarioRegistra, nomNegocio, descripcionGen, CodEntidad, cedulaClienteOrigen, nomClienteOrigen, usuario, ip, canal, CCOrigen, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregaADASPAsync( _
                    ByVal tipoOperacion As System.Nullable(Of Char), _
                    ByVal numeroOrden As System.Nullable(Of Integer), _
                    ByVal cedulaPersona As String, _
                    ByVal codigoMoneda As System.Nullable(Of Integer), _
                    ByVal CC As String, _
                    ByVal montoDesde As System.Nullable(Of Decimal), _
                    ByVal montoHasta As Decimal, _
                    ByVal fechaDesde As Date, _
                    ByVal fechaHasta As Date, _
                    ByVal cedulaPersonaServ As String, _
                    ByVal nombrePersonaServ As String, _
                    ByVal numeroServicio As String, _
                    ByVal usuarioRegistra As String, _
                    ByVal nomNegocio As String, _
                    ByVal descripcionGen As String, _
                    ByVal CodEntidad As String, _
                    ByVal cedulaClienteOrigen As String, _
                    ByVal nomClienteOrigen As String, _
                    ByVal usuario As String, _
                    ByVal ip As String, _
                    ByVal canal As Integer, _
                    ByVal CCOrigen As String, _
                    ByVal userState As Object)
            If (Me.AgregaADASPOperationCompleted Is Nothing) Then
                Me.AgregaADASPOperationCompleted = AddressOf Me.OnAgregaADASPOperationCompleted
            End If
            Me.InvokeAsync("AgregaADASP", New Object() {tipoOperacion, numeroOrden, cedulaPersona, codigoMoneda, CC, montoDesde, montoHasta, fechaDesde, fechaHasta, cedulaPersonaServ, nombrePersonaServ, numeroServicio, usuarioRegistra, nomNegocio, descripcionGen, CodEntidad, cedulaClienteOrigen, nomClienteOrigen, usuario, ip, canal, CCOrigen}, Me.AgregaADASPOperationCompleted, userState)
        End Sub

        Private Sub OnAgregaADASPOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregaADASPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregaADASPCompleted(Me, New AgregaADASPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregaDomiciliacionConcepto", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub AgregaDomiciliacionConcepto(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("AgregaDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginAgregaDomiciliacionConcepto(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregaDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndAgregaDomiciliacionConcepto(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregaDomiciliacionConceptoAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String)
            Me.AgregaDomiciliacionConceptoAsync(v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregaDomiciliacionConceptoAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.AgregaDomiciliacionConceptoOperationCompleted Is Nothing) Then
                Me.AgregaDomiciliacionConceptoOperationCompleted = AddressOf Me.OnAgregaDomiciliacionConceptoOperationCompleted
            End If
            Me.InvokeAsync("AgregaDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, Me.AgregaDomiciliacionConceptoOperationCompleted, userState)
        End Sub

        Private Sub OnAgregaDomiciliacionConceptoOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregaDomiciliacionConceptoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregaDomiciliacionConceptoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AgregarServicio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub AgregarServicio(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_NumeroServicio As String, ByVal v_Descripcion As String, ByVal v_TipoCobro As String, ByVal v_MontoFijoLocal As Decimal, ByVal v_MontoFijoFuncional As Decimal, ByVal v_DiaCobro As Integer, ByVal v_CodigoConcepto As Integer, ByVal v_MonedaServicio As Integer, ByVal v_MontoServicio As Decimal, ByVal v_TipoServicio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("AgregarServicio", New Object() {v_TipoOperacion, v_NumeroOrden, v_NumeroServicio, v_Descripcion, v_TipoCobro, v_MontoFijoLocal, v_MontoFijoFuncional, v_DiaCobro, v_CodigoConcepto, v_MonedaServicio, v_MontoServicio, v_TipoServicio, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginAgregarServicio( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_Descripcion As String, _
                    ByVal v_TipoCobro As String, _
                    ByVal v_MontoFijoLocal As Decimal, _
                    ByVal v_MontoFijoFuncional As Decimal, _
                    ByVal v_DiaCobro As Integer, _
                    ByVal v_CodigoConcepto As Integer, _
                    ByVal v_MonedaServicio As Integer, _
                    ByVal v_MontoServicio As Decimal, _
                    ByVal v_TipoServicio As Integer, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AgregarServicio", New Object() {v_TipoOperacion, v_NumeroOrden, v_NumeroServicio, v_Descripcion, v_TipoCobro, v_MontoFijoLocal, v_MontoFijoFuncional, v_DiaCobro, v_CodigoConcepto, v_MonedaServicio, v_MontoServicio, v_TipoServicio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndAgregarServicio(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregarServicioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_NumeroServicio As String, ByVal v_Descripcion As String, ByVal v_TipoCobro As String, ByVal v_MontoFijoLocal As Decimal, ByVal v_MontoFijoFuncional As Decimal, ByVal v_DiaCobro As Integer, ByVal v_CodigoConcepto As Integer, ByVal v_MonedaServicio As Integer, ByVal v_MontoServicio As Decimal, ByVal v_TipoServicio As Integer, ByVal usuario As String, ByVal IP As String)
            Me.AgregarServicioAsync(v_TipoOperacion, v_NumeroOrden, v_NumeroServicio, v_Descripcion, v_TipoCobro, v_MontoFijoLocal, v_MontoFijoFuncional, v_DiaCobro, v_CodigoConcepto, v_MonedaServicio, v_MontoServicio, v_TipoServicio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AgregarServicioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_NumeroServicio As String, ByVal v_Descripcion As String, ByVal v_TipoCobro As String, ByVal v_MontoFijoLocal As Decimal, ByVal v_MontoFijoFuncional As Decimal, ByVal v_DiaCobro As Integer, ByVal v_CodigoConcepto As Integer, ByVal v_MonedaServicio As Integer, ByVal v_MontoServicio As Decimal, ByVal v_TipoServicio As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.AgregarServicioOperationCompleted Is Nothing) Then
                Me.AgregarServicioOperationCompleted = AddressOf Me.OnAgregarServicioOperationCompleted
            End If
            Me.InvokeAsync("AgregarServicio", New Object() {v_TipoOperacion, v_NumeroOrden, v_NumeroServicio, v_Descripcion, v_TipoCobro, v_MontoFijoLocal, v_MontoFijoFuncional, v_DiaCobro, v_CodigoConcepto, v_MonedaServicio, v_MontoServicio, v_TipoServicio, usuario, IP}, Me.AgregarServicioOperationCompleted, userState)
        End Sub

        Private Sub OnAgregarServicioOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgregarServicioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgregarServicioCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExisteServicioDomiciliacion", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExisteServicioDomiciliacion(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String) As Integer
            Dim results() As Object = Me.Invoke("ExisteServicioDomiciliacion", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Function BeginExisteServicioDomiciliacion(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExisteServicioDomiciliacion", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndExisteServicioDomiciliacion(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub ExisteServicioDomiciliacionAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String)
            Me.ExisteServicioDomiciliacionAsync(v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExisteServicioDomiciliacionAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ExisteServicioDomiciliacionOperationCompleted Is Nothing) Then
                Me.ExisteServicioDomiciliacionOperationCompleted = AddressOf Me.OnExisteServicioDomiciliacionOperationCompleted
            End If
            Me.InvokeAsync("ExisteServicioDomiciliacion", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, Me.ExisteServicioDomiciliacionOperationCompleted, userState)
        End Sub

        Private Sub OnExisteServicioDomiciliacionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExisteServicioDomiciliacionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExisteServicioDomiciliacionCompleted(Me, New ExisteServicioDomiciliacionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/EliminaDomiciliacionConcepto", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub EliminaDomiciliacionConcepto(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("EliminaDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginEliminaDomiciliacionConcepto(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EliminaDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndEliminaDomiciliacionConcepto(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub EliminaDomiciliacionConceptoAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String)
            Me.EliminaDomiciliacionConceptoAsync(v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EliminaDomiciliacionConceptoAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.EliminaDomiciliacionConceptoOperationCompleted Is Nothing) Then
                Me.EliminaDomiciliacionConceptoOperationCompleted = AddressOf Me.OnEliminaDomiciliacionConceptoOperationCompleted
            End If
            Me.InvokeAsync("EliminaDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, Me.EliminaDomiciliacionConceptoOperationCompleted, userState)
        End Sub

        Private Sub OnEliminaDomiciliacionConceptoOperationCompleted(ByVal arg As Object)
            If (Not (Me.EliminaDomiciliacionConceptoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EliminaDomiciliacionConceptoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/EliminarServicio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub EliminarServicio(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("EliminarServicio", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginEliminarServicio(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EliminarServicio", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndEliminarServicio(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub EliminarServicioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String)
            Me.EliminarServicioAsync(v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub EliminarServicioAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal v_CodigoConcepto As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.EliminarServicioOperationCompleted Is Nothing) Then
                Me.EliminarServicioOperationCompleted = AddressOf Me.OnEliminarServicioOperationCompleted
            End If
            Me.InvokeAsync("EliminarServicio", New Object() {v_TipoOperacion, v_NumeroOrden, v_CodigoConcepto, usuario, IP}, Me.EliminarServicioOperationCompleted, userState)
        End Sub

        Private Sub OnEliminarServicioOperationCompleted(ByVal arg As Object)
            If (Not (Me.EliminarServicioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EliminarServicioCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/CrearEnvioADA", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CrearEnvioADA(ByVal pFechaCiclo As Date, ByRef rNumero As Long, ByRef rConsecutivo As Integer, ByVal usuario As String, ByVal IP As String) As Long
            Dim results() As Object = Me.Invoke("CrearEnvioADA", New Object() {pFechaCiclo, rNumero, rConsecutivo, usuario, IP})
            rNumero = CType(results(1), Long)
            rConsecutivo = CType(results(2), Integer)
            Return CType(results(0), Long)
        End Function

        '''<remarks/>
        Public Function BeginCrearEnvioADA(ByVal pFechaCiclo As Date, ByVal rNumero As Long, ByVal rConsecutivo As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CrearEnvioADA", New Object() {pFechaCiclo, rNumero, rConsecutivo, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCrearEnvioADA(ByVal asyncResult As System.IAsyncResult, ByRef rNumero As Long, ByRef rConsecutivo As Integer) As Long
            Dim results() As Object = Me.EndInvoke(asyncResult)
            rNumero = CType(results(1), Long)
            rConsecutivo = CType(results(2), Integer)
            Return CType(results(0), Long)
        End Function

        '''<remarks/>
        Public Overloads Sub CrearEnvioADAAsync(ByVal pFechaCiclo As Date, ByVal rNumero As Long, ByVal rConsecutivo As Integer, ByVal usuario As String, ByVal IP As String)
            Me.CrearEnvioADAAsync(pFechaCiclo, rNumero, rConsecutivo, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CrearEnvioADAAsync(ByVal pFechaCiclo As Date, ByVal rNumero As Long, ByVal rConsecutivo As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.CrearEnvioADAOperationCompleted Is Nothing) Then
                Me.CrearEnvioADAOperationCompleted = AddressOf Me.OnCrearEnvioADAOperationCompleted
            End If
            Me.InvokeAsync("CrearEnvioADA", New Object() {pFechaCiclo, rNumero, rConsecutivo, usuario, IP}, Me.CrearEnvioADAOperationCompleted, userState)
        End Sub

        Private Sub OnCrearEnvioADAOperationCompleted(ByVal arg As Object)
            If (Not (Me.CrearEnvioADACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CrearEnvioADACompleted(Me, New CrearEnvioADACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerDomiciliacionesPorEnvio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerDomiciliacionesPorEnvio(ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerDomiciliacionesPorEnvio", New Object() {lNumeroEnvio, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerDomiciliacionesPorEnvio(ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerDomiciliacionesPorEnvio", New Object() {lNumeroEnvio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerDomiciliacionesPorEnvio(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerDomiciliacionesPorEnvioAsync(ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String)
            Me.TraerDomiciliacionesPorEnvioAsync(lNumeroEnvio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerDomiciliacionesPorEnvioAsync(ByVal lNumeroEnvio As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerDomiciliacionesPorEnvioOperationCompleted Is Nothing) Then
                Me.TraerDomiciliacionesPorEnvioOperationCompleted = AddressOf Me.OnTraerDomiciliacionesPorEnvioOperationCompleted
            End If
            Me.InvokeAsync("TraerDomiciliacionesPorEnvio", New Object() {lNumeroEnvio, usuario, IP}, Me.TraerDomiciliacionesPorEnvioOperationCompleted, userState)
        End Sub

        Private Sub OnTraerDomiciliacionesPorEnvioOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerDomiciliacionesPorEnvioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerDomiciliacionesPorEnvioCompleted(Me, New TraerDomiciliacionesPorEnvioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerResumenDomic", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerResumenDomic(ByVal lFechaDesde As Date, ByVal lFechaHasta As Date, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerResumenDomic", New Object() {lFechaDesde, lFechaHasta, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerResumenDomic(ByVal lFechaDesde As Date, ByVal lFechaHasta As Date, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerResumenDomic", New Object() {lFechaDesde, lFechaHasta, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerResumenDomic(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerResumenDomicAsync(ByVal lFechaDesde As Date, ByVal lFechaHasta As Date, ByVal usuario As String, ByVal IP As String)
            Me.TraerResumenDomicAsync(lFechaDesde, lFechaHasta, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerResumenDomicAsync(ByVal lFechaDesde As Date, ByVal lFechaHasta As Date, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerResumenDomicOperationCompleted Is Nothing) Then
                Me.TraerResumenDomicOperationCompleted = AddressOf Me.OnTraerResumenDomicOperationCompleted
            End If
            Me.InvokeAsync("TraerResumenDomic", New Object() {lFechaDesde, lFechaHasta, usuario, IP}, Me.TraerResumenDomicOperationCompleted, userState)
        End Sub

        Private Sub OnTraerResumenDomicOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerResumenDomicCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerResumenDomicCompleted(Me, New TraerResumenDomicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/BorrarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub BorrarBD(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("BorrarBD", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginBorrarBD(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("BorrarBD", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndBorrarBD(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub BorrarBDAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String)
            Me.BorrarBDAsync(v_TipoOperacion, v_NumeroOrden, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub BorrarBDAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.BorrarBDOperationCompleted Is Nothing) Then
                Me.BorrarBDOperationCompleted = AddressOf Me.OnBorrarBDOperationCompleted
            End If
            Me.InvokeAsync("BorrarBD", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, Me.BorrarBDOperationCompleted, userState)
        End Sub

        Private Sub OnBorrarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.BorrarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BorrarBDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ModificarBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ModificarBD( _
                ByVal v_TipoOperacion As String, _
                ByVal v_NumeroOrden As Integer, _
                ByVal v_CedulaPersona As String, _
                ByVal v_CodigoMoneda As Integer, _
                ByVal v_CuentaCliente As String, _
                ByVal v_MontoDesde As Double, _
                ByVal v_MontoHasta As Double, _
                ByVal v_FechaDesde As Date, _
                ByVal v_FechaHasta As Date, _
                ByVal v_CedulaPersonaServ As String, _
                ByVal v_NombrePersonaServ As String, _
                ByVal v_NumeroServicio As String, _
                ByVal v_EstadoOrden As String, _
                ByVal v_Constancia As String, _
                ByVal v_Modalidad As String, _
                ByVal v_CodigoEntidad As String, _
                ByVal usuario As String, _
                ByVal IP As String)
            Me.Invoke("ModificarBD", New Object() {v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginModificarBD( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_Constancia As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ModificarBD", New Object() {v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndModificarBD(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub ModificarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_Constancia As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.ModificarBDAsync(v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ModificarBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_Constancia As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.ModificarBDOperationCompleted Is Nothing) Then
                Me.ModificarBDOperationCompleted = AddressOf Me.OnModificarBDOperationCompleted
            End If
            Me.InvokeAsync("ModificarBD", New Object() {v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_Constancia, v_Modalidad, v_CodigoEntidad, usuario, IP}, Me.ModificarBDOperationCompleted, userState)
        End Sub

        Private Sub OnModificarBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModificarBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModificarBDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaServicios", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaServicios(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaServicios", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaServicios(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaServicios", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaServicios(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaServiciosAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaServiciosAsync(v_TipoOperacion, v_NumeroOrden, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaServiciosAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaServiciosOperationCompleted Is Nothing) Then
                Me.TraerListaServiciosOperationCompleted = AddressOf Me.OnTraerListaServiciosOperationCompleted
            End If
            Me.InvokeAsync("TraerListaServicios", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, Me.TraerListaServiciosOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaServiciosOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaServiciosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaServiciosCompleted(Me, New TraerListaServiciosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/AprobarOrden", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub AprobarOrden(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String)
            Me.Invoke("AprobarOrden", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP})
        End Sub

        '''<remarks/>
        Public Function BeginAprobarOrden(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AprobarOrden", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndAprobarOrden(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub

        '''<remarks/>
        Public Overloads Sub AprobarOrdenAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String)
            Me.AprobarOrdenAsync(v_TipoOperacion, v_NumeroOrden, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AprobarOrdenAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.AprobarOrdenOperationCompleted Is Nothing) Then
                Me.AprobarOrdenOperationCompleted = AddressOf Me.OnAprobarOrdenOperationCompleted
            End If
            Me.InvokeAsync("AprobarOrden", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, Me.AprobarOrdenOperationCompleted, userState)
        End Sub

        Private Sub OnAprobarOrdenOperationCompleted(ByVal arg As Object)
            If (Not (Me.AprobarOrdenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AprobarOrdenCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerNombrePersonaServ", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub TraerNombrePersonaServ(ByVal v_CedulaPersonaServ As String, ByRef v_NombrePersonaServ As String, ByVal usuario As String, ByVal IP As String)
            Dim results() As Object = Me.Invoke("TraerNombrePersonaServ", New Object() {v_CedulaPersonaServ, v_NombrePersonaServ, usuario, IP})
            v_NombrePersonaServ = CType(results(0), String)
        End Sub

        '''<remarks/>
        Public Function BeginTraerNombrePersonaServ(ByVal v_CedulaPersonaServ As String, ByVal v_NombrePersonaServ As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerNombrePersonaServ", New Object() {v_CedulaPersonaServ, v_NombrePersonaServ, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndTraerNombrePersonaServ(ByVal asyncResult As System.IAsyncResult, ByRef v_NombrePersonaServ As String)
            Dim results() As Object = Me.EndInvoke(asyncResult)
            v_NombrePersonaServ = CType(results(0), String)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerNombrePersonaServAsync(ByVal v_CedulaPersonaServ As String, ByVal v_NombrePersonaServ As String, ByVal usuario As String, ByVal IP As String)
            Me.TraerNombrePersonaServAsync(v_CedulaPersonaServ, v_NombrePersonaServ, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerNombrePersonaServAsync(ByVal v_CedulaPersonaServ As String, ByVal v_NombrePersonaServ As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerNombrePersonaServOperationCompleted Is Nothing) Then
                Me.TraerNombrePersonaServOperationCompleted = AddressOf Me.OnTraerNombrePersonaServOperationCompleted
            End If
            Me.InvokeAsync("TraerNombrePersonaServ", New Object() {v_CedulaPersonaServ, v_NombrePersonaServ, usuario, IP}, Me.TraerNombrePersonaServOperationCompleted, userState)
        End Sub

        Private Sub OnTraerNombrePersonaServOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerNombrePersonaServCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerNombrePersonaServCompleted(Me, New TraerNombrePersonaServCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerRegistroBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub TraerRegistroBD( _
                ByVal v_TipoOperacion As String, _
                ByVal v_NumeroOrden As Integer, _
                ByRef v_CedulaPersona As String, _
                ByRef v_CodigoMoneda As Integer, _
                ByRef v_CuentaCliente As String, _
                ByRef v_MontoDesde As Double, _
                ByRef v_MontoHasta As Double, _
                ByRef v_FechaDesde As Date, _
                ByRef v_FechaHasta As Date, _
                ByRef v_CedulaPersonaServ As String, _
                ByRef v_NombrePersonaServ As String, _
                ByRef v_NumeroServicio As String, _
                ByRef v_EstadoOrden As String, _
                ByRef v_UsuarioRegistra As String, _
                ByRef v_FechaRegistro As Date, _
                ByRef v_UsuarioAprueba As String, _
                ByRef v_FechaAprobacion As Date, _
                ByRef v_Constancia As String, _
                ByRef v_CodigoMotivo As String, _
                ByRef v_Modalidad As String, _
                ByRef v_CodigoEntidad As String, _
                ByVal usuario As String, _
                ByVal IP As String)
            Dim results() As Object = Me.Invoke("TraerRegistroBD", New Object() {v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_Constancia, v_CodigoMotivo, v_Modalidad, v_CodigoEntidad, usuario, IP})
            v_CedulaPersona = CType(results(0), String)
            v_CodigoMoneda = CType(results(1), Integer)
            v_CuentaCliente = CType(results(2), String)
            v_MontoDesde = CType(results(3), Double)
            v_MontoHasta = CType(results(4), Double)
            v_FechaDesde = CType(results(5), Date)
            v_FechaHasta = CType(results(6), Date)
            v_CedulaPersonaServ = CType(results(7), String)
            v_NombrePersonaServ = CType(results(8), String)
            v_NumeroServicio = CType(results(9), String)
            v_EstadoOrden = CType(results(10), String)
            v_UsuarioRegistra = CType(results(11), String)
            v_FechaRegistro = CType(results(12), Date)
            v_UsuarioAprueba = CType(results(13), String)
            v_FechaAprobacion = CType(results(14), Date)
            v_Constancia = CType(results(15), String)
            v_CodigoMotivo = CType(results(16), String)
            v_Modalidad = CType(results(17), String)
            v_CodigoEntidad = CType(results(18), String)
        End Sub

        '''<remarks/>
        Public Function BeginTraerRegistroBD( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_UsuarioRegistra As String, _
                    ByVal v_FechaRegistro As Date, _
                    ByVal v_UsuarioAprueba As String, _
                    ByVal v_FechaAprobacion As Date, _
                    ByVal v_Constancia As String, _
                    ByVal v_CodigoMotivo As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal callback As System.AsyncCallback, _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerRegistroBD", New Object() {v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_Constancia, v_CodigoMotivo, v_Modalidad, v_CodigoEntidad, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndTraerRegistroBD( _
                    ByVal asyncResult As System.IAsyncResult, _
                    ByRef v_CedulaPersona As String, _
                    ByRef v_CodigoMoneda As Integer, _
                    ByRef v_CuentaCliente As String, _
                    ByRef v_MontoDesde As Double, _
                    ByRef v_MontoHasta As Double, _
                    ByRef v_FechaDesde As Date, _
                    ByRef v_FechaHasta As Date, _
                    ByRef v_CedulaPersonaServ As String, _
                    ByRef v_NombrePersonaServ As String, _
                    ByRef v_NumeroServicio As String, _
                    ByRef v_EstadoOrden As String, _
                    ByRef v_UsuarioRegistra As String, _
                    ByRef v_FechaRegistro As Date, _
                    ByRef v_UsuarioAprueba As String, _
                    ByRef v_FechaAprobacion As Date, _
                    ByRef v_Constancia As String, _
                    ByRef v_CodigoMotivo As String, _
                    ByRef v_Modalidad As String, _
                    ByRef v_CodigoEntidad As String)
            Dim results() As Object = Me.EndInvoke(asyncResult)
            v_CedulaPersona = CType(results(0), String)
            v_CodigoMoneda = CType(results(1), Integer)
            v_CuentaCliente = CType(results(2), String)
            v_MontoDesde = CType(results(3), Double)
            v_MontoHasta = CType(results(4), Double)
            v_FechaDesde = CType(results(5), Date)
            v_FechaHasta = CType(results(6), Date)
            v_CedulaPersonaServ = CType(results(7), String)
            v_NombrePersonaServ = CType(results(8), String)
            v_NumeroServicio = CType(results(9), String)
            v_EstadoOrden = CType(results(10), String)
            v_UsuarioRegistra = CType(results(11), String)
            v_FechaRegistro = CType(results(12), Date)
            v_UsuarioAprueba = CType(results(13), String)
            v_FechaAprobacion = CType(results(14), Date)
            v_Constancia = CType(results(15), String)
            v_CodigoMotivo = CType(results(16), String)
            v_Modalidad = CType(results(17), String)
            v_CodigoEntidad = CType(results(18), String)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_UsuarioRegistra As String, _
                    ByVal v_FechaRegistro As Date, _
                    ByVal v_UsuarioAprueba As String, _
                    ByVal v_FechaAprobacion As Date, _
                    ByVal v_Constancia As String, _
                    ByVal v_CodigoMotivo As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String)
            Me.TraerRegistroBDAsync(v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_Constancia, v_CodigoMotivo, v_Modalidad, v_CodigoEntidad, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroBDAsync( _
                    ByVal v_TipoOperacion As String, _
                    ByVal v_NumeroOrden As Integer, _
                    ByVal v_CedulaPersona As String, _
                    ByVal v_CodigoMoneda As Integer, _
                    ByVal v_CuentaCliente As String, _
                    ByVal v_MontoDesde As Double, _
                    ByVal v_MontoHasta As Double, _
                    ByVal v_FechaDesde As Date, _
                    ByVal v_FechaHasta As Date, _
                    ByVal v_CedulaPersonaServ As String, _
                    ByVal v_NombrePersonaServ As String, _
                    ByVal v_NumeroServicio As String, _
                    ByVal v_EstadoOrden As String, _
                    ByVal v_UsuarioRegistra As String, _
                    ByVal v_FechaRegistro As Date, _
                    ByVal v_UsuarioAprueba As String, _
                    ByVal v_FechaAprobacion As Date, _
                    ByVal v_Constancia As String, _
                    ByVal v_CodigoMotivo As String, _
                    ByVal v_Modalidad As String, _
                    ByVal v_CodigoEntidad As String, _
                    ByVal usuario As String, _
                    ByVal IP As String, _
                    ByVal userState As Object)
            If (Me.TraerRegistroBDOperationCompleted Is Nothing) Then
                Me.TraerRegistroBDOperationCompleted = AddressOf Me.OnTraerRegistroBDOperationCompleted
            End If
            Me.InvokeAsync("TraerRegistroBD", New Object() {v_TipoOperacion, v_NumeroOrden, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_MontoDesde, v_MontoHasta, v_FechaDesde, v_FechaHasta, v_CedulaPersonaServ, v_NombrePersonaServ, v_NumeroServicio, v_EstadoOrden, v_UsuarioRegistra, v_FechaRegistro, v_UsuarioAprueba, v_FechaAprobacion, v_Constancia, v_CodigoMotivo, v_Modalidad, v_CodigoEntidad, usuario, IP}, Me.TraerRegistroBDOperationCompleted, userState)
        End Sub

        Private Sub OnTraerRegistroBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerRegistroBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerRegistroBDCompleted(Me, New TraerRegistroBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerRegistroDomiciliacionConcepto", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerRegistroDomiciliacionConcepto(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerRegistroDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerRegistroDomiciliacionConcepto(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerRegistroDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerRegistroDomiciliacionConcepto(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerRegistroDomiciliacionConceptoAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraerRegistroDomiciliacionConceptoAsync(v_TipoOperacion, v_NumeroOrden, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerRegistroDomiciliacionConceptoAsync(ByVal v_TipoOperacion As String, ByVal v_NumeroOrden As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerRegistroDomiciliacionConceptoOperationCompleted Is Nothing) Then
                Me.TraerRegistroDomiciliacionConceptoOperationCompleted = AddressOf Me.OnTraerRegistroDomiciliacionConceptoOperationCompleted
            End If
            Me.InvokeAsync("TraerRegistroDomiciliacionConcepto", New Object() {v_TipoOperacion, v_NumeroOrden, usuario, IP}, Me.TraerRegistroDomiciliacionConceptoOperationCompleted, userState)
        End Sub

        Private Sub OnTraerRegistroDomiciliacionConceptoOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerRegistroDomiciliacionConceptoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerRegistroDomiciliacionConceptoCompleted(Me, New TraerRegistroDomiciliacionConceptoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraeCantidadDomicPendientes", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraeCantidadDomicPendientes(ByVal v_TipoOperacion As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraeCantidadDomicPendientes", New Object() {v_TipoOperacion, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraeCantidadDomicPendientes(ByVal v_TipoOperacion As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraeCantidadDomicPendientes", New Object() {v_TipoOperacion, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraeCantidadDomicPendientes(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraeCantidadDomicPendientesAsync(ByVal v_TipoOperacion As String, ByVal usuario As String, ByVal IP As String)
            Me.TraeCantidadDomicPendientesAsync(v_TipoOperacion, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraeCantidadDomicPendientesAsync(ByVal v_TipoOperacion As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraeCantidadDomicPendientesOperationCompleted Is Nothing) Then
                Me.TraeCantidadDomicPendientesOperationCompleted = AddressOf Me.OnTraeCantidadDomicPendientesOperationCompleted
            End If
            Me.InvokeAsync("TraeCantidadDomicPendientes", New Object() {v_TipoOperacion, usuario, IP}, Me.TraeCantidadDomicPendientesOperationCompleted, userState)
        End Sub

        Private Sub OnTraeCantidadDomicPendientesOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraeCantidadDomicPendientesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraeCantidadDomicPendientesCompleted(Me, New TraeCantidadDomicPendientesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraeCantidadDomicPorCedula", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraeCantidadDomicPorCedula(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal usuario As String, ByVal IP As String) As Integer
            Dim results() As Object = Me.Invoke("TraeCantidadDomicPorCedula", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, usuario, IP})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Function BeginTraeCantidadDomicPorCedula(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraeCantidadDomicPorCedula", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraeCantidadDomicPorCedula(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub TraeCantidadDomicPorCedulaAsync(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraeCantidadDomicPorCedulaAsync(v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraeCantidadDomicPorCedulaAsync(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraeCantidadDomicPorCedulaOperationCompleted Is Nothing) Then
                Me.TraeCantidadDomicPorCedulaOperationCompleted = AddressOf Me.OnTraeCantidadDomicPorCedulaOperationCompleted
            End If
            Me.InvokeAsync("TraeCantidadDomicPorCedula", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, usuario, IP}, Me.TraeCantidadDomicPorCedulaOperationCompleted, userState)
        End Sub

        Private Sub OnTraeCantidadDomicPorCedulaOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraeCantidadDomicPorCedulaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraeCantidadDomicPorCedulaCompleted(Me, New TraeCantidadDomicPorCedulaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraeCuentasDomicPorCedula", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraeCuentasDomicPorCedula(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraeCuentasDomicPorCedula", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraeCuentasDomicPorCedula(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraeCuentasDomicPorCedula", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraeCuentasDomicPorCedula(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraeCuentasDomicPorCedulaAsync(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal usuario As String, ByVal IP As String)
            Me.TraeCuentasDomicPorCedulaAsync(v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraeCuentasDomicPorCedulaAsync(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoConcepto As Integer, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraeCuentasDomicPorCedulaOperationCompleted Is Nothing) Then
                Me.TraeCuentasDomicPorCedulaOperationCompleted = AddressOf Me.OnTraeCuentasDomicPorCedulaOperationCompleted
            End If
            Me.InvokeAsync("TraeCuentasDomicPorCedula", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoConcepto, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, usuario, IP}, Me.TraeCuentasDomicPorCedulaOperationCompleted, userState)
        End Sub

        Private Sub OnTraeCuentasDomicPorCedulaOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraeCuentasDomicPorCedulaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraeCuentasDomicPorCedulaCompleted(Me, New TraeCuentasDomicPorCedulaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraeCuentasDomicPorCedula2", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraeCuentasDomicPorCedula2(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal v_NomNegocio As String, ByVal v_NumServicio As String, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraeCuentasDomicPorCedula2", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, v_NomNegocio, v_NumServicio, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraeCuentasDomicPorCedula2(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal v_NomNegocio As String, ByVal v_NumServicio As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraeCuentasDomicPorCedula2", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, v_NomNegocio, v_NumServicio, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraeCuentasDomicPorCedula2(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraeCuentasDomicPorCedula2Async(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal v_NomNegocio As String, ByVal v_NumServicio As String, ByVal usuario As String, ByVal IP As String)
            Me.TraeCuentasDomicPorCedula2Async(v_TipoOperacion, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, v_NomNegocio, v_NumServicio, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraeCuentasDomicPorCedula2Async(ByVal v_TipoOperacion As String, ByVal v_CedulaPersona As String, ByVal v_CodigoMoneda As Integer, ByVal v_CuentaCliente As String, ByVal v_CedulaPersonaServ As String, ByVal v_NomNegocio As String, ByVal v_NumServicio As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraeCuentasDomicPorCedula2OperationCompleted Is Nothing) Then
                Me.TraeCuentasDomicPorCedula2OperationCompleted = AddressOf Me.OnTraeCuentasDomicPorCedula2OperationCompleted
            End If
            Me.InvokeAsync("TraeCuentasDomicPorCedula2", New Object() {v_TipoOperacion, v_CedulaPersona, v_CodigoMoneda, v_CuentaCliente, v_CedulaPersonaServ, v_NomNegocio, v_NumServicio, usuario, IP}, Me.TraeCuentasDomicPorCedula2OperationCompleted, userState)
        End Sub

        Private Sub OnTraeCuentasDomicPorCedula2OperationCompleted(ByVal arg As Object)
            If (Not (Me.TraeCuentasDomicPorCedula2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraeCuentasDomicPorCedula2Completed(Me, New TraeCuentasDomicPorCedula2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTotalBD", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTotalBD(ByVal v_TipoOperacion As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal CentroCosto As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTotalBD", New Object() {v_TipoOperacion, ListaCondiciones, MaxRegistros, CentroCosto, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTotalBD(ByVal v_TipoOperacion As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal CentroCosto As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTotalBD", New Object() {v_TipoOperacion, ListaCondiciones, MaxRegistros, CentroCosto, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTotalBD(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTotalBDAsync(ByVal v_TipoOperacion As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal CentroCosto As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTotalBDAsync(v_TipoOperacion, ListaCondiciones, MaxRegistros, CentroCosto, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTotalBDAsync(ByVal v_TipoOperacion As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal CentroCosto As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTotalBDOperationCompleted Is Nothing) Then
                Me.TraerListaTotalBDOperationCompleted = AddressOf Me.OnTraerListaTotalBDOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTotalBD", New Object() {v_TipoOperacion, ListaCondiciones, MaxRegistros, CentroCosto, usuario, IP}, Me.TraerListaTotalBDOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTotalBDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTotalBDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTotalBDCompleted(Me, New TraerListaTotalBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/TraerListaTotalActivasPorPersona", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TraerListaTotalActivasPorPersona(ByVal v_TipoOperacion As String, ByVal CedulaPersona As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TraerListaTotalActivasPorPersona", New Object() {v_TipoOperacion, CedulaPersona, ListaCondiciones, MaxRegistros, usuario, IP})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginTraerListaTotalActivasPorPersona(ByVal v_TipoOperacion As String, ByVal CedulaPersona As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TraerListaTotalActivasPorPersona", New Object() {v_TipoOperacion, CedulaPersona, ListaCondiciones, MaxRegistros, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTraerListaTotalActivasPorPersona(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub TraerListaTotalActivasPorPersonaAsync(ByVal v_TipoOperacion As String, ByVal CedulaPersona As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String)
            Me.TraerListaTotalActivasPorPersonaAsync(v_TipoOperacion, CedulaPersona, ListaCondiciones, MaxRegistros, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TraerListaTotalActivasPorPersonaAsync(ByVal v_TipoOperacion As String, ByVal CedulaPersona As String, ByVal ListaCondiciones As clsListaCondiciones, ByVal MaxRegistros As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.TraerListaTotalActivasPorPersonaOperationCompleted Is Nothing) Then
                Me.TraerListaTotalActivasPorPersonaOperationCompleted = AddressOf Me.OnTraerListaTotalActivasPorPersonaOperationCompleted
            End If
            Me.InvokeAsync("TraerListaTotalActivasPorPersona", New Object() {v_TipoOperacion, CedulaPersona, ListaCondiciones, MaxRegistros, usuario, IP}, Me.TraerListaTotalActivasPorPersonaOperationCompleted, userState)
        End Sub

        Private Sub OnTraerListaTotalActivasPorPersonaOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraerListaTotalActivasPorPersonaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraerListaTotalActivasPorPersonaCompleted(Me, New TraerListaTotalActivasPorPersonaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class

    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class clsListaCondiciones

        Private listaField() As clsCondicion

        '''<comentarios/>
        Public Property Lista() As clsCondicion()
            Get
                Return Me.listaField
            End Get
            Set(ByVal value As clsCondicion())
                Me.listaField = value
            End Set
        End Property
    End Class

    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class clsCondicion

        Private campoField As clsCampo

        Private operadorField As TOperadorLogico

        Private valorField As String

        '''<comentarios/>
        Public Property Campo() As clsCampo
            Get
                Return Me.campoField
            End Get
            Set(ByVal value As clsCampo)
                Me.campoField = value
            End Set
        End Property

        '''<comentarios/>
        Public Property Operador() As TOperadorLogico
            Get
                Return Me.operadorField
            End Get
            Set(ByVal value As TOperadorLogico)
                Me.operadorField = value
            End Set
        End Property

        '''<comentarios/>
        Public Property Valor() As String
            Get
                Return Me.valorField
            End Get
            Set(ByVal value As String)
                Me.valorField = value
            End Set
        End Property
    End Class

    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class clsCampo

        Private nombreField As String

        Private descripcionField As String

        Private nombreBDField As String

        Private tipoDatoField As TTipo

        Private largoPMostrarField As Integer

        Private llaveField As Boolean

        '''<comentarios/>
        Public Property Nombre() As String
            Get
                Return Me.nombreField
            End Get
            Set(ByVal value As String)
                Me.nombreField = value
            End Set
        End Property

        '''<comentarios/>
        Public Property Descripcion() As String
            Get
                Return Me.descripcionField
            End Get
            Set(ByVal value As String)
                Me.descripcionField = value
            End Set
        End Property

        '''<comentarios/>
        Public Property NombreBD() As String
            Get
                Return Me.nombreBDField
            End Get
            Set(ByVal value As String)
                Me.nombreBDField = value
            End Set
        End Property

        '''<comentarios/>
        Public Property TipoDato() As TTipo
            Get
                Return Me.tipoDatoField
            End Get
            Set(ByVal value As TTipo)
                Me.tipoDatoField = value
            End Set
        End Property

        '''<comentarios/>
        Public Property LargoPMostrar() As Integer
            Get
                Return Me.largoPMostrarField
            End Get
            Set(ByVal value As Integer)
                Me.largoPMostrarField = value
            End Set
        End Property

        '''<comentarios/>
        Public Property Llave() As Boolean
            Get
                Return Me.llaveField
            End Get
            Set(ByVal value As Boolean)
                Me.llaveField = value
            End Set
        End Property
    End Class

    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Public Enum TTipo

        '''<comentarios/>
        Entero

        '''<comentarios/>
        Caracter

        '''<comentarios/>
        Fecha
    End Enum

    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.SerializableAttribute(), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.prosoft.cr/")> _
    Public Enum TOperadorLogico

        '''<comentarios/>
        Igual

        '''<comentarios/>
        MayorIgual

        '''<comentarios/>
        MenorIgual

        '''<comentarios/>
        Contiene

        '''<comentarios/>
        Entre
    End Enum

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AgregarBDCompletedEventHandler(ByVal sender As Object, ByVal e As AgregarBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class AgregarBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Decimal)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AgregaADASPCompletedEventHandler(ByVal sender As Object, ByVal e As AgregaADASPCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class AgregaADASPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property numeroOrden() As System.Nullable(Of Integer)
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), System.Nullable(Of Integer))
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AgregaDomiciliacionConceptoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AgregarServicioCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ExisteServicioDomiciliacionCompletedEventHandler(ByVal sender As Object, ByVal e As ExisteServicioDomiciliacionCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExisteServicioDomiciliacionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub EliminaDomiciliacionConceptoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub EliminarServicioCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub CrearEnvioADACompletedEventHandler(ByVal sender As Object, ByVal e As CrearEnvioADACompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CrearEnvioADACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Long)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property rNumero() As Long
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), Long)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property rConsecutivo() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(2), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerDomiciliacionesPorEnvioCompletedEventHandler(ByVal sender As Object, ByVal e As TraerDomiciliacionesPorEnvioCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerDomiciliacionesPorEnvioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerResumenDomicCompletedEventHandler(ByVal sender As Object, ByVal e As TraerResumenDomicCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerResumenDomicCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub BorrarBDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub ModificarBDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaServiciosCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaServiciosCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaServiciosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub AprobarOrdenCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerNombrePersonaServCompletedEventHandler(ByVal sender As Object, ByVal e As TraerNombrePersonaServCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerNombrePersonaServCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property v_NombrePersonaServ() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerRegistroBDCompletedEventHandler(ByVal sender As Object, ByVal e As TraerRegistroBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerRegistroBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property v_CedulaPersona() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoMoneda() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), Integer)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CuentaCliente() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(2), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_MontoDesde() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(3), Double)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_MontoHasta() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(4), Double)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_FechaDesde() As Date
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(5), Date)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_FechaHasta() As Date
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(6), Date)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CedulaPersonaServ() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(7), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_NombrePersonaServ() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(8), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_NumeroServicio() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(9), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_EstadoOrden() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(10), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_UsuarioRegistra() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(11), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_FechaRegistro() As Date
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(12), Date)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_UsuarioAprueba() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(13), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_FechaAprobacion() As Date
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(14), Date)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_Constancia() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(15), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoMotivo() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(16), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_Modalidad() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(17), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property v_CodigoEntidad() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(18), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerRegistroDomiciliacionConceptoCompletedEventHandler(ByVal sender As Object, ByVal e As TraerRegistroDomiciliacionConceptoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerRegistroDomiciliacionConceptoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraeCantidadDomicPendientesCompletedEventHandler(ByVal sender As Object, ByVal e As TraeCantidadDomicPendientesCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraeCantidadDomicPendientesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraeCantidadDomicPorCedulaCompletedEventHandler(ByVal sender As Object, ByVal e As TraeCantidadDomicPorCedulaCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraeCantidadDomicPorCedulaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraeCuentasDomicPorCedulaCompletedEventHandler(ByVal sender As Object, ByVal e As TraeCuentasDomicPorCedulaCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraeCuentasDomicPorCedulaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraeCuentasDomicPorCedula2CompletedEventHandler(ByVal sender As Object, ByVal e As TraeCuentasDomicPorCedula2CompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraeCuentasDomicPorCedula2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTotalBDCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTotalBDCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTotalBDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")> _
    Public Delegate Sub TraerListaTotalActivasPorPersonaCompletedEventHandler(ByVal sender As Object, ByVal e As TraerListaTotalActivasPorPersonaCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TraerListaTotalActivasPorPersonaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace