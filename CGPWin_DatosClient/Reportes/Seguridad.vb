'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4952
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization
Imports System.Configuration

'
'This source code was auto-generated by wsdl, Version=2.0.50727.3038.
'

Namespace Reportes.Seguridad


    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="SeguridadSoap", [Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class Seguridad
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private ObtieneEventosOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneUsuariosOperationCompleted As System.Threading.SendOrPostCallback

        Private ReportesPerfilesOperationCompleted As System.Threading.SendOrPostCallback


        Public Sub New()
            MyBase.New()
            Me.Url = ConfigurationManager.AppSettings(Constantes.ServidorDatos) + "Reportes/Seguridad.asmx"
        End Sub

        '''<remarks/>
        Public Event ObtieneEventosCompleted As ObtieneEventosCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneUsuariosCompleted As ObtieneUsuariosCompletedEventHandler

        '''<remarks/>
        Public Event ReportesPerfilesCompleted As ReportesPerfilesCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneEventos", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneEventos(ByVal CodigoEventoDesde As Integer, ByVal CodigoEventoHasta As Integer, ByVal usuario As String, ByVal IP As String) As Sg_Eventos.SG_ReporteBitacotaDataTable
            Dim results() As Object = Me.Invoke("ObtieneEventos", New Object() {CodigoEventoDesde, CodigoEventoHasta, usuario, IP})
            Return CType(results(0), Sg_Eventos.SG_ReporteBitacotaDataTable)
        End Function

        '''<remarks/>
        Public Function BeginObtieneEventos(ByVal CodigoEventoDesde As Integer, ByVal CodigoEventoHasta As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneEventos", New Object() {CodigoEventoDesde, CodigoEventoHasta, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneEventos(ByVal asyncResult As System.IAsyncResult) As Sg_Eventos.SG_ReporteBitacotaDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Sg_Eventos.SG_ReporteBitacotaDataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneEventosAsync(ByVal CodigoEventoDesde As Integer, ByVal CodigoEventoHasta As Integer, ByVal usuario As String, ByVal IP As String)
            Me.ObtieneEventosAsync(CodigoEventoDesde, CodigoEventoHasta, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneEventosAsync(ByVal CodigoEventoDesde As Integer, ByVal CodigoEventoHasta As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ObtieneEventosOperationCompleted Is Nothing) Then
                Me.ObtieneEventosOperationCompleted = AddressOf Me.OnObtieneEventosOperationCompleted
            End If
            Me.InvokeAsync("ObtieneEventos", New Object() {CodigoEventoDesde, CodigoEventoHasta, usuario, IP}, Me.ObtieneEventosOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneEventosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneEventosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneEventosCompleted(Me, New ObtieneEventosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneUsuarios", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneUsuarios(ByVal CodigoUsuarioDesde As Integer, ByVal CodigoUsuarioHasta As Integer, ByVal usuario As String, ByVal IP As String) As SG_ReporteUsuarios.SG_ReporteUsuariosDataTable
            Dim results() As Object = Me.Invoke("ObtieneUsuarios", New Object() {CodigoUsuarioDesde, CodigoUsuarioHasta, usuario, IP})
            Return CType(results(0), SG_ReporteUsuarios.SG_ReporteUsuariosDataTable)
        End Function

        '''<remarks/>
        Public Function BeginObtieneUsuarios(ByVal CodigoUsuarioDesde As Integer, ByVal CodigoUsuarioHasta As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneUsuarios", New Object() {CodigoUsuarioDesde, CodigoUsuarioHasta, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneUsuarios(ByVal asyncResult As System.IAsyncResult) As SG_ReporteUsuarios.SG_ReporteUsuariosDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), SG_ReporteUsuarios.SG_ReporteUsuariosDataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneUsuariosAsync(ByVal CodigoUsuarioDesde As Integer, ByVal CodigoUsuarioHasta As Integer, ByVal usuario As String, ByVal IP As String)
            Me.ObtieneUsuariosAsync(CodigoUsuarioDesde, CodigoUsuarioHasta, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneUsuariosAsync(ByVal CodigoUsuarioDesde As Integer, ByVal CodigoUsuarioHasta As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ObtieneUsuariosOperationCompleted Is Nothing) Then
                Me.ObtieneUsuariosOperationCompleted = AddressOf Me.OnObtieneUsuariosOperationCompleted
            End If
            Me.InvokeAsync("ObtieneUsuarios", New Object() {CodigoUsuarioDesde, CodigoUsuarioHasta, usuario, IP}, Me.ObtieneUsuariosOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneUsuariosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneUsuariosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneUsuariosCompleted(Me, New ObtieneUsuariosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReportesPerfiles", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ReportesPerfiles(ByVal CodigoPerfilDesde As Integer, ByVal CodigoPerfilHasta As Integer, ByVal usuario As String, ByVal IP As String) As SG_ReportesPerfiles.SG_ReportePerfilesDataTable
            Dim results() As Object = Me.Invoke("ReportesPerfiles", New Object() {CodigoPerfilDesde, CodigoPerfilHasta, usuario, IP})
            Return CType(results(0), SG_ReportesPerfiles.SG_ReportePerfilesDataTable)
        End Function

        '''<remarks/>
        Public Function BeginReportesPerfiles(ByVal CodigoPerfilDesde As Integer, ByVal CodigoPerfilHasta As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ReportesPerfiles", New Object() {CodigoPerfilDesde, CodigoPerfilHasta, usuario, IP}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndReportesPerfiles(ByVal asyncResult As System.IAsyncResult) As SG_ReportesPerfiles.SG_ReportePerfilesDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), SG_ReportesPerfiles.SG_ReportePerfilesDataTable)
        End Function

        '''<remarks/>
        Public Overloads Sub ReportesPerfilesAsync(ByVal CodigoPerfilDesde As Integer, ByVal CodigoPerfilHasta As Integer, ByVal usuario As String, ByVal IP As String)
            Me.ReportesPerfilesAsync(CodigoPerfilDesde, CodigoPerfilHasta, usuario, IP, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ReportesPerfilesAsync(ByVal CodigoPerfilDesde As Integer, ByVal CodigoPerfilHasta As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
            If (Me.ReportesPerfilesOperationCompleted Is Nothing) Then
                Me.ReportesPerfilesOperationCompleted = AddressOf Me.OnReportesPerfilesOperationCompleted
            End If
            Me.InvokeAsync("ReportesPerfiles", New Object() {CodigoPerfilDesde, CodigoPerfilHasta, usuario, IP}, Me.ReportesPerfilesOperationCompleted, userState)
        End Sub

        Private Sub OnReportesPerfilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportesPerfilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportesPerfilesCompleted(Me, New ReportesPerfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class

    'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
     Global.System.Xml.Serialization.XmlRootAttribute("Sg_Eventos"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
    Partial Public Class Sg_Eventos
        Inherits Global.System.Data.DataSet

        Private tableSG_ReporteBitacota As SG_ReporteBitacotaDataTable

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If (Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("SG_ReporteBitacota")) Is Nothing) Then
                    MyBase.Tables.Add(New SG_ReporteBitacotaDataTable(ds.Tables("SG_ReporteBitacota")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False), _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property SG_ReporteBitacota() As SG_ReporteBitacotaDataTable
            Get
                Return Me.tableSG_ReporteBitacota
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.BrowsableAttribute(True), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set(ByVal value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As Sg_Eventos = CType(MyBase.Clone, Sg_Eventos)
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("SG_ReporteBitacota")) Is Nothing) Then
                    MyBase.Tables.Add(New SG_ReporteBitacotaDataTable(ds.Tables("SG_ReporteBitacota")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableSG_ReporteBitacota = CType(MyBase.Tables("SG_ReporteBitacota"), SG_ReporteBitacotaDataTable)
            If (initTable = True) Then
                If (Not (Me.tableSG_ReporteBitacota) Is Nothing) Then
                    Me.tableSG_ReporteBitacota.InitVars()
                End If
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.DataSetName = "Sg_Eventos"
            Me.Prefix = ""
            Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWSSeguridad/Sg_Eventos.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableSG_ReporteBitacota = New SG_ReporteBitacotaDataTable
            MyBase.Tables.Add(Me.tableSG_ReporteBitacota)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Function ShouldSerializeSG_ReporteBitacota() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As Sg_Eventos = New Sg_Eventos
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub SG_ReporteBitacotaRowChangeEventHandler(ByVal sender As Object, ByVal e As SG_ReporteBitacotaRowChangeEvent)

        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
         Global.System.Serializable(), _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
        Partial Public Class SG_ReporteBitacotaDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable

            Private columnFechaEvento As Global.System.Data.DataColumn

            Private columnLogin As Global.System.Data.DataColumn

            Private columnEvento As Global.System.Data.DataColumn

            Private columnDescripcionEvento As Global.System.Data.DataColumn

            Private columnReferenciaTecnica As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                MyBase.New()
                Me.TableName = "SG_ReporteBitacota"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New()
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property FechaEventoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFechaEvento
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property LoginColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLogin
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property EventoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEvento
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property DescripcionEventoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescripcionEvento
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property ReferenciaTecnicaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnReferenciaTecnica
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As SG_ReporteBitacotaRow
                Get
                    Return CType(Me.Rows(index), SG_ReporteBitacotaRow)
                End Get
            End Property

            Public Event SG_ReporteBitacotaRowChanging As SG_ReporteBitacotaRowChangeEventHandler

            Public Event SG_ReporteBitacotaRowChanged As SG_ReporteBitacotaRowChangeEventHandler

            Public Event SG_ReporteBitacotaRowDeleting As SG_ReporteBitacotaRowChangeEventHandler

            Public Event SG_ReporteBitacotaRowDeleted As SG_ReporteBitacotaRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Sub AddSG_ReporteBitacotaRow(ByVal row As SG_ReporteBitacotaRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Function AddSG_ReporteBitacotaRow(ByVal FechaEvento As Date, ByVal Login As String, ByVal Evento As String, ByVal DescripcionEvento As String, ByVal ReferenciaTecnica As String) As SG_ReporteBitacotaRow
                Dim rowSG_ReporteBitacotaRow As SG_ReporteBitacotaRow = CType(Me.NewRow, SG_ReporteBitacotaRow)
                Dim columnValuesArray() As Object = New Object() {FechaEvento, Login, Evento, DescripcionEvento, ReferenciaTecnica}
                rowSG_ReporteBitacotaRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSG_ReporteBitacotaRow)
                Return rowSG_ReporteBitacotaRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SG_ReporteBitacotaDataTable = CType(MyBase.Clone, SG_ReporteBitacotaDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SG_ReporteBitacotaDataTable
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnFechaEvento = MyBase.Columns("FechaEvento")
                Me.columnLogin = MyBase.Columns("Login")
                Me.columnEvento = MyBase.Columns("Evento")
                Me.columnDescripcionEvento = MyBase.Columns("DescripcionEvento")
                Me.columnReferenciaTecnica = MyBase.Columns("ReferenciaTecnica")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnFechaEvento = New Global.System.Data.DataColumn("FechaEvento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFechaEvento)
                Me.columnLogin = New Global.System.Data.DataColumn("Login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLogin)
                Me.columnEvento = New Global.System.Data.DataColumn("Evento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEvento)
                Me.columnDescripcionEvento = New Global.System.Data.DataColumn("DescripcionEvento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescripcionEvento)
                Me.columnReferenciaTecnica = New Global.System.Data.DataColumn("ReferenciaTecnica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnReferenciaTecnica)
                Me.columnFechaEvento.AllowDBNull = False
                Me.columnLogin.AllowDBNull = False
                Me.columnLogin.MaxLength = 30
                Me.columnEvento.MaxLength = 60
                Me.columnDescripcionEvento.AllowDBNull = False
                Me.columnDescripcionEvento.MaxLength = 255
                Me.columnReferenciaTecnica.ReadOnly = True
                Me.columnReferenciaTecnica.MaxLength = 771
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewSG_ReporteBitacotaRow() As SG_ReporteBitacotaRow
                Return CType(Me.NewRow, SG_ReporteBitacotaRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SG_ReporteBitacotaRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SG_ReporteBitacotaRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SG_ReporteBitacotaRowChangedEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteBitacotaRowChanged(Me, New SG_ReporteBitacotaRowChangeEvent(CType(e.Row, SG_ReporteBitacotaRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SG_ReporteBitacotaRowChangingEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteBitacotaRowChanging(Me, New SG_ReporteBitacotaRowChangeEvent(CType(e.Row, SG_ReporteBitacotaRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SG_ReporteBitacotaRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteBitacotaRowDeleted(Me, New SG_ReporteBitacotaRowChangeEvent(CType(e.Row, SG_ReporteBitacotaRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SG_ReporteBitacotaRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteBitacotaRowDeleting(Me, New SG_ReporteBitacotaRowChangeEvent(CType(e.Row, SG_ReporteBitacotaRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveSG_ReporteBitacotaRow(ByVal row As SG_ReporteBitacotaRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As Sg_Eventos = New Sg_Eventos
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SG_ReporteBitacotaDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0

                                Do While ((s1.Position <> s1.Length) _
                                            AndAlso (s1.ReadByte = s2.ReadByte))


                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If

                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close()
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Partial Public Class SG_ReporteBitacotaRow
            Inherits Global.System.Data.DataRow

            Private tableSG_ReporteBitacota As SG_ReporteBitacotaDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSG_ReporteBitacota = CType(Me.Table, SG_ReporteBitacotaDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property FechaEvento() As Date
                Get
                    Return CType(Me(Me.tableSG_ReporteBitacota.FechaEventoColumn), Date)
                End Get
                Set(ByVal value As Date)
                    Me(Me.tableSG_ReporteBitacota.FechaEventoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Login() As String
                Get
                    Return CType(Me(Me.tableSG_ReporteBitacota.LoginColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteBitacota.LoginColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Evento() As String
                Get
                    Try
                        Return CType(Me(Me.tableSG_ReporteBitacota.EventoColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Evento' de la tabla 'SG_ReporteBitacota' es DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteBitacota.EventoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property DescripcionEvento() As String
                Get
                    Return CType(Me(Me.tableSG_ReporteBitacota.DescripcionEventoColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteBitacota.DescripcionEventoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property ReferenciaTecnica() As String
                Get
                    Try
                        Return CType(Me(Me.tableSG_ReporteBitacota.ReferenciaTecnicaColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ReferenciaTecnica' de la tabla 'SG_ReporteBitacota' es DB" & _
                                "Null.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteBitacota.ReferenciaTecnicaColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsEventoNull() As Boolean
                Return Me.IsNull(Me.tableSG_ReporteBitacota.EventoColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetEventoNull()
                Me(Me.tableSG_ReporteBitacota.EventoColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsReferenciaTecnicaNull() As Boolean
                Return Me.IsNull(Me.tableSG_ReporteBitacota.ReferenciaTecnicaColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetReferenciaTecnicaNull()
                Me(Me.tableSG_ReporteBitacota.ReferenciaTecnicaColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Public Class SG_ReporteBitacotaRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As SG_ReporteBitacotaRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As SG_ReporteBitacotaRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As SG_ReporteBitacotaRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class

    'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
     Global.System.Xml.Serialization.XmlRootAttribute("SG_ReporteUsuarios"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
    Partial Public Class SG_ReporteUsuarios
        Inherits Global.System.Data.DataSet

        Private tableSG_ReporteUsuarios As SG_ReporteUsuariosDataTable

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If (Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("SG_ReporteUsuarios")) Is Nothing) Then
                    MyBase.Tables.Add(New SG_ReporteUsuariosDataTable(ds.Tables("SG_ReporteUsuarios")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False), _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property _SG_ReporteUsuarios() As SG_ReporteUsuariosDataTable
            Get
                Return Me.tableSG_ReporteUsuarios
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.BrowsableAttribute(True), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set(ByVal value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As SG_ReporteUsuarios = CType(MyBase.Clone, SG_ReporteUsuarios)
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("SG_ReporteUsuarios")) Is Nothing) Then
                    MyBase.Tables.Add(New SG_ReporteUsuariosDataTable(ds.Tables("SG_ReporteUsuarios")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableSG_ReporteUsuarios = CType(MyBase.Tables("SG_ReporteUsuarios"), SG_ReporteUsuariosDataTable)
            If (initTable = True) Then
                If (Not (Me.tableSG_ReporteUsuarios) Is Nothing) Then
                    Me.tableSG_ReporteUsuarios.InitVars()
                End If
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.DataSetName = "SG_ReporteUsuarios"
            Me.Prefix = ""
            Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWSSeguridad/SG_ReporteUsuarios.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableSG_ReporteUsuarios = New SG_ReporteUsuariosDataTable
            MyBase.Tables.Add(Me.tableSG_ReporteUsuarios)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Function ShouldSerialize_SG_ReporteUsuarios() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As SG_ReporteUsuarios = New SG_ReporteUsuarios
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub SG_ReporteUsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As SG_ReporteUsuariosRowChangeEvent)

        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
         Global.System.Serializable(), _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
        Partial Public Class SG_ReporteUsuariosDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable

            Private columnCodigoUsuario As Global.System.Data.DataColumn

            Private columnNombre As Global.System.Data.DataColumn

            Private columnLogin As Global.System.Data.DataColumn

            Private columnCedula As Global.System.Data.DataColumn

            Private columnEstado As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                MyBase.New()
                Me.TableName = "SG_ReporteUsuarios"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New()
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CodigoUsuarioColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCodigoUsuario
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNombre
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property LoginColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLogin
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CedulaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCedula
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEstado
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As SG_ReporteUsuariosRow
                Get
                    Return CType(Me.Rows(index), SG_ReporteUsuariosRow)
                End Get
            End Property

            Public Event SG_ReporteUsuariosRowChanging As SG_ReporteUsuariosRowChangeEventHandler

            Public Event SG_ReporteUsuariosRowChanged As SG_ReporteUsuariosRowChangeEventHandler

            Public Event SG_ReporteUsuariosRowDeleting As SG_ReporteUsuariosRowChangeEventHandler

            Public Event SG_ReporteUsuariosRowDeleted As SG_ReporteUsuariosRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Sub AddSG_ReporteUsuariosRow(ByVal row As SG_ReporteUsuariosRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Function AddSG_ReporteUsuariosRow(ByVal CodigoUsuario As Decimal, ByVal Nombre As String, ByVal Login As String, ByVal Cedula As String, ByVal Estado As String) As SG_ReporteUsuariosRow
                Dim rowSG_ReporteUsuariosRow As SG_ReporteUsuariosRow = CType(Me.NewRow, SG_ReporteUsuariosRow)
                Dim columnValuesArray() As Object = New Object() {CodigoUsuario, Nombre, Login, Cedula, Estado}
                rowSG_ReporteUsuariosRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSG_ReporteUsuariosRow)
                Return rowSG_ReporteUsuariosRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByCodigoUsuario(ByVal CodigoUsuario As Decimal) As SG_ReporteUsuariosRow
                Return CType(Me.Rows.Find(New Object() {CodigoUsuario}), SG_ReporteUsuariosRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SG_ReporteUsuariosDataTable = CType(MyBase.Clone, SG_ReporteUsuariosDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SG_ReporteUsuariosDataTable
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnCodigoUsuario = MyBase.Columns("CodigoUsuario")
                Me.columnNombre = MyBase.Columns("Nombre")
                Me.columnLogin = MyBase.Columns("Login")
                Me.columnCedula = MyBase.Columns("Cedula")
                Me.columnEstado = MyBase.Columns("Estado")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnCodigoUsuario = New Global.System.Data.DataColumn("CodigoUsuario", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCodigoUsuario)
                Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNombre)
                Me.columnLogin = New Global.System.Data.DataColumn("Login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLogin)
                Me.columnCedula = New Global.System.Data.DataColumn("Cedula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCedula)
                Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEstado)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoUsuario}, True))
                Me.columnCodigoUsuario.AllowDBNull = False
                Me.columnCodigoUsuario.Unique = True
                Me.columnNombre.ReadOnly = True
                Me.columnNombre.MaxLength = 98
                Me.columnLogin.AllowDBNull = False
                Me.columnLogin.MaxLength = 30
                Me.columnCedula.AllowDBNull = False
                Me.columnCedula.MaxLength = 15
                Me.columnEstado.AllowDBNull = False
                Me.columnEstado.MaxLength = 1
                Me.ExtendedProperties.Add("Generator_TablePropName", "_SG_ReporteUsuarios")
                Me.ExtendedProperties.Add("Generator_UserTableName", "SG_ReporteUsuarios")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewSG_ReporteUsuariosRow() As SG_ReporteUsuariosRow
                Return CType(Me.NewRow, SG_ReporteUsuariosRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SG_ReporteUsuariosRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SG_ReporteUsuariosRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SG_ReporteUsuariosRowChangedEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteUsuariosRowChanged(Me, New SG_ReporteUsuariosRowChangeEvent(CType(e.Row, SG_ReporteUsuariosRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SG_ReporteUsuariosRowChangingEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteUsuariosRowChanging(Me, New SG_ReporteUsuariosRowChangeEvent(CType(e.Row, SG_ReporteUsuariosRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SG_ReporteUsuariosRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteUsuariosRowDeleted(Me, New SG_ReporteUsuariosRowChangeEvent(CType(e.Row, SG_ReporteUsuariosRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SG_ReporteUsuariosRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SG_ReporteUsuariosRowDeleting(Me, New SG_ReporteUsuariosRowChangeEvent(CType(e.Row, SG_ReporteUsuariosRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveSG_ReporteUsuariosRow(ByVal row As SG_ReporteUsuariosRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As SG_ReporteUsuarios = New SG_ReporteUsuarios
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SG_ReporteUsuariosDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0

                                Do While ((s1.Position <> s1.Length) _
                                            AndAlso (s1.ReadByte = s2.ReadByte))


                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If

                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close()
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Partial Public Class SG_ReporteUsuariosRow
            Inherits Global.System.Data.DataRow

            Private tableSG_ReporteUsuarios As SG_ReporteUsuariosDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSG_ReporteUsuarios = CType(Me.Table, SG_ReporteUsuariosDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CodigoUsuario() As Decimal
                Get
                    Return CType(Me(Me.tableSG_ReporteUsuarios.CodigoUsuarioColumn), Decimal)
                End Get
                Set(ByVal value As Decimal)
                    Me(Me.tableSG_ReporteUsuarios.CodigoUsuarioColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Nombre() As String
                Get
                    Try
                        Return CType(Me(Me.tableSG_ReporteUsuarios.NombreColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'SG_ReporteUsuarios' es DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteUsuarios.NombreColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Login() As String
                Get
                    Return CType(Me(Me.tableSG_ReporteUsuarios.LoginColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteUsuarios.LoginColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Cedula() As String
                Get
                    Return CType(Me(Me.tableSG_ReporteUsuarios.CedulaColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteUsuarios.CedulaColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Estado() As String
                Get
                    Return CType(Me(Me.tableSG_ReporteUsuarios.EstadoColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReporteUsuarios.EstadoColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsNombreNull() As Boolean
                Return Me.IsNull(Me.tableSG_ReporteUsuarios.NombreColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetNombreNull()
                Me(Me.tableSG_ReporteUsuarios.NombreColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Public Class SG_ReporteUsuariosRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As SG_ReporteUsuariosRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As SG_ReporteUsuariosRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As SG_ReporteUsuariosRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class

    'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
     Global.System.Xml.Serialization.XmlRootAttribute("SG_ReportesPerfiles"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
    Partial Public Class SG_ReportesPerfiles
        Inherits Global.System.Data.DataSet

        Private tableSG_ReportePerfiles As SG_ReportePerfilesDataTable

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If (Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("SG_ReportePerfiles")) Is Nothing) Then
                    MyBase.Tables.Add(New SG_ReportePerfilesDataTable(ds.Tables("SG_ReportePerfiles")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False), _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property SG_ReportePerfiles() As SG_ReportePerfilesDataTable
            Get
                Return Me.tableSG_ReportePerfiles
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.BrowsableAttribute(True), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set(ByVal value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As SG_ReportesPerfiles = CType(MyBase.Clone, SG_ReportesPerfiles)
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("SG_ReportePerfiles")) Is Nothing) Then
                    MyBase.Tables.Add(New SG_ReportePerfilesDataTable(ds.Tables("SG_ReportePerfiles")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableSG_ReportePerfiles = CType(MyBase.Tables("SG_ReportePerfiles"), SG_ReportePerfilesDataTable)
            If (initTable = True) Then
                If (Not (Me.tableSG_ReportePerfiles) Is Nothing) Then
                    Me.tableSG_ReportePerfiles.InitVars()
                End If
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.DataSetName = "SG_ReportesPerfiles"
            Me.Prefix = ""
            Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWSSeguridad/SG_ReportesPerfiles.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableSG_ReportePerfiles = New SG_ReportePerfilesDataTable
            MyBase.Tables.Add(Me.tableSG_ReportePerfiles)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Function ShouldSerializeSG_ReportePerfiles() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As SG_ReportesPerfiles = New SG_ReportesPerfiles
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub SG_ReportePerfilesRowChangeEventHandler(ByVal sender As Object, ByVal e As SG_ReportePerfilesRowChangeEvent)

        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
         Global.System.Serializable(), _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
        Partial Public Class SG_ReportePerfilesDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable

            Private columnCodigoRol As Global.System.Data.DataColumn

            Private columnNombreRol As Global.System.Data.DataColumn

            Private columnEstado As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                MyBase.New()
                Me.TableName = "SG_ReportePerfiles"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New()
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property CodigoRolColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCodigoRol
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property NombreRolColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNombreRol
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEstado
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As SG_ReportePerfilesRow
                Get
                    Return CType(Me.Rows(index), SG_ReportePerfilesRow)
                End Get
            End Property

            Public Event SG_ReportePerfilesRowChanging As SG_ReportePerfilesRowChangeEventHandler

            Public Event SG_ReportePerfilesRowChanged As SG_ReportePerfilesRowChangeEventHandler

            Public Event SG_ReportePerfilesRowDeleting As SG_ReportePerfilesRowChangeEventHandler

            Public Event SG_ReportePerfilesRowDeleted As SG_ReportePerfilesRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Sub AddSG_ReportePerfilesRow(ByVal row As SG_ReportePerfilesRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Function AddSG_ReportePerfilesRow(ByVal CodigoRol As Integer, ByVal NombreRol As String, ByVal Estado As String) As SG_ReportePerfilesRow
                Dim rowSG_ReportePerfilesRow As SG_ReportePerfilesRow = CType(Me.NewRow, SG_ReportePerfilesRow)
                Dim columnValuesArray() As Object = New Object() {CodigoRol, NombreRol, Estado}
                rowSG_ReportePerfilesRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSG_ReportePerfilesRow)
                Return rowSG_ReportePerfilesRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindByCodigoRol(ByVal CodigoRol As Integer) As SG_ReportePerfilesRow
                Return CType(Me.Rows.Find(New Object() {CodigoRol}), SG_ReportePerfilesRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SG_ReportePerfilesDataTable = CType(MyBase.Clone, SG_ReportePerfilesDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SG_ReportePerfilesDataTable
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnCodigoRol = MyBase.Columns("CodigoRol")
                Me.columnNombreRol = MyBase.Columns("NombreRol")
                Me.columnEstado = MyBase.Columns("Estado")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnCodigoRol = New Global.System.Data.DataColumn("CodigoRol", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCodigoRol)
                Me.columnNombreRol = New Global.System.Data.DataColumn("NombreRol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNombreRol)
                Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEstado)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoRol}, True))
                Me.columnCodigoRol.AllowDBNull = False
                Me.columnCodigoRol.Unique = True
                Me.columnNombreRol.AllowDBNull = False
                Me.columnNombreRol.MaxLength = 50
                Me.columnEstado.AllowDBNull = False
                Me.columnEstado.MaxLength = 1
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewSG_ReportePerfilesRow() As SG_ReportePerfilesRow
                Return CType(Me.NewRow, SG_ReportePerfilesRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SG_ReportePerfilesRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SG_ReportePerfilesRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SG_ReportePerfilesRowChangedEvent) Is Nothing) Then
                    RaiseEvent SG_ReportePerfilesRowChanged(Me, New SG_ReportePerfilesRowChangeEvent(CType(e.Row, SG_ReportePerfilesRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SG_ReportePerfilesRowChangingEvent) Is Nothing) Then
                    RaiseEvent SG_ReportePerfilesRowChanging(Me, New SG_ReportePerfilesRowChangeEvent(CType(e.Row, SG_ReportePerfilesRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SG_ReportePerfilesRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SG_ReportePerfilesRowDeleted(Me, New SG_ReportePerfilesRowChangeEvent(CType(e.Row, SG_ReportePerfilesRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SG_ReportePerfilesRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SG_ReportePerfilesRowDeleting(Me, New SG_ReportePerfilesRowChangeEvent(CType(e.Row, SG_ReportePerfilesRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemoveSG_ReportePerfilesRow(ByVal row As SG_ReportePerfilesRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As SG_ReportesPerfiles = New SG_ReportesPerfiles
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SG_ReportePerfilesDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0

                                Do While ((s1.Position <> s1.Length) _
                                            AndAlso (s1.ReadByte = s2.ReadByte))


                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If

                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close()
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Partial Public Class SG_ReportePerfilesRow
            Inherits Global.System.Data.DataRow

            Private tableSG_ReportePerfiles As SG_ReportePerfilesDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSG_ReportePerfiles = CType(Me.Table, SG_ReportePerfilesDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property CodigoRol() As Integer
                Get
                    Return CType(Me(Me.tableSG_ReportePerfiles.CodigoRolColumn), Integer)
                End Get
                Set(ByVal value As Integer)
                    Me(Me.tableSG_ReportePerfiles.CodigoRolColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property NombreRol() As String
                Get
                    Return CType(Me(Me.tableSG_ReportePerfiles.NombreRolColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReportePerfiles.NombreRolColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property Estado() As String
                Get
                    Return CType(Me(Me.tableSG_ReportePerfiles.EstadoColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tableSG_ReportePerfiles.EstadoColumn) = value
                End Set
            End Property
        End Class

        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Public Class SG_ReportePerfilesRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As SG_ReportePerfilesRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As SG_ReportePerfilesRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As SG_ReportePerfilesRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ObtieneEventosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneEventosCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneEventosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Sg_Eventos.SG_ReporteBitacotaDataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Sg_Eventos.SG_ReporteBitacotaDataTable)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ObtieneUsuariosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneUsuariosCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneUsuariosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As SG_ReporteUsuarios.SG_ReporteUsuariosDataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), SG_ReporteUsuarios.SG_ReporteUsuariosDataTable)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ReportesPerfilesCompletedEventHandler(ByVal sender As Object, ByVal e As ReportesPerfilesCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ReportesPerfilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As SG_ReportesPerfiles.SG_ReportePerfilesDataTable
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), SG_ReportesPerfiles.SG_ReportePerfilesDataTable)
            End Get
        End Property
    End Class
End Namespace