'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3615
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization
Imports System.Configuration

'
'This source code was auto-generated by wsdl, Version=2.0.50727.3038.
'
Namespace Reportes.Pagos


    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="PagosSoap", [Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class Pagos
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private ObtieneAutorizacionesConceptoOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneAutorizacionesConceptoBasicoOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneAutorizacionesConceptoPorBancoOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoCentrosCostoOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoConceptosOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoDestinatariosOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoEntidadesFinacierasOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoMonedasOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoMotivosOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoServiciosOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneCatalogoUsuariosCentrosCostosOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneDomiciliacionesPorPeriodoOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteEstadisticasConceptoOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteEstadisticasDestinatariosOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteDetalleEventosOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteEventosOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteEventosEnvioOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteEventosTranOperationCompleted As System.Threading.SendOrPostCallback

        Private ReportePropuestasOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteDEvolucionesOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteEntidadesOperationCompleted As System.Threading.SendOrPostCallback

        Private ReportePropuestasListaOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteTransaccionesTranOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteTransaccionesFecOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteTransaccionesFec2OperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteTransaccionesPorNumeroOperationCompleted As System.Threading.SendOrPostCallback

        Private ReporteTransaccionesSinFechaCicloOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New()
            Me.Url = ConfigurationManager.AppSettings(Constantes.ServidorDatos) + "Reportes/Pagos.asmx"
    End Sub
    
    '''<remarks/>
    Public Event ObtieneAutorizacionesConceptoCompleted As ObtieneAutorizacionesConceptoCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneAutorizacionesConceptoBasicoCompleted As ObtieneAutorizacionesConceptoBasicoCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneAutorizacionesConceptoPorBancoCompleted As ObtieneAutorizacionesConceptoPorBancoCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoCentrosCostoCompleted As ObtieneCatalogoCentrosCostoCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoConceptosCompleted As ObtieneCatalogoConceptosCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoDestinatariosCompleted As ObtieneCatalogoDestinatariosCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoEntidadesFinacierasCompleted As ObtieneCatalogoEntidadesFinacierasCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoMonedasCompleted As ObtieneCatalogoMonedasCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoMotivosCompleted As ObtieneCatalogoMotivosCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoServiciosCompleted As ObtieneCatalogoServiciosCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneCatalogoUsuariosCentrosCostosCompleted As ObtieneCatalogoUsuariosCentrosCostosCompletedEventHandler
    
    '''<remarks/>
    Public Event ObtieneDomiciliacionesPorPeriodoCompleted As ObtieneDomiciliacionesPorPeriodoCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteEstadisticasConceptoCompleted As ReporteEstadisticasConceptoCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteEstadisticasDestinatariosCompleted As ReporteEstadisticasDestinatariosCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteDetalleEventosCompleted As ReporteDetalleEventosCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteEventosCompleted As ReporteEventosCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteEventosEnvioCompleted As ReporteEventosEnvioCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteEventosTranCompleted As ReporteEventosTranCompletedEventHandler
    
    '''<remarks/>
    Public Event ReportePropuestasCompleted As ReportePropuestasCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteDEvolucionesCompleted As ReporteDEvolucionesCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteEntidadesCompleted As ReporteEntidadesCompletedEventHandler
    
    '''<remarks/>
    Public Event ReportePropuestasListaCompleted As ReportePropuestasListaCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteTransaccionesTranCompleted As ReporteTransaccionesTranCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteTransaccionesFecCompleted As ReporteTransaccionesFecCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteTransaccionesFec2Completed As ReporteTransaccionesFec2CompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteTransaccionesPorNumeroCompleted As ReporteTransaccionesPorNumeroCompletedEventHandler
    
    '''<remarks/>
    Public Event ReporteTransaccionesSinFechaCicloCompleted As ReporteTransaccionesSinFechaCicloCompletedEventHandler
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneAutorizacionesConcepto", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneAutorizacionesConcepto(ByVal TipoOperacion As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String) As Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable
        Dim results() As Object = Me.Invoke("ObtieneAutorizacionesConcepto", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP})
        Return CType(results(0),Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneAutorizacionesConcepto(ByVal TipoOperacion As String, ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneAutorizacionesConcepto", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneAutorizacionesConcepto(ByVal asyncResult As System.IAsyncResult) As Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneAutorizacionesConceptoAsync(ByVal TipoOperacion As String, ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String)
        Me.ObtieneAutorizacionesConceptoAsync(TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneAutorizacionesConceptoAsync(ByVal TipoOperacion As String, ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneAutorizacionesConceptoOperationCompleted Is Nothing) Then
            Me.ObtieneAutorizacionesConceptoOperationCompleted = AddressOf Me.OnObtieneAutorizacionesConceptoOperationCompleted
        End If
        Me.InvokeAsync("ObtieneAutorizacionesConcepto", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP}, Me.ObtieneAutorizacionesConceptoOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneAutorizacionesConceptoOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneAutorizacionesConceptoCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneAutorizacionesConceptoCompleted(Me, New ObtieneAutorizacionesConceptoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneAutorizacionesConceptoBasico", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneAutorizacionesConceptoBasico(ByVal TipoOperacion As String, ByVal CodigoConcepto As Integer, ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String) As Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable
        Dim results() As Object = Me.Invoke("ObtieneAutorizacionesConceptoBasico", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP})
        Return CType(results(0),Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneAutorizacionesConceptoBasico(ByVal TipoOperacion As String, ByVal CodigoConcepto As Integer, ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneAutorizacionesConceptoBasico", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneAutorizacionesConceptoBasico(ByVal asyncResult As System.IAsyncResult) As Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneAutorizacionesConceptoBasicoAsync(ByVal TipoOperacion As String, ByVal CodigoConcepto As Integer, ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String)
        Me.ObtieneAutorizacionesConceptoBasicoAsync(TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneAutorizacionesConceptoBasicoAsync(ByVal TipoOperacion As String, ByVal CodigoConcepto As Integer, ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneAutorizacionesConceptoBasicoOperationCompleted Is Nothing) Then
            Me.ObtieneAutorizacionesConceptoBasicoOperationCompleted = AddressOf Me.OnObtieneAutorizacionesConceptoBasicoOperationCompleted
        End If
        Me.InvokeAsync("ObtieneAutorizacionesConceptoBasico", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP}, Me.ObtieneAutorizacionesConceptoBasicoOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneAutorizacionesConceptoBasicoOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneAutorizacionesConceptoBasicoCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneAutorizacionesConceptoBasicoCompleted(Me, New ObtieneAutorizacionesConceptoBasicoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneAutorizacionesConceptoPorBanco", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneAutorizacionesConceptoPorBanco(ByVal TipoOperacion As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String) As Autorizaciones_ConceptoBanco
        Dim results() As Object = Me.Invoke("ObtieneAutorizacionesConceptoPorBanco", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP})
        Return CType(results(0),Autorizaciones_ConceptoBanco)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneAutorizacionesConceptoPorBanco(ByVal TipoOperacion As String, ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneAutorizacionesConceptoPorBanco", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneAutorizacionesConceptoPorBanco(ByVal asyncResult As System.IAsyncResult) As Autorizaciones_ConceptoBanco
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Autorizaciones_ConceptoBanco)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneAutorizacionesConceptoPorBancoAsync(ByVal TipoOperacion As String, ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String)
        Me.ObtieneAutorizacionesConceptoPorBancoAsync(TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneAutorizacionesConceptoPorBancoAsync(ByVal TipoOperacion As String, ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal Estado As String, ByVal CuentaDestino As String, ByVal Modalidad As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneAutorizacionesConceptoPorBancoOperationCompleted Is Nothing) Then
            Me.ObtieneAutorizacionesConceptoPorBancoOperationCompleted = AddressOf Me.OnObtieneAutorizacionesConceptoPorBancoOperationCompleted
        End If
        Me.InvokeAsync("ObtieneAutorizacionesConceptoPorBanco", New Object() {TipoOperacion, CodigoConcepto, Estado, CuentaDestino, Modalidad, usuario, IP}, Me.ObtieneAutorizacionesConceptoPorBancoOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneAutorizacionesConceptoPorBancoOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneAutorizacionesConceptoPorBancoCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneAutorizacionesConceptoPorBancoCompleted(Me, New ObtieneAutorizacionesConceptoPorBancoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoCentrosCosto", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoCentrosCosto(ByVal usuario As String, ByVal IP As String) As CatalogoCentrosCosto
        Dim results() As Object = Me.Invoke("ObtieneCatalogoCentrosCosto", New Object() {usuario, IP})
        Return CType(results(0),CatalogoCentrosCosto)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoCentrosCosto(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoCentrosCosto", New Object() {usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoCentrosCosto(ByVal asyncResult As System.IAsyncResult) As CatalogoCentrosCosto
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),CatalogoCentrosCosto)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoCentrosCostoAsync(ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoCentrosCostoAsync(usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoCentrosCostoAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoCentrosCostoOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoCentrosCostoOperationCompleted = AddressOf Me.OnObtieneCatalogoCentrosCostoOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoCentrosCosto", New Object() {usuario, IP}, Me.ObtieneCatalogoCentrosCostoOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoCentrosCostoOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoCentrosCostoCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoCentrosCostoCompleted(Me, New ObtieneCatalogoCentrosCostoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoConceptos", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoConceptos(ByVal TipoOperacion As String, ByVal usuario As String, ByVal IP As String) As CatalogoConceptos.PC_ReporteConceptosDataTable
        Dim results() As Object = Me.Invoke("ObtieneCatalogoConceptos", New Object() {TipoOperacion, usuario, IP})
        Return CType(results(0),CatalogoConceptos.PC_ReporteConceptosDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoConceptos(ByVal TipoOperacion As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoConceptos", New Object() {TipoOperacion, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoConceptos(ByVal asyncResult As System.IAsyncResult) As CatalogoConceptos.PC_ReporteConceptosDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),CatalogoConceptos.PC_ReporteConceptosDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoConceptosAsync(ByVal TipoOperacion As String, ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoConceptosAsync(TipoOperacion, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoConceptosAsync(ByVal TipoOperacion As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoConceptosOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoConceptosOperationCompleted = AddressOf Me.OnObtieneCatalogoConceptosOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoConceptos", New Object() {TipoOperacion, usuario, IP}, Me.ObtieneCatalogoConceptosOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoConceptosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoConceptosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoConceptosCompleted(Me, New ObtieneCatalogoConceptosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoDestinatarios", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoDestinatarios(ByVal usuario As String, ByVal IP As String) As Destinatarios.PC_MatriculaPersonasDataTable
        Dim results() As Object = Me.Invoke("ObtieneCatalogoDestinatarios", New Object() {usuario, IP})
        Return CType(results(0),Destinatarios.PC_MatriculaPersonasDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoDestinatarios(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoDestinatarios", New Object() {usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoDestinatarios(ByVal asyncResult As System.IAsyncResult) As Destinatarios.PC_MatriculaPersonasDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),Destinatarios.PC_MatriculaPersonasDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoDestinatariosAsync(ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoDestinatariosAsync(usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoDestinatariosAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoDestinatariosOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoDestinatariosOperationCompleted = AddressOf Me.OnObtieneCatalogoDestinatariosOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoDestinatarios", New Object() {usuario, IP}, Me.ObtieneCatalogoDestinatariosOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoDestinatariosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoDestinatariosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoDestinatariosCompleted(Me, New ObtieneCatalogoDestinatariosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoEntidadesFinacieras", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoEntidadesFinacieras(ByVal usuario As String, ByVal IP As String) As PC_Bancos.PC_BancosDataTable
        Dim results() As Object = Me.Invoke("ObtieneCatalogoEntidadesFinacieras", New Object() {usuario, IP})
        Return CType(results(0),PC_Bancos.PC_BancosDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoEntidadesFinacieras(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoEntidadesFinacieras", New Object() {usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoEntidadesFinacieras(ByVal asyncResult As System.IAsyncResult) As PC_Bancos.PC_BancosDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_Bancos.PC_BancosDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoEntidadesFinacierasAsync(ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoEntidadesFinacierasAsync(usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoEntidadesFinacierasAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoEntidadesFinacierasOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoEntidadesFinacierasOperationCompleted = AddressOf Me.OnObtieneCatalogoEntidadesFinacierasOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoEntidadesFinacieras", New Object() {usuario, IP}, Me.ObtieneCatalogoEntidadesFinacierasOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoEntidadesFinacierasOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoEntidadesFinacierasCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoEntidadesFinacierasCompleted(Me, New ObtieneCatalogoEntidadesFinacierasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoMonedas", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoMonedas(ByVal usuario As String, ByVal IP As String) As PC_Monedas.PC_MonedasDataTable
        Dim results() As Object = Me.Invoke("ObtieneCatalogoMonedas", New Object() {usuario, IP})
        Return CType(results(0),PC_Monedas.PC_MonedasDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoMonedas(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoMonedas", New Object() {usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoMonedas(ByVal asyncResult As System.IAsyncResult) As PC_Monedas.PC_MonedasDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_Monedas.PC_MonedasDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoMonedasAsync(ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoMonedasAsync(usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoMonedasAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoMonedasOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoMonedasOperationCompleted = AddressOf Me.OnObtieneCatalogoMonedasOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoMonedas", New Object() {usuario, IP}, Me.ObtieneCatalogoMonedasOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoMonedasOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoMonedasCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoMonedasCompleted(Me, New ObtieneCatalogoMonedasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoMotivos", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoMotivos(ByVal usuario As String, ByVal IP As String) As PC_Motivos.PC_MotivosDataTable
        Dim results() As Object = Me.Invoke("ObtieneCatalogoMotivos", New Object() {usuario, IP})
        Return CType(results(0),PC_Motivos.PC_MotivosDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoMotivos(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoMotivos", New Object() {usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoMotivos(ByVal asyncResult As System.IAsyncResult) As PC_Motivos.PC_MotivosDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_Motivos.PC_MotivosDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoMotivosAsync(ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoMotivosAsync(usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoMotivosAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoMotivosOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoMotivosOperationCompleted = AddressOf Me.OnObtieneCatalogoMotivosOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoMotivos", New Object() {usuario, IP}, Me.ObtieneCatalogoMotivosOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoMotivosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoMotivosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoMotivosCompleted(Me, New ObtieneCatalogoMotivosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoServicios", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoServicios(ByVal usuario As String, ByVal IP As String) As PC_Servicios.PC_ServiciosDataTable
        Dim results() As Object = Me.Invoke("ObtieneCatalogoServicios", New Object() {usuario, IP})
        Return CType(results(0),PC_Servicios.PC_ServiciosDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoServicios(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoServicios", New Object() {usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoServicios(ByVal asyncResult As System.IAsyncResult) As PC_Servicios.PC_ServiciosDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_Servicios.PC_ServiciosDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoServiciosAsync(ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoServiciosAsync(usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoServiciosAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoServiciosOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoServiciosOperationCompleted = AddressOf Me.OnObtieneCatalogoServiciosOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoServicios", New Object() {usuario, IP}, Me.ObtieneCatalogoServiciosOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoServiciosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoServiciosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoServiciosCompleted(Me, New ObtieneCatalogoServiciosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneCatalogoUsuariosCentrosCostos", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneCatalogoUsuariosCentrosCostos(ByVal usuario As String, ByVal IP As String) As CatalogoUsuarioCentroCosto
        Dim results() As Object = Me.Invoke("ObtieneCatalogoUsuariosCentrosCostos", New Object() {usuario, IP})
        Return CType(results(0),CatalogoUsuarioCentroCosto)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneCatalogoUsuariosCentrosCostos(ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneCatalogoUsuariosCentrosCostos", New Object() {usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneCatalogoUsuariosCentrosCostos(ByVal asyncResult As System.IAsyncResult) As CatalogoUsuarioCentroCosto
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),CatalogoUsuarioCentroCosto)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoUsuariosCentrosCostosAsync(ByVal usuario As String, ByVal IP As String)
        Me.ObtieneCatalogoUsuariosCentrosCostosAsync(usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneCatalogoUsuariosCentrosCostosAsync(ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneCatalogoUsuariosCentrosCostosOperationCompleted Is Nothing) Then
            Me.ObtieneCatalogoUsuariosCentrosCostosOperationCompleted = AddressOf Me.OnObtieneCatalogoUsuariosCentrosCostosOperationCompleted
        End If
        Me.InvokeAsync("ObtieneCatalogoUsuariosCentrosCostos", New Object() {usuario, IP}, Me.ObtieneCatalogoUsuariosCentrosCostosOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneCatalogoUsuariosCentrosCostosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneCatalogoUsuariosCentrosCostosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneCatalogoUsuariosCentrosCostosCompleted(Me, New ObtieneCatalogoUsuariosCentrosCostosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneDomiciliacionesPorPeriodo", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ObtieneDomiciliacionesPorPeriodo(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal Estado As String, ByVal usuario As String, ByVal IP As String) As DomiciliacionesPeriodo.PC_ReporteDomicPeriodoDataTable
        Dim results() As Object = Me.Invoke("ObtieneDomiciliacionesPorPeriodo", New Object() {TipoOperacion, FechaIni, FechaFin, Estado, usuario, IP})
        Return CType(results(0),DomiciliacionesPeriodo.PC_ReporteDomicPeriodoDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginObtieneDomiciliacionesPorPeriodo(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal Estado As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ObtieneDomiciliacionesPorPeriodo", New Object() {TipoOperacion, FechaIni, FechaFin, Estado, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndObtieneDomiciliacionesPorPeriodo(ByVal asyncResult As System.IAsyncResult) As DomiciliacionesPeriodo.PC_ReporteDomicPeriodoDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),DomiciliacionesPeriodo.PC_ReporteDomicPeriodoDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ObtieneDomiciliacionesPorPeriodoAsync(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal Estado As String, ByVal usuario As String, ByVal IP As String)
        Me.ObtieneDomiciliacionesPorPeriodoAsync(TipoOperacion, FechaIni, FechaFin, Estado, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ObtieneDomiciliacionesPorPeriodoAsync(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal Estado As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ObtieneDomiciliacionesPorPeriodoOperationCompleted Is Nothing) Then
            Me.ObtieneDomiciliacionesPorPeriodoOperationCompleted = AddressOf Me.OnObtieneDomiciliacionesPorPeriodoOperationCompleted
        End If
        Me.InvokeAsync("ObtieneDomiciliacionesPorPeriodo", New Object() {TipoOperacion, FechaIni, FechaFin, Estado, usuario, IP}, Me.ObtieneDomiciliacionesPorPeriodoOperationCompleted, userState)
    End Sub
    
    Private Sub OnObtieneDomiciliacionesPorPeriodoOperationCompleted(ByVal arg As Object)
        If (Not (Me.ObtieneDomiciliacionesPorPeriodoCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ObtieneDomiciliacionesPorPeriodoCompleted(Me, New ObtieneDomiciliacionesPorPeriodoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteEstadisticasConcepto", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteEstadisticasConcepto(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String) As EstadisticasporConcepto.PC_ReporteEstadisticasPorConceptoDataTable
        Dim results() As Object = Me.Invoke("ReporteEstadisticasConcepto", New Object() {TipoOperacion, FechaIni, FechaFin, usuario, IP})
        Return CType(results(0),EstadisticasporConcepto.PC_ReporteEstadisticasPorConceptoDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteEstadisticasConcepto(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteEstadisticasConcepto", New Object() {TipoOperacion, FechaIni, FechaFin, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteEstadisticasConcepto(ByVal asyncResult As System.IAsyncResult) As EstadisticasporConcepto.PC_ReporteEstadisticasPorConceptoDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),EstadisticasporConcepto.PC_ReporteEstadisticasPorConceptoDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteEstadisticasConceptoAsync(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String)
        Me.ReporteEstadisticasConceptoAsync(TipoOperacion, FechaIni, FechaFin, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteEstadisticasConceptoAsync(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteEstadisticasConceptoOperationCompleted Is Nothing) Then
            Me.ReporteEstadisticasConceptoOperationCompleted = AddressOf Me.OnReporteEstadisticasConceptoOperationCompleted
        End If
        Me.InvokeAsync("ReporteEstadisticasConcepto", New Object() {TipoOperacion, FechaIni, FechaFin, usuario, IP}, Me.ReporteEstadisticasConceptoOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteEstadisticasConceptoOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteEstadisticasConceptoCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteEstadisticasConceptoCompleted(Me, New ReporteEstadisticasConceptoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteEstadisticasDestinatarios", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteEstadisticasDestinatarios(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String) As EstadisticasDestinatarios.PC_ReporteEstadisticasPorDestinatarioDataTable
        Dim results() As Object = Me.Invoke("ReporteEstadisticasDestinatarios", New Object() {TipoOperacion, FechaIni, FechaFin, usuario, IP})
        Return CType(results(0),EstadisticasDestinatarios.PC_ReporteEstadisticasPorDestinatarioDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteEstadisticasDestinatarios(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteEstadisticasDestinatarios", New Object() {TipoOperacion, FechaIni, FechaFin, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteEstadisticasDestinatarios(ByVal asyncResult As System.IAsyncResult) As EstadisticasDestinatarios.PC_ReporteEstadisticasPorDestinatarioDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),EstadisticasDestinatarios.PC_ReporteEstadisticasPorDestinatarioDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteEstadisticasDestinatariosAsync(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String)
        Me.ReporteEstadisticasDestinatariosAsync(TipoOperacion, FechaIni, FechaFin, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteEstadisticasDestinatariosAsync(ByVal TipoOperacion As String, ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteEstadisticasDestinatariosOperationCompleted Is Nothing) Then
            Me.ReporteEstadisticasDestinatariosOperationCompleted = AddressOf Me.OnReporteEstadisticasDestinatariosOperationCompleted
        End If
        Me.InvokeAsync("ReporteEstadisticasDestinatarios", New Object() {TipoOperacion, FechaIni, FechaFin, usuario, IP}, Me.ReporteEstadisticasDestinatariosOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteEstadisticasDestinatariosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteEstadisticasDestinatariosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteEstadisticasDestinatariosCompleted(Me, New ReporteEstadisticasDestinatariosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteDetalleEventos", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteDetalleEventos(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String) As ReporteDetalleEventos.PC_ReporteDetalleEventosDataTable
        Dim results() As Object = Me.Invoke("ReporteDetalleEventos", New Object() {FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP})
        Return CType(results(0),ReporteDetalleEventos.PC_ReporteDetalleEventosDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteDetalleEventos(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteDetalleEventos", New Object() {FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteDetalleEventos(ByVal asyncResult As System.IAsyncResult) As ReporteDetalleEventos.PC_ReporteDetalleEventosDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),ReporteDetalleEventos.PC_ReporteDetalleEventosDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteDetalleEventosAsync(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String)
        Me.ReporteDetalleEventosAsync(FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteDetalleEventosAsync(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteDetalleEventosOperationCompleted Is Nothing) Then
            Me.ReporteDetalleEventosOperationCompleted = AddressOf Me.OnReporteDetalleEventosOperationCompleted
        End If
        Me.InvokeAsync("ReporteDetalleEventos", New Object() {FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP}, Me.ReporteDetalleEventosOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteDetalleEventosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteDetalleEventosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteDetalleEventosCompleted(Me, New ReporteDetalleEventosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteEventos", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteEventos(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String) As ReporteEventos.PC_ReporteEventosDataTable
        Dim results() As Object = Me.Invoke("ReporteEventos", New Object() {FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP})
        Return CType(results(0),ReporteEventos.PC_ReporteEventosDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteEventos(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteEventos", New Object() {FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteEventos(ByVal asyncResult As System.IAsyncResult) As ReporteEventos.PC_ReporteEventosDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),ReporteEventos.PC_ReporteEventosDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteEventosAsync(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String)
        Me.ReporteEventosAsync(FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteEventosAsync(ByVal FechaIni As Date, ByVal FechaFin As Date, ByVal CodigoCentro As Integer, ByVal Usuario As String, ByVal TipoEvento As Integer, ByVal usuarioconsulta As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteEventosOperationCompleted Is Nothing) Then
            Me.ReporteEventosOperationCompleted = AddressOf Me.OnReporteEventosOperationCompleted
        End If
        Me.InvokeAsync("ReporteEventos", New Object() {FechaIni, FechaFin, CodigoCentro, Usuario, TipoEvento, usuarioconsulta, IP}, Me.ReporteEventosOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteEventosOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteEventosCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteEventosCompleted(Me, New ReporteEventosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteEventosEnvio", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteEventosEnvio(ByVal TipoOperacion As String, ByVal NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String) As ReporteEventosEnvio.PC_ReporteEventosEnvioDataTable
        Dim results() As Object = Me.Invoke("ReporteEventosEnvio", New Object() {TipoOperacion, NumeroEnvio, usuario, IP})
        Return CType(results(0),ReporteEventosEnvio.PC_ReporteEventosEnvioDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteEventosEnvio(ByVal TipoOperacion As String, ByVal NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteEventosEnvio", New Object() {TipoOperacion, NumeroEnvio, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteEventosEnvio(ByVal asyncResult As System.IAsyncResult) As ReporteEventosEnvio.PC_ReporteEventosEnvioDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),ReporteEventosEnvio.PC_ReporteEventosEnvioDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteEventosEnvioAsync(ByVal TipoOperacion As String, ByVal NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String)
        Me.ReporteEventosEnvioAsync(TipoOperacion, NumeroEnvio, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteEventosEnvioAsync(ByVal TipoOperacion As String, ByVal NumeroEnvio As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteEventosEnvioOperationCompleted Is Nothing) Then
            Me.ReporteEventosEnvioOperationCompleted = AddressOf Me.OnReporteEventosEnvioOperationCompleted
        End If
        Me.InvokeAsync("ReporteEventosEnvio", New Object() {TipoOperacion, NumeroEnvio, usuario, IP}, Me.ReporteEventosEnvioOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteEventosEnvioOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteEventosEnvioCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteEventosEnvioCompleted(Me, New ReporteEventosEnvioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteEventosTran", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteEventosTran(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String) As ReporteEventosTran.PC_ReporteEventosTranDataTable
        Dim results() As Object = Me.Invoke("ReporteEventosTran", New Object() {TipoOperacion, NumeroTransaccion, usuario, IP})
        Return CType(results(0),ReporteEventosTran.PC_ReporteEventosTranDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteEventosTran(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteEventosTran", New Object() {TipoOperacion, NumeroTransaccion, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteEventosTran(ByVal asyncResult As System.IAsyncResult) As ReporteEventosTran.PC_ReporteEventosTranDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),ReporteEventosTran.PC_ReporteEventosTranDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteEventosTranAsync(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String)
        Me.ReporteEventosTranAsync(TipoOperacion, NumeroTransaccion, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteEventosTranAsync(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteEventosTranOperationCompleted Is Nothing) Then
            Me.ReporteEventosTranOperationCompleted = AddressOf Me.OnReporteEventosTranOperationCompleted
        End If
        Me.InvokeAsync("ReporteEventosTran", New Object() {TipoOperacion, NumeroTransaccion, usuario, IP}, Me.ReporteEventosTranOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteEventosTranOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteEventosTranCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteEventosTranCompleted(Me, New ReporteEventosTranCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReportePropuestas", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReportePropuestas(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal usuario As String, ByVal IP As String) As PC_ReportePropuestas.PC_ReportePropuestasDataTable
        Dim results() As Object = Me.Invoke("ReportePropuestas", New Object() {TipoOperacion, ProIni, ProFin, Entidad, usuario, IP})
        Return CType(results(0),PC_ReportePropuestas.PC_ReportePropuestasDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReportePropuestas(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReportePropuestas", New Object() {TipoOperacion, ProIni, ProFin, Entidad, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReportePropuestas(ByVal asyncResult As System.IAsyncResult) As PC_ReportePropuestas.PC_ReportePropuestasDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_ReportePropuestas.PC_ReportePropuestasDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReportePropuestasAsync(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal usuario As String, ByVal IP As String)
        Me.ReportePropuestasAsync(TipoOperacion, ProIni, ProFin, Entidad, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReportePropuestasAsync(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReportePropuestasOperationCompleted Is Nothing) Then
            Me.ReportePropuestasOperationCompleted = AddressOf Me.OnReportePropuestasOperationCompleted
        End If
        Me.InvokeAsync("ReportePropuestas", New Object() {TipoOperacion, ProIni, ProFin, Entidad, usuario, IP}, Me.ReportePropuestasOperationCompleted, userState)
    End Sub
    
    Private Sub OnReportePropuestasOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReportePropuestasCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReportePropuestasCompleted(Me, New ReportePropuestasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteDEvoluciones", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteDEvoluciones(ByVal TipoOperacion As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FechaCicloIni As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoServicio As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String) As PC_ReporteDevoluciones.PC_ReporteDevolucionesDataTable
        Dim results() As Object = Me.Invoke("ReporteDEvoluciones", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP})
        Return CType(results(0),PC_ReporteDevoluciones.PC_ReporteDevolucionesDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteDEvoluciones(ByVal TipoOperacion As String, ByVal FechaCicloIni As System.Nullable(Of Date), ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteDEvoluciones", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteDEvoluciones(ByVal asyncResult As System.IAsyncResult) As PC_ReporteDevoluciones.PC_ReporteDevolucionesDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_ReporteDevoluciones.PC_ReporteDevolucionesDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteDEvolucionesAsync(ByVal TipoOperacion As String, ByVal FechaCicloIni As System.Nullable(Of Date), ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String)
        Me.ReporteDEvolucionesAsync(TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteDEvolucionesAsync(ByVal TipoOperacion As String, ByVal FechaCicloIni As System.Nullable(Of Date), ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteDEvolucionesOperationCompleted Is Nothing) Then
            Me.ReporteDEvolucionesOperationCompleted = AddressOf Me.OnReporteDEvolucionesOperationCompleted
        End If
        Me.InvokeAsync("ReporteDEvoluciones", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP}, Me.ReporteDEvolucionesOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteDEvolucionesOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteDEvolucionesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteDEvolucionesCompleted(Me, New ReporteDEvolucionesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteEntidades", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteEntidades(ByVal TipoOperacion As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FechaCicloIni As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoServicio As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String) As PC_ReporteEntidades.PC_ReporteEntidadesDataTable
        Dim results() As Object = Me.Invoke("ReporteEntidades", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP})
        Return CType(results(0),PC_ReporteEntidades.PC_ReporteEntidadesDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteEntidades(ByVal TipoOperacion As String, ByVal FechaCicloIni As System.Nullable(Of Date), ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteEntidades", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteEntidades(ByVal asyncResult As System.IAsyncResult) As PC_ReporteEntidades.PC_ReporteEntidadesDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_ReporteEntidades.PC_ReporteEntidadesDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteEntidadesAsync(ByVal TipoOperacion As String, ByVal FechaCicloIni As System.Nullable(Of Date), ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String)
        Me.ReporteEntidadesAsync(TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteEntidadesAsync(ByVal TipoOperacion As String, ByVal FechaCicloIni As System.Nullable(Of Date), ByVal FechaCicloFin As System.Nullable(Of Date), ByVal Modalidad As String, ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal Entidad As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReporteEntidadesOperationCompleted Is Nothing) Then
            Me.ReporteEntidadesOperationCompleted = AddressOf Me.OnReporteEntidadesOperationCompleted
        End If
        Me.InvokeAsync("ReporteEntidades", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, Modalidad, CodigoServicio, CodigoMoneda, Entidad, usuario, IP}, Me.ReporteEntidadesOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteEntidadesOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteEntidadesCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteEntidadesCompleted(Me, New ReporteEntidadesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReportePropuestasLista", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReportePropuestasLista(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal EstadoEnvioSINPE As String, ByVal usuario As String, ByVal IP As String) As PC_ReportePropuestasListas.PC_ReportePropuestasLista2DataTable
        Dim results() As Object = Me.Invoke("ReportePropuestasLista", New Object() {TipoOperacion, ProIni, ProFin, Entidad, EstadoEnvioSINPE, usuario, IP})
        Return CType(results(0),PC_ReportePropuestasListas.PC_ReportePropuestasLista2DataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReportePropuestasLista(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal EstadoEnvioSINPE As String, ByVal usuario As String, ByVal IP As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReportePropuestasLista", New Object() {TipoOperacion, ProIni, ProFin, Entidad, EstadoEnvioSINPE, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReportePropuestasLista(ByVal asyncResult As System.IAsyncResult) As PC_ReportePropuestasListas.PC_ReportePropuestasLista2DataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_ReportePropuestasListas.PC_ReportePropuestasLista2DataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReportePropuestasListaAsync(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal EstadoEnvioSINPE As String, ByVal usuario As String, ByVal IP As String)
        Me.ReportePropuestasListaAsync(TipoOperacion, ProIni, ProFin, Entidad, EstadoEnvioSINPE, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReportePropuestasListaAsync(ByVal TipoOperacion As String, ByVal ProIni As Integer, ByVal ProFin As Integer, ByVal Entidad As String, ByVal EstadoEnvioSINPE As String, ByVal usuario As String, ByVal IP As String, ByVal userState As Object)
        If (Me.ReportePropuestasListaOperationCompleted Is Nothing) Then
            Me.ReportePropuestasListaOperationCompleted = AddressOf Me.OnReportePropuestasListaOperationCompleted
        End If
        Me.InvokeAsync("ReportePropuestasLista", New Object() {TipoOperacion, ProIni, ProFin, Entidad, EstadoEnvioSINPE, usuario, IP}, Me.ReportePropuestasListaOperationCompleted, userState)
    End Sub
    
    Private Sub OnReportePropuestasListaOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReportePropuestasListaCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReportePropuestasListaCompleted(Me, New ReportePropuestasListaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteTransaccionesTran", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteTransaccionesTran(ByVal TipoOperacion As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal NumeroTransaccionIni As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal NumeroTransaccionFin As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoCentro As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoConcepto As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoMoneda As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, ByVal UsuarioRegistra As String, ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String) As PC_ReporteTransaccionesTran.PC_ReporteTransaccionesTranDataTable
        Dim results() As Object = Me.Invoke("ReporteTransaccionesTran", New Object() {TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP})
        Return CType(results(0),PC_ReporteTransaccionesTran.PC_ReporteTransaccionesTranDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteTransaccionesTran( _
                ByVal TipoOperacion As String,  _
                ByVal NumeroTransaccionIni As System.Nullable(Of Integer),  _
                ByVal NumeroTransaccionFin As System.Nullable(Of Integer),  _
                ByVal CodigoCentro As System.Nullable(Of Integer),  _
                ByVal CodigoConcepto As System.Nullable(Of Integer),  _
                ByVal CodigoMoneda As System.Nullable(Of Integer),  _
                ByVal CodigoServicio As System.Nullable(Of Integer),  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal UsuarioRegistra As String,  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal callback As System.AsyncCallback,  _
                ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteTransaccionesTran", New Object() {TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteTransaccionesTran(ByVal asyncResult As System.IAsyncResult) As PC_ReporteTransaccionesTran.PC_ReporteTransaccionesTranDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_ReporteTransaccionesTran.PC_ReporteTransaccionesTranDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesTranAsync(ByVal TipoOperacion As String, ByVal NumeroTransaccionIni As System.Nullable(Of Integer), ByVal NumeroTransaccionFin As System.Nullable(Of Integer), ByVal CodigoCentro As System.Nullable(Of Integer), ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, ByVal UsuarioRegistra As String, ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String)
        Me.ReporteTransaccionesTranAsync(TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesTranAsync( _
                ByVal TipoOperacion As String,  _
                ByVal NumeroTransaccionIni As System.Nullable(Of Integer),  _
                ByVal NumeroTransaccionFin As System.Nullable(Of Integer),  _
                ByVal CodigoCentro As System.Nullable(Of Integer),  _
                ByVal CodigoConcepto As System.Nullable(Of Integer),  _
                ByVal CodigoMoneda As System.Nullable(Of Integer),  _
                ByVal CodigoServicio As System.Nullable(Of Integer),  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal UsuarioRegistra As String,  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal userState As Object)
        If (Me.ReporteTransaccionesTranOperationCompleted Is Nothing) Then
            Me.ReporteTransaccionesTranOperationCompleted = AddressOf Me.OnReporteTransaccionesTranOperationCompleted
        End If
        Me.InvokeAsync("ReporteTransaccionesTran", New Object() {TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP}, Me.ReporteTransaccionesTranOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteTransaccionesTranOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteTransaccionesTranCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteTransaccionesTranCompleted(Me, New ReporteTransaccionesTranCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteTransaccionesFec", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteTransaccionesFec(ByVal TipoOperacion As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FechaCicloIni As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal FechaCicloFin As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoCentro As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoConcepto As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoMoneda As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal NumeroEnvio As System.Nullable(Of Integer), ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String) As ReporteTransaccionesFec.PC_ReporteTransaccionesFecDataTable
        Dim results() As Object = Me.Invoke("ReporteTransaccionesFec", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP})
        Return CType(results(0),ReporteTransaccionesFec.PC_ReporteTransaccionesFecDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteTransaccionesFec( _
                ByVal TipoOperacion As String,  _
                ByVal FechaCicloIni As System.Nullable(Of Date),  _
                ByVal FechaCicloFin As System.Nullable(Of Date),  _
                ByVal CodigoCentro As System.Nullable(Of Integer),  _
                ByVal CodigoConcepto As System.Nullable(Of Integer),  _
                ByVal CodigoMoneda As System.Nullable(Of Integer),  _
                ByVal CodigoServicio As System.Nullable(Of Integer),  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal NumeroEnvio As System.Nullable(Of Integer),  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal callback As System.AsyncCallback,  _
                ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteTransaccionesFec", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteTransaccionesFec(ByVal asyncResult As System.IAsyncResult) As ReporteTransaccionesFec.PC_ReporteTransaccionesFecDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),ReporteTransaccionesFec.PC_ReporteTransaccionesFecDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesFecAsync(ByVal TipoOperacion As String, ByVal FechaCicloIni As System.Nullable(Of Date), ByVal FechaCicloFin As System.Nullable(Of Date), ByVal CodigoCentro As System.Nullable(Of Integer), ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, ByVal NumeroEnvio As System.Nullable(Of Integer), ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String)
        Me.ReporteTransaccionesFecAsync(TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesFecAsync( _
                ByVal TipoOperacion As String,  _
                ByVal FechaCicloIni As System.Nullable(Of Date),  _
                ByVal FechaCicloFin As System.Nullable(Of Date),  _
                ByVal CodigoCentro As System.Nullable(Of Integer),  _
                ByVal CodigoConcepto As System.Nullable(Of Integer),  _
                ByVal CodigoMoneda As System.Nullable(Of Integer),  _
                ByVal CodigoServicio As System.Nullable(Of Integer),  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal NumeroEnvio As System.Nullable(Of Integer),  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal userState As Object)
        If (Me.ReporteTransaccionesFecOperationCompleted Is Nothing) Then
            Me.ReporteTransaccionesFecOperationCompleted = AddressOf Me.OnReporteTransaccionesFecOperationCompleted
        End If
        Me.InvokeAsync("ReporteTransaccionesFec", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP}, Me.ReporteTransaccionesFecOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteTransaccionesFecOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteTransaccionesFecCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteTransaccionesFecCompleted(Me, New ReporteTransaccionesFecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteTransaccionesFec2", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteTransaccionesFec2(ByVal TipoOperacion As String, ByVal FechaCicloIni As Date, ByVal FechaCicloFin As Date, ByVal CodigoCentro As Integer, ByVal CodigoConcepto As Integer, ByVal CodigoMoneda As Integer, ByVal CodigoServicio As Integer, ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, ByVal NumeroEnvio As Integer, ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String) As ReporteTransaccionesFec2.PC_ReporteTransaccionesFec2DataTable
        Dim results() As Object = Me.Invoke("ReporteTransaccionesFec2", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP})
        Return CType(results(0),ReporteTransaccionesFec2.PC_ReporteTransaccionesFec2DataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteTransaccionesFec2( _
                ByVal TipoOperacion As String,  _
                ByVal FechaCicloIni As Date,  _
                ByVal FechaCicloFin As Date,  _
                ByVal CodigoCentro As Integer,  _
                ByVal CodigoConcepto As Integer,  _
                ByVal CodigoMoneda As Integer,  _
                ByVal CodigoServicio As Integer,  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal NumeroEnvio As Integer,  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal callback As System.AsyncCallback,  _
                ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteTransaccionesFec2", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteTransaccionesFec2(ByVal asyncResult As System.IAsyncResult) As ReporteTransaccionesFec2.PC_ReporteTransaccionesFec2DataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),ReporteTransaccionesFec2.PC_ReporteTransaccionesFec2DataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesFec2Async(ByVal TipoOperacion As String, ByVal FechaCicloIni As Date, ByVal FechaCicloFin As Date, ByVal CodigoCentro As Integer, ByVal CodigoConcepto As Integer, ByVal CodigoMoneda As Integer, ByVal CodigoServicio As Integer, ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, ByVal NumeroEnvio As Integer, ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String)
        Me.ReporteTransaccionesFec2Async(TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesFec2Async( _
                ByVal TipoOperacion As String,  _
                ByVal FechaCicloIni As Date,  _
                ByVal FechaCicloFin As Date,  _
                ByVal CodigoCentro As Integer,  _
                ByVal CodigoConcepto As Integer,  _
                ByVal CodigoMoneda As Integer,  _
                ByVal CodigoServicio As Integer,  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal NumeroEnvio As Integer,  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal userState As Object)
        If (Me.ReporteTransaccionesFec2OperationCompleted Is Nothing) Then
            Me.ReporteTransaccionesFec2OperationCompleted = AddressOf Me.OnReporteTransaccionesFec2OperationCompleted
        End If
        Me.InvokeAsync("ReporteTransaccionesFec2", New Object() {TipoOperacion, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, NumeroEnvio, Cuenta, usuario, IP}, Me.ReporteTransaccionesFec2OperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteTransaccionesFec2OperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteTransaccionesFec2CompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteTransaccionesFec2Completed(Me, New ReporteTransaccionesFec2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteTransaccionesPorNumero", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteTransaccionesPorNumero(ByVal TipoOperacion As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal NumeroTransaccionIni As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal NumeroTransaccionFin As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoCentro As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoConcepto As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoMoneda As System.Nullable(Of Integer), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, ByVal UsuarioRegistra As String, ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String) As PC_ReporteTransaccionesPorNumero.PC_ReporteTransaccionesPorNumeroDataTable
        Dim results() As Object = Me.Invoke("ReporteTransaccionesPorNumero", New Object() {TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP})
        Return CType(results(0),PC_ReporteTransaccionesPorNumero.PC_ReporteTransaccionesPorNumeroDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteTransaccionesPorNumero( _
                ByVal TipoOperacion As String,  _
                ByVal NumeroTransaccionIni As System.Nullable(Of Integer),  _
                ByVal NumeroTransaccionFin As System.Nullable(Of Integer),  _
                ByVal CodigoCentro As System.Nullable(Of Integer),  _
                ByVal CodigoConcepto As System.Nullable(Of Integer),  _
                ByVal CodigoMoneda As System.Nullable(Of Integer),  _
                ByVal CodigoServicio As System.Nullable(Of Integer),  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal UsuarioRegistra As String,  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal callback As System.AsyncCallback,  _
                ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteTransaccionesPorNumero", New Object() {TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteTransaccionesPorNumero(ByVal asyncResult As System.IAsyncResult) As PC_ReporteTransaccionesPorNumero.PC_ReporteTransaccionesPorNumeroDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_ReporteTransaccionesPorNumero.PC_ReporteTransaccionesPorNumeroDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesPorNumeroAsync(ByVal TipoOperacion As String, ByVal NumeroTransaccionIni As System.Nullable(Of Integer), ByVal NumeroTransaccionFin As System.Nullable(Of Integer), ByVal CodigoCentro As System.Nullable(Of Integer), ByVal CodigoConcepto As System.Nullable(Of Integer), ByVal CodigoMoneda As System.Nullable(Of Integer), ByVal CodigoServicio As System.Nullable(Of Integer), ByVal CedulaPersona As String, ByVal Estado As String, ByVal Modalidad As String, ByVal Entidad As String, ByVal UsuarioRegistra As String, ByVal Cuenta As String, ByVal usuario As String, ByVal IP As String)
        Me.ReporteTransaccionesPorNumeroAsync(TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesPorNumeroAsync( _
                ByVal TipoOperacion As String,  _
                ByVal NumeroTransaccionIni As System.Nullable(Of Integer),  _
                ByVal NumeroTransaccionFin As System.Nullable(Of Integer),  _
                ByVal CodigoCentro As System.Nullable(Of Integer),  _
                ByVal CodigoConcepto As System.Nullable(Of Integer),  _
                ByVal CodigoMoneda As System.Nullable(Of Integer),  _
                ByVal CodigoServicio As System.Nullable(Of Integer),  _
                ByVal CedulaPersona As String,  _
                ByVal Estado As String,  _
                ByVal Modalidad As String,  _
                ByVal Entidad As String,  _
                ByVal UsuarioRegistra As String,  _
                ByVal Cuenta As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal userState As Object)
        If (Me.ReporteTransaccionesPorNumeroOperationCompleted Is Nothing) Then
            Me.ReporteTransaccionesPorNumeroOperationCompleted = AddressOf Me.OnReporteTransaccionesPorNumeroOperationCompleted
        End If
        Me.InvokeAsync("ReporteTransaccionesPorNumero", New Object() {TipoOperacion, NumeroTransaccionIni, NumeroTransaccionFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Estado, Modalidad, Entidad, UsuarioRegistra, Cuenta, usuario, IP}, Me.ReporteTransaccionesPorNumeroOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteTransaccionesPorNumeroOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteTransaccionesPorNumeroCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteTransaccionesPorNumeroCompleted(Me, New ReporteTransaccionesPorNumeroCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ReporteTransaccionesSinFechaCiclo", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
    Public Function ReporteTransaccionesSinFechaCiclo(ByVal TipoOperacion As String, ByVal Modalidad As String, ByVal NumeroTransaccionIni As Integer, ByVal NumeroTransaccionFin As Integer, ByVal FechaCicloIni As Date, ByVal FechaCicloFin As Date, ByVal CodigoCentro As Integer, ByVal CodigoConcepto As Integer, ByVal CodigoMoneda As Integer, ByVal CodigoServicio As Integer, ByVal CedulaPersona As String, ByVal Entidad As String, ByVal Estado As String, ByVal usuario As String, ByVal IP As String) As PC_ReporteTransaccionesSinFechaCiclo.PC_ReporteTransaccionesSinFechaCicloDataTable
        Dim results() As Object = Me.Invoke("ReporteTransaccionesSinFechaCiclo", New Object() {TipoOperacion, Modalidad, NumeroTransaccionIni, NumeroTransaccionFin, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Entidad, Estado, usuario, IP})
        Return CType(results(0),PC_ReporteTransaccionesSinFechaCiclo.PC_ReporteTransaccionesSinFechaCicloDataTable)
    End Function
    
    '''<remarks/>
    Public Function BeginReporteTransaccionesSinFechaCiclo( _
                ByVal TipoOperacion As String,  _
                ByVal Modalidad As String,  _
                ByVal NumeroTransaccionIni As Integer,  _
                ByVal NumeroTransaccionFin As Integer,  _
                ByVal FechaCicloIni As Date,  _
                ByVal FechaCicloFin As Date,  _
                ByVal CodigoCentro As Integer,  _
                ByVal CodigoConcepto As Integer,  _
                ByVal CodigoMoneda As Integer,  _
                ByVal CodigoServicio As Integer,  _
                ByVal CedulaPersona As String,  _
                ByVal Entidad As String,  _
                ByVal Estado As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal callback As System.AsyncCallback,  _
                ByVal asyncState As Object) As System.IAsyncResult
        Return Me.BeginInvoke("ReporteTransaccionesSinFechaCiclo", New Object() {TipoOperacion, Modalidad, NumeroTransaccionIni, NumeroTransaccionFin, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Entidad, Estado, usuario, IP}, callback, asyncState)
    End Function
    
    '''<remarks/>
    Public Function EndReporteTransaccionesSinFechaCiclo(ByVal asyncResult As System.IAsyncResult) As PC_ReporteTransaccionesSinFechaCiclo.PC_ReporteTransaccionesSinFechaCicloDataTable
        Dim results() As Object = Me.EndInvoke(asyncResult)
        Return CType(results(0),PC_ReporteTransaccionesSinFechaCiclo.PC_ReporteTransaccionesSinFechaCicloDataTable)
    End Function
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesSinFechaCicloAsync(ByVal TipoOperacion As String, ByVal Modalidad As String, ByVal NumeroTransaccionIni As Integer, ByVal NumeroTransaccionFin As Integer, ByVal FechaCicloIni As Date, ByVal FechaCicloFin As Date, ByVal CodigoCentro As Integer, ByVal CodigoConcepto As Integer, ByVal CodigoMoneda As Integer, ByVal CodigoServicio As Integer, ByVal CedulaPersona As String, ByVal Entidad As String, ByVal Estado As String, ByVal usuario As String, ByVal IP As String)
        Me.ReporteTransaccionesSinFechaCicloAsync(TipoOperacion, Modalidad, NumeroTransaccionIni, NumeroTransaccionFin, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Entidad, Estado, usuario, IP, Nothing)
    End Sub
    
    '''<remarks/>
    Public Overloads Sub ReporteTransaccionesSinFechaCicloAsync( _
                ByVal TipoOperacion As String,  _
                ByVal Modalidad As String,  _
                ByVal NumeroTransaccionIni As Integer,  _
                ByVal NumeroTransaccionFin As Integer,  _
                ByVal FechaCicloIni As Date,  _
                ByVal FechaCicloFin As Date,  _
                ByVal CodigoCentro As Integer,  _
                ByVal CodigoConcepto As Integer,  _
                ByVal CodigoMoneda As Integer,  _
                ByVal CodigoServicio As Integer,  _
                ByVal CedulaPersona As String,  _
                ByVal Entidad As String,  _
                ByVal Estado As String,  _
                ByVal usuario As String,  _
                ByVal IP As String,  _
                ByVal userState As Object)
        If (Me.ReporteTransaccionesSinFechaCicloOperationCompleted Is Nothing) Then
            Me.ReporteTransaccionesSinFechaCicloOperationCompleted = AddressOf Me.OnReporteTransaccionesSinFechaCicloOperationCompleted
        End If
        Me.InvokeAsync("ReporteTransaccionesSinFechaCiclo", New Object() {TipoOperacion, Modalidad, NumeroTransaccionIni, NumeroTransaccionFin, FechaCicloIni, FechaCicloFin, CodigoCentro, CodigoConcepto, CodigoMoneda, CodigoServicio, CedulaPersona, Entidad, Estado, usuario, IP}, Me.ReporteTransaccionesSinFechaCicloOperationCompleted, userState)
    End Sub
    
    Private Sub OnReporteTransaccionesSinFechaCicloOperationCompleted(ByVal arg As Object)
        If (Not (Me.ReporteTransaccionesSinFechaCicloCompletedEvent) Is Nothing) Then
            Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
            RaiseEvent ReporteTransaccionesSinFechaCicloCompleted(Me, New ReporteTransaccionesSinFechaCicloCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
        End If
    End Sub
    
    '''<remarks/>
    Public Shadows Sub CancelAsync(ByVal userState As Object)
        MyBase.CancelAsync(userState)
    End Sub
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Autorizaciones_Concepto"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Autorizaciones_Concepto
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteAutorizacionesBasico As PC_ReporteAutorizacionesBasicoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteAutorizacionesBasico")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteAutorizacionesBasicoDataTable(ds.Tables("PC_ReporteAutorizacionesBasico")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteAutorizacionesBasico() As PC_ReporteAutorizacionesBasicoDataTable
        Get
            Return Me.tablePC_ReporteAutorizacionesBasico
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Autorizaciones_Concepto = CType(MyBase.Clone,Autorizaciones_Concepto)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteAutorizacionesBasico")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteAutorizacionesBasicoDataTable(ds.Tables("PC_ReporteAutorizacionesBasico")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteAutorizacionesBasico = CType(MyBase.Tables("PC_ReporteAutorizacionesBasico"),PC_ReporteAutorizacionesBasicoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteAutorizacionesBasico) Is Nothing) Then
                Me.tablePC_ReporteAutorizacionesBasico.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Autorizaciones_Concepto"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/Autorizaciones_ConceptoBasico.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteAutorizacionesBasico = New PC_ReporteAutorizacionesBasicoDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteAutorizacionesBasico)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteAutorizacionesBasico() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Autorizaciones_Concepto = New Autorizaciones_Concepto
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteAutorizacionesBasicoRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteAutorizacionesBasicoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteAutorizacionesBasicoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columntipooperacion As Global.System.Data.DataColumn
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnMontoDesde As Global.System.Data.DataColumn
        
        Private columnMontoHasta As Global.System.Data.DataColumn
        
        Private columnFechaDesde As Global.System.Data.DataColumn
        
        Private columnFechaHasta As Global.System.Data.DataColumn
        
        Private columnEstadoOrden As Global.System.Data.DataColumn
        
        Private columnCodigoBanco As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnIdCanal As Global.System.Data.DataColumn
        
        Private columnNombreCanal As Global.System.Data.DataColumn
        
        Private columnNombreEntidadOrigen As Global.System.Data.DataColumn
        
        Private columnEntidadOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreClienteOrigen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteAutorizacionesBasico"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipooperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipooperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEntidadOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEntidadOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntidadOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntidadOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteAutorizacionesBasicoRow
            Get
                Return CType(Me.Rows(index),PC_ReporteAutorizacionesBasicoRow)
            End Get
        End Property
        
        Public Event PC_ReporteAutorizacionesBasicoRowChanging As PC_ReporteAutorizacionesBasicoRowChangeEventHandler
        
        Public Event PC_ReporteAutorizacionesBasicoRowChanged As PC_ReporteAutorizacionesBasicoRowChangeEventHandler
        
        Public Event PC_ReporteAutorizacionesBasicoRowDeleting As PC_ReporteAutorizacionesBasicoRowChangeEventHandler
        
        Public Event PC_ReporteAutorizacionesBasicoRowDeleted As PC_ReporteAutorizacionesBasicoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteAutorizacionesBasicoRow(ByVal row As PC_ReporteAutorizacionesBasicoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteAutorizacionesBasicoRow( _
                    ByVal tipooperacion As String,  _
                    ByVal NumeroOrden As Integer,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal MontoDesde As Decimal,  _
                    ByVal MontoHasta As Decimal,  _
                    ByVal FechaDesde As Date,  _
                    ByVal FechaHasta As Date,  _
                    ByVal EstadoOrden As String,  _
                    ByVal CodigoBanco As Integer,  _
                    ByVal NombreConcepto As String,  _
                    ByVal NombreCanal As String,  _
                    ByVal NombreEntidadOrigen As String,  _
                    ByVal EntidadOrigen As Integer,  _
                    ByVal CuentaClienteOrigen As String,  _
                    ByVal UsuarioRegistra As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal NombreClienteOrigen As String) As PC_ReporteAutorizacionesBasicoRow
            Dim rowPC_ReporteAutorizacionesBasicoRow As PC_ReporteAutorizacionesBasicoRow = CType(Me.NewRow,PC_ReporteAutorizacionesBasicoRow)
            Dim columnValuesArray() As Object = New Object() {tipooperacion, NumeroOrden, CedulaPersona, NombrePersona, CuentaCliente, MontoDesde, MontoHasta, FechaDesde, FechaHasta, EstadoOrden, CodigoBanco, NombreConcepto, Nothing, NombreCanal, NombreEntidadOrigen, EntidadOrigen, CuentaClienteOrigen, UsuarioRegistra, CedulaClienteOrigen, NombreClienteOrigen}
            rowPC_ReporteAutorizacionesBasicoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteAutorizacionesBasicoRow)
            Return rowPC_ReporteAutorizacionesBasicoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBytipooperacionNumeroOrden(ByVal tipooperacion As String, ByVal NumeroOrden As Integer) As PC_ReporteAutorizacionesBasicoRow
            Return CType(Me.Rows.Find(New Object() {tipooperacion, NumeroOrden}),PC_ReporteAutorizacionesBasicoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteAutorizacionesBasicoDataTable = CType(MyBase.Clone,PC_ReporteAutorizacionesBasicoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteAutorizacionesBasicoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntipooperacion = MyBase.Columns("tipooperacion")
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnMontoDesde = MyBase.Columns("MontoDesde")
            Me.columnMontoHasta = MyBase.Columns("MontoHasta")
            Me.columnFechaDesde = MyBase.Columns("FechaDesde")
            Me.columnFechaHasta = MyBase.Columns("FechaHasta")
            Me.columnEstadoOrden = MyBase.Columns("EstadoOrden")
            Me.columnCodigoBanco = MyBase.Columns("CodigoBanco")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnIdCanal = MyBase.Columns("IdCanal")
            Me.columnNombreCanal = MyBase.Columns("NombreCanal")
            Me.columnNombreEntidadOrigen = MyBase.Columns("NombreEntidadOrigen")
            Me.columnEntidadOrigen = MyBase.Columns("EntidadOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnNombreClienteOrigen = MyBase.Columns("NombreClienteOrigen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntipooperacion = New Global.System.Data.DataColumn("tipooperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipooperacion)
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnMontoDesde = New Global.System.Data.DataColumn("MontoDesde", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDesde)
            Me.columnMontoHasta = New Global.System.Data.DataColumn("MontoHasta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoHasta)
            Me.columnFechaDesde = New Global.System.Data.DataColumn("FechaDesde", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDesde)
            Me.columnFechaHasta = New Global.System.Data.DataColumn("FechaHasta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaHasta)
            Me.columnEstadoOrden = New Global.System.Data.DataColumn("EstadoOrden", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoOrden)
            Me.columnCodigoBanco = New Global.System.Data.DataColumn("CodigoBanco", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoBanco)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnIdCanal = New Global.System.Data.DataColumn("IdCanal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCanal)
            Me.columnNombreCanal = New Global.System.Data.DataColumn("NombreCanal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCanal)
            Me.columnNombreEntidadOrigen = New Global.System.Data.DataColumn("NombreEntidadOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEntidadOrigen)
            Me.columnEntidadOrigen = New Global.System.Data.DataColumn("EntidadOrigen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntidadOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnNombreClienteOrigen = New Global.System.Data.DataColumn("NombreClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreClienteOrigen)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columntipooperacion, Me.columnNumeroOrden}, true))
            Me.columntipooperacion.AllowDBNull = false
            Me.columntipooperacion.MaxLength = 1
            Me.columnNumeroOrden.AllowDBNull = false
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnMontoDesde.AllowDBNull = false
            Me.columnMontoHasta.AllowDBNull = false
            Me.columnFechaDesde.AllowDBNull = false
            Me.columnFechaHasta.AllowDBNull = false
            Me.columnEstadoOrden.AllowDBNull = false
            Me.columnEstadoOrden.MaxLength = 1
            Me.columnCodigoBanco.ReadOnly = true
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnIdCanal.AutoIncrement = true
            Me.columnIdCanal.AutoIncrementSeed = -1
            Me.columnIdCanal.AutoIncrementStep = -1
            Me.columnIdCanal.ReadOnly = true
            Me.columnNombreCanal.MaxLength = 255
            Me.columnNombreEntidadOrigen.MaxLength = 100
            Me.columnCuentaClienteOrigen.ReadOnly = true
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnNombreClienteOrigen.ReadOnly = true
            Me.columnNombreClienteOrigen.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteAutorizacionesBasicoRow() As PC_ReporteAutorizacionesBasicoRow
            Return CType(Me.NewRow,PC_ReporteAutorizacionesBasicoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteAutorizacionesBasicoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteAutorizacionesBasicoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteAutorizacionesBasicoRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesBasicoRowChanged(Me, New PC_ReporteAutorizacionesBasicoRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesBasicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteAutorizacionesBasicoRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesBasicoRowChanging(Me, New PC_ReporteAutorizacionesBasicoRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesBasicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteAutorizacionesBasicoRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesBasicoRowDeleted(Me, New PC_ReporteAutorizacionesBasicoRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesBasicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteAutorizacionesBasicoRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesBasicoRowDeleting(Me, New PC_ReporteAutorizacionesBasicoRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesBasicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteAutorizacionesBasicoRow(ByVal row As PC_ReporteAutorizacionesBasicoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Autorizaciones_Concepto = New Autorizaciones_Concepto
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteAutorizacionesBasicoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteAutorizacionesBasicoRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteAutorizacionesBasico As PC_ReporteAutorizacionesBasicoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteAutorizacionesBasico = CType(Me.Table,PC_ReporteAutorizacionesBasicoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipooperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.tipooperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.tipooperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.NumeroOrdenColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDesde() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.MontoDesdeColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.MontoDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoHasta() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.MontoHastaColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.MontoHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDesde() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.FechaDesdeColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.FechaDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaHasta() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.FechaHastaColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.FechaHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoOrden() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.EstadoOrdenColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.EstadoOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoBanco() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.CodigoBancoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoBanco' de la tabla 'PC_ReporteAutorizacionesBasico'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.CodigoBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.NombreConceptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreConcepto' de la tabla 'PC_ReporteAutorizacionesBasi"& _ 
                            "co' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCanal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.IdCanalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdCanal' de la tabla 'PC_ReporteAutorizacionesBasico' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.IdCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCanal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.NombreCanalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCanal' de la tabla 'PC_ReporteAutorizacionesBasico'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.NombreCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEntidadOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.NombreEntidadOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEntidadOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "sBasico' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.NombreEntidadOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntidadOrigen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.EntidadOrigenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EntidadOrigen' de la tabla 'PC_ReporteAutorizacionesBasic"& _ 
                            "o' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.EntidadOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "sBasico' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "sBasico' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizacionesBasico.NombreClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreClienteOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "sBasico' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizacionesBasico.NombreClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoBancoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.CodigoBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoBancoNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.CodigoBancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreConceptoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.NombreConceptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreConceptoNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.NombreConceptoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.IdCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCanalNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.IdCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.NombreCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCanalNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.NombreCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEntidadOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.NombreEntidadOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEntidadOrigenNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.NombreEntidadOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntidadOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.EntidadOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntidadOrigenNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.EntidadOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizacionesBasico.NombreClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteOrigenNull()
            Me(Me.tablePC_ReporteAutorizacionesBasico.NombreClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteAutorizacionesBasicoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteAutorizacionesBasicoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteAutorizacionesBasicoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteAutorizacionesBasicoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Autorizaciones_ConceptoBanco"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Autorizaciones_ConceptoBanco
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteAutorizaciones As PC_ReporteAutorizacionesDataTable
    
    Private tablePC_Bancos As PC_BancosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteAutorizaciones")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteAutorizacionesDataTable(ds.Tables("PC_ReporteAutorizaciones")))
            End If
            If (Not (ds.Tables("PC_Bancos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_BancosDataTable(ds.Tables("PC_Bancos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteAutorizaciones() As PC_ReporteAutorizacionesDataTable
        Get
            Return Me.tablePC_ReporteAutorizaciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_Bancos() As PC_BancosDataTable
        Get
            Return Me.tablePC_Bancos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Autorizaciones_ConceptoBanco = CType(MyBase.Clone,Autorizaciones_ConceptoBanco)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteAutorizaciones")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteAutorizacionesDataTable(ds.Tables("PC_ReporteAutorizaciones")))
            End If
            If (Not (ds.Tables("PC_Bancos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_BancosDataTable(ds.Tables("PC_Bancos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteAutorizaciones = CType(MyBase.Tables("PC_ReporteAutorizaciones"),PC_ReporteAutorizacionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteAutorizaciones) Is Nothing) Then
                Me.tablePC_ReporteAutorizaciones.InitVars
            End If
        End If
        Me.tablePC_Bancos = CType(MyBase.Tables("PC_Bancos"),PC_BancosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_Bancos) Is Nothing) Then
                Me.tablePC_Bancos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Autorizaciones_ConceptoBanco"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/Autorizaciones_Concepto.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteAutorizaciones = New PC_ReporteAutorizacionesDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteAutorizaciones)
        Me.tablePC_Bancos = New PC_BancosDataTable
        MyBase.Tables.Add(Me.tablePC_Bancos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteAutorizaciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_Bancos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Autorizaciones_ConceptoBanco = New Autorizaciones_ConceptoBanco
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteAutorizacionesRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteAutorizacionesRowChangeEvent)
    
    Public Delegate Sub PC_BancosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_BancosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteAutorizacionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columntipooperacion As Global.System.Data.DataColumn
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnMontoDesde As Global.System.Data.DataColumn
        
        Private columnMontoHasta As Global.System.Data.DataColumn
        
        Private columnFechaDesde As Global.System.Data.DataColumn
        
        Private columnFechaHasta As Global.System.Data.DataColumn
        
        Private columnEstadoOrden As Global.System.Data.DataColumn
        
        Private columnCodigoBanco As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnIdCanal As Global.System.Data.DataColumn
        
        Private columnNombreCanal As Global.System.Data.DataColumn
        
        Private columnNombreEntidadOrigen As Global.System.Data.DataColumn
        
        Private columnEntidadOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreClienteOrigen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteAutorizaciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipooperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipooperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEntidadOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEntidadOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntidadOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntidadOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteAutorizacionesRow
            Get
                Return CType(Me.Rows(index),PC_ReporteAutorizacionesRow)
            End Get
        End Property
        
        Public Event PC_ReporteAutorizacionesRowChanging As PC_ReporteAutorizacionesRowChangeEventHandler
        
        Public Event PC_ReporteAutorizacionesRowChanged As PC_ReporteAutorizacionesRowChangeEventHandler
        
        Public Event PC_ReporteAutorizacionesRowDeleting As PC_ReporteAutorizacionesRowChangeEventHandler
        
        Public Event PC_ReporteAutorizacionesRowDeleted As PC_ReporteAutorizacionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteAutorizacionesRow(ByVal row As PC_ReporteAutorizacionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteAutorizacionesRow( _
                    ByVal tipooperacion As String,  _
                    ByVal NumeroOrden As Integer,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal MontoDesde As Decimal,  _
                    ByVal MontoHasta As Decimal,  _
                    ByVal FechaDesde As Date,  _
                    ByVal FechaHasta As Date,  _
                    ByVal EstadoOrden As String,  _
                    ByVal CodigoBanco As Integer,  _
                    ByVal NombreConcepto As String,  _
                    ByVal NombreCanal As String,  _
                    ByVal NombreEntidadOrigen As String,  _
                    ByVal EntidadOrigen As Integer,  _
                    ByVal CuentaClienteOrigen As String,  _
                    ByVal UsuarioRegistra As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal NombreClienteOrigen As String) As PC_ReporteAutorizacionesRow
            Dim rowPC_ReporteAutorizacionesRow As PC_ReporteAutorizacionesRow = CType(Me.NewRow,PC_ReporteAutorizacionesRow)
            Dim columnValuesArray() As Object = New Object() {tipooperacion, NumeroOrden, CedulaPersona, NombrePersona, CuentaCliente, MontoDesde, MontoHasta, FechaDesde, FechaHasta, EstadoOrden, CodigoBanco, NombreConcepto, Nothing, NombreCanal, NombreEntidadOrigen, EntidadOrigen, CuentaClienteOrigen, UsuarioRegistra, CedulaClienteOrigen, NombreClienteOrigen}
            rowPC_ReporteAutorizacionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteAutorizacionesRow)
            Return rowPC_ReporteAutorizacionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBytipooperacionNumeroOrden(ByVal tipooperacion As String, ByVal NumeroOrden As Integer) As PC_ReporteAutorizacionesRow
            Return CType(Me.Rows.Find(New Object() {tipooperacion, NumeroOrden}),PC_ReporteAutorizacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteAutorizacionesDataTable = CType(MyBase.Clone,PC_ReporteAutorizacionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteAutorizacionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntipooperacion = MyBase.Columns("tipooperacion")
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnMontoDesde = MyBase.Columns("MontoDesde")
            Me.columnMontoHasta = MyBase.Columns("MontoHasta")
            Me.columnFechaDesde = MyBase.Columns("FechaDesde")
            Me.columnFechaHasta = MyBase.Columns("FechaHasta")
            Me.columnEstadoOrden = MyBase.Columns("EstadoOrden")
            Me.columnCodigoBanco = MyBase.Columns("CodigoBanco")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnIdCanal = MyBase.Columns("IdCanal")
            Me.columnNombreCanal = MyBase.Columns("NombreCanal")
            Me.columnNombreEntidadOrigen = MyBase.Columns("NombreEntidadOrigen")
            Me.columnEntidadOrigen = MyBase.Columns("EntidadOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnNombreClienteOrigen = MyBase.Columns("NombreClienteOrigen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntipooperacion = New Global.System.Data.DataColumn("tipooperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipooperacion)
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnMontoDesde = New Global.System.Data.DataColumn("MontoDesde", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDesde)
            Me.columnMontoHasta = New Global.System.Data.DataColumn("MontoHasta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoHasta)
            Me.columnFechaDesde = New Global.System.Data.DataColumn("FechaDesde", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDesde)
            Me.columnFechaHasta = New Global.System.Data.DataColumn("FechaHasta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaHasta)
            Me.columnEstadoOrden = New Global.System.Data.DataColumn("EstadoOrden", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoOrden)
            Me.columnCodigoBanco = New Global.System.Data.DataColumn("CodigoBanco", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoBanco)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnIdCanal = New Global.System.Data.DataColumn("IdCanal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCanal)
            Me.columnNombreCanal = New Global.System.Data.DataColumn("NombreCanal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCanal)
            Me.columnNombreEntidadOrigen = New Global.System.Data.DataColumn("NombreEntidadOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEntidadOrigen)
            Me.columnEntidadOrigen = New Global.System.Data.DataColumn("EntidadOrigen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntidadOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnNombreClienteOrigen = New Global.System.Data.DataColumn("NombreClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreClienteOrigen)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columntipooperacion, Me.columnNumeroOrden}, true))
            Me.columntipooperacion.AllowDBNull = false
            Me.columntipooperacion.MaxLength = 1
            Me.columnNumeroOrden.AllowDBNull = false
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnMontoDesde.AllowDBNull = false
            Me.columnMontoHasta.AllowDBNull = false
            Me.columnFechaDesde.AllowDBNull = false
            Me.columnFechaHasta.AllowDBNull = false
            Me.columnEstadoOrden.AllowDBNull = false
            Me.columnEstadoOrden.MaxLength = 1
            Me.columnCodigoBanco.ReadOnly = true
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnIdCanal.AutoIncrement = true
            Me.columnIdCanal.AutoIncrementSeed = -1
            Me.columnIdCanal.AutoIncrementStep = -1
            Me.columnIdCanal.ReadOnly = true
            Me.columnNombreCanal.MaxLength = 255
            Me.columnNombreEntidadOrigen.MaxLength = 100
            Me.columnCuentaClienteOrigen.ReadOnly = true
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnNombreClienteOrigen.ReadOnly = true
            Me.columnNombreClienteOrigen.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteAutorizacionesRow() As PC_ReporteAutorizacionesRow
            Return CType(Me.NewRow,PC_ReporteAutorizacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteAutorizacionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteAutorizacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteAutorizacionesRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesRowChanged(Me, New PC_ReporteAutorizacionesRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteAutorizacionesRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesRowChanging(Me, New PC_ReporteAutorizacionesRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteAutorizacionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesRowDeleted(Me, New PC_ReporteAutorizacionesRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteAutorizacionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteAutorizacionesRowDeleting(Me, New PC_ReporteAutorizacionesRowChangeEvent(CType(e.Row,PC_ReporteAutorizacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteAutorizacionesRow(ByVal row As PC_ReporteAutorizacionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Autorizaciones_ConceptoBanco = New Autorizaciones_ConceptoBanco
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteAutorizacionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_BancosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoBanco As Global.System.Data.DataColumn
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnAbreviaturaBanco As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnAyudaDomiciliaciones As Global.System.Data.DataColumn
        
        Private columnAyudaTransacciones As Global.System.Data.DataColumn
        
        Private columnCedulaBanco As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_Bancos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AyudaDomiciliacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAyudaDomiciliaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AyudaTransaccionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAyudaTransacciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_BancosRow
            Get
                Return CType(Me.Rows(index),PC_BancosRow)
            End Get
        End Property
        
        Public Event PC_BancosRowChanging As PC_BancosRowChangeEventHandler
        
        Public Event PC_BancosRowChanged As PC_BancosRowChangeEventHandler
        
        Public Event PC_BancosRowDeleting As PC_BancosRowChangeEventHandler
        
        Public Event PC_BancosRowDeleted As PC_BancosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_BancosRow(ByVal row As PC_BancosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_BancosRow(ByVal CodigoBanco As Integer, ByVal NombreBanco As String, ByVal AbreviaturaBanco As String, ByVal Estado As String, ByVal AyudaDomiciliaciones As String, ByVal AyudaTransacciones As String, ByVal CedulaBanco As String) As PC_BancosRow
            Dim rowPC_BancosRow As PC_BancosRow = CType(Me.NewRow,PC_BancosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoBanco, NombreBanco, AbreviaturaBanco, Estado, AyudaDomiciliaciones, AyudaTransacciones, CedulaBanco}
            rowPC_BancosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_BancosRow)
            Return rowPC_BancosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoBanco(ByVal CodigoBanco As Integer) As PC_BancosRow
            Return CType(Me.Rows.Find(New Object() {CodigoBanco}),PC_BancosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_BancosDataTable = CType(MyBase.Clone,PC_BancosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_BancosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoBanco = MyBase.Columns("CodigoBanco")
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnAbreviaturaBanco = MyBase.Columns("AbreviaturaBanco")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnAyudaDomiciliaciones = MyBase.Columns("AyudaDomiciliaciones")
            Me.columnAyudaTransacciones = MyBase.Columns("AyudaTransacciones")
            Me.columnCedulaBanco = MyBase.Columns("CedulaBanco")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoBanco = New Global.System.Data.DataColumn("CodigoBanco", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoBanco)
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnAbreviaturaBanco = New Global.System.Data.DataColumn("AbreviaturaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaBanco)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnAyudaDomiciliaciones = New Global.System.Data.DataColumn("AyudaDomiciliaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAyudaDomiciliaciones)
            Me.columnAyudaTransacciones = New Global.System.Data.DataColumn("AyudaTransacciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAyudaTransacciones)
            Me.columnCedulaBanco = New Global.System.Data.DataColumn("CedulaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaBanco)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoBanco}, true))
            Me.columnCodigoBanco.AllowDBNull = false
            Me.columnCodigoBanco.Unique = true
            Me.columnNombreBanco.AllowDBNull = false
            Me.columnNombreBanco.MaxLength = 100
            Me.columnAbreviaturaBanco.AllowDBNull = false
            Me.columnAbreviaturaBanco.MaxLength = 15
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnAyudaDomiciliaciones.MaxLength = 255
            Me.columnAyudaTransacciones.MaxLength = 255
            Me.columnCedulaBanco.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_BancosRow() As PC_BancosRow
            Return CType(Me.NewRow,PC_BancosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_BancosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_BancosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_BancosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowChanged(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_BancosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowChanging(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_BancosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowDeleted(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_BancosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowDeleting(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_BancosRow(ByVal row As PC_BancosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Autorizaciones_ConceptoBanco = New Autorizaciones_ConceptoBanco
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_BancosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteAutorizacionesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteAutorizaciones As PC_ReporteAutorizacionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteAutorizaciones = CType(Me.Table,PC_ReporteAutorizacionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipooperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.tipooperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.tipooperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.NumeroOrdenColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDesde() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.MontoDesdeColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.MontoDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoHasta() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.MontoHastaColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.MontoHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDesde() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.FechaDesdeColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.FechaDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaHasta() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.FechaHastaColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.FechaHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoOrden() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.EstadoOrdenColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.EstadoOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoBanco() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.CodigoBancoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoBanco' de la tabla 'PC_ReporteAutorizaciones' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.CodigoBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.NombreConceptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreConcepto' de la tabla 'PC_ReporteAutorizaciones' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCanal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.IdCanalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdCanal' de la tabla 'PC_ReporteAutorizaciones' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.IdCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCanal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.NombreCanalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCanal' de la tabla 'PC_ReporteAutorizaciones' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.NombreCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEntidadOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.NombreEntidadOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEntidadOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "s' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.NombreEntidadOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntidadOrigen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.EntidadOrigenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EntidadOrigen' de la tabla 'PC_ReporteAutorizaciones' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.EntidadOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "s' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteAutorizaciones.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "s' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteAutorizaciones.NombreClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreClienteOrigen' de la tabla 'PC_ReporteAutorizacione"& _ 
                            "s' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteAutorizaciones.NombreClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoBancoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.CodigoBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoBancoNull()
            Me(Me.tablePC_ReporteAutorizaciones.CodigoBancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreConceptoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.NombreConceptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreConceptoNull()
            Me(Me.tablePC_ReporteAutorizaciones.NombreConceptoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.IdCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCanalNull()
            Me(Me.tablePC_ReporteAutorizaciones.IdCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.NombreCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCanalNull()
            Me(Me.tablePC_ReporteAutorizaciones.NombreCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEntidadOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.NombreEntidadOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEntidadOrigenNull()
            Me(Me.tablePC_ReporteAutorizaciones.NombreEntidadOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntidadOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.EntidadOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntidadOrigenNull()
            Me(Me.tablePC_ReporteAutorizaciones.EntidadOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteAutorizaciones.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteAutorizaciones.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteAutorizaciones.NombreClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteOrigenNull()
            Me(Me.tablePC_ReporteAutorizaciones.NombreClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_BancosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_Bancos As PC_BancosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_Bancos = CType(Me.Table,PC_BancosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoBanco() As Integer
            Get
                Return CType(Me(Me.tablePC_Bancos.CodigoBancoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Bancos.CodigoBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Return CType(Me(Me.tablePC_Bancos.NombreBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Bancos.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaBanco() As String
            Get
                Return CType(Me(Me.tablePC_Bancos.AbreviaturaBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Bancos.AbreviaturaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_Bancos.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Bancos.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AyudaDomiciliaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Bancos.AyudaDomiciliacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AyudaDomiciliaciones' de la tabla 'PC_Bancos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Bancos.AyudaDomiciliacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AyudaTransacciones() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Bancos.AyudaTransaccionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AyudaTransacciones' de la tabla 'PC_Bancos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Bancos.AyudaTransaccionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaBanco() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Bancos.CedulaBancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaBanco' de la tabla 'PC_Bancos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Bancos.CedulaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAyudaDomiciliacionesNull() As Boolean
            Return Me.IsNull(Me.tablePC_Bancos.AyudaDomiciliacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAyudaDomiciliacionesNull()
            Me(Me.tablePC_Bancos.AyudaDomiciliacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAyudaTransaccionesNull() As Boolean
            Return Me.IsNull(Me.tablePC_Bancos.AyudaTransaccionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAyudaTransaccionesNull()
            Me(Me.tablePC_Bancos.AyudaTransaccionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaBancoNull() As Boolean
            Return Me.IsNull(Me.tablePC_Bancos.CedulaBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaBancoNull()
            Me(Me.tablePC_Bancos.CedulaBancoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteAutorizacionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteAutorizacionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteAutorizacionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteAutorizacionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_BancosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_BancosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_BancosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_BancosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CatalogoCentrosCosto"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CatalogoCentrosCosto
    Inherits Global.System.Data.DataSet
    
    Private tablePC_CentrosCosto As PC_CentrosCostoDataTable
    
    Private tablePC_Parametros As PC_ParametrosDataTable
    
    Private relationFK_pc_CentrosCosto_PC_Parametros As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_CentrosCosto")) Is Nothing) Then
                MyBase.Tables.Add(New PC_CentrosCostoDataTable(ds.Tables("PC_CentrosCosto")))
            End If
            If (Not (ds.Tables("PC_Parametros")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ParametrosDataTable(ds.Tables("PC_Parametros")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_CentrosCosto() As PC_CentrosCostoDataTable
        Get
            Return Me.tablePC_CentrosCosto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_Parametros() As PC_ParametrosDataTable
        Get
            Return Me.tablePC_Parametros
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CatalogoCentrosCosto = CType(MyBase.Clone,CatalogoCentrosCosto)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_CentrosCosto")) Is Nothing) Then
                MyBase.Tables.Add(New PC_CentrosCostoDataTable(ds.Tables("PC_CentrosCosto")))
            End If
            If (Not (ds.Tables("PC_Parametros")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ParametrosDataTable(ds.Tables("PC_Parametros")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_CentrosCosto = CType(MyBase.Tables("PC_CentrosCosto"),PC_CentrosCostoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_CentrosCosto) Is Nothing) Then
                Me.tablePC_CentrosCosto.InitVars
            End If
        End If
        Me.tablePC_Parametros = CType(MyBase.Tables("PC_Parametros"),PC_ParametrosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_Parametros) Is Nothing) Then
                Me.tablePC_Parametros.InitVars
            End If
        End If
        Me.relationFK_pc_CentrosCosto_PC_Parametros = Me.Relations("FK_pc_CentrosCosto_PC_Parametros")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CatalogoCentrosCosto"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/CatalogoCentrosCosto.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_CentrosCosto = New PC_CentrosCostoDataTable
        MyBase.Tables.Add(Me.tablePC_CentrosCosto)
        Me.tablePC_Parametros = New PC_ParametrosDataTable
        MyBase.Tables.Add(Me.tablePC_Parametros)
        Me.relationFK_pc_CentrosCosto_PC_Parametros = New Global.System.Data.DataRelation("FK_pc_CentrosCosto_PC_Parametros", New Global.System.Data.DataColumn() {Me.tablePC_Parametros.CodigoEntidadOrigenColumn}, New Global.System.Data.DataColumn() {Me.tablePC_CentrosCosto.CodigoEntidadOrigenColumn}, false)
        Me.Relations.Add(Me.relationFK_pc_CentrosCosto_PC_Parametros)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_CentrosCosto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_Parametros() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CatalogoCentrosCosto = New CatalogoCentrosCosto
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_CentrosCostoRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_CentrosCostoRowChangeEvent)
    
    Public Delegate Sub PC_ParametrosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ParametrosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_CentrosCostoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnCodigoEntidadOrigen As Global.System.Data.DataColumn
        
        Private columnMontoMaximoColones As Global.System.Data.DataColumn
        
        Private columnMontoMaximoColones2 As Global.System.Data.DataColumn
        
        Private columnMontoMaximoDolares As Global.System.Data.DataColumn
        
        Private columnMontoMaximoDolares2 As Global.System.Data.DataColumn
        
        Private columnMontoMaximoEuros As Global.System.Data.DataColumn
        
        Private columnMontoMaximoEuros2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_CentrosCosto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEntidadOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoEntidadOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoColonesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoColones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoColones2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoColones2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoDolaresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoDolares
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoDolares2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoDolares2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoEurosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoEuros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoEuros2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoEuros2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_CentrosCostoRow
            Get
                Return CType(Me.Rows(index),PC_CentrosCostoRow)
            End Get
        End Property
        
        Public Event PC_CentrosCostoRowChanging As PC_CentrosCostoRowChangeEventHandler
        
        Public Event PC_CentrosCostoRowChanged As PC_CentrosCostoRowChangeEventHandler
        
        Public Event PC_CentrosCostoRowDeleting As PC_CentrosCostoRowChangeEventHandler
        
        Public Event PC_CentrosCostoRowDeleted As PC_CentrosCostoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_CentrosCostoRow(ByVal row As PC_CentrosCostoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_CentrosCostoRow(ByVal CodigoCentro As Integer, ByVal NombreCentro As String, ByVal Estado As String, ByVal parentPC_ParametrosRowByFK_pc_CentrosCosto_PC_Parametros As PC_ParametrosRow, ByVal MontoMaximoColones As Decimal, ByVal MontoMaximoColones2 As Decimal, ByVal MontoMaximoDolares As Decimal, ByVal MontoMaximoDolares2 As Decimal, ByVal MontoMaximoEuros As Decimal, ByVal MontoMaximoEuros2 As Decimal) As PC_CentrosCostoRow
            Dim rowPC_CentrosCostoRow As PC_CentrosCostoRow = CType(Me.NewRow,PC_CentrosCostoRow)
            Dim columnValuesArray() As Object = New Object() {CodigoCentro, NombreCentro, Estado, Nothing, MontoMaximoColones, MontoMaximoColones2, MontoMaximoDolares, MontoMaximoDolares2, MontoMaximoEuros, MontoMaximoEuros2}
            If (Not (parentPC_ParametrosRowByFK_pc_CentrosCosto_PC_Parametros) Is Nothing) Then
                columnValuesArray(3) = parentPC_ParametrosRowByFK_pc_CentrosCosto_PC_Parametros(0)
            End If
            rowPC_CentrosCostoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_CentrosCostoRow)
            Return rowPC_CentrosCostoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoCentro(ByVal CodigoCentro As Integer) As PC_CentrosCostoRow
            Return CType(Me.Rows.Find(New Object() {CodigoCentro}),PC_CentrosCostoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_CentrosCostoDataTable = CType(MyBase.Clone,PC_CentrosCostoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_CentrosCostoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnCodigoEntidadOrigen = MyBase.Columns("CodigoEntidadOrigen")
            Me.columnMontoMaximoColones = MyBase.Columns("MontoMaximoColones")
            Me.columnMontoMaximoColones2 = MyBase.Columns("MontoMaximoColones2")
            Me.columnMontoMaximoDolares = MyBase.Columns("MontoMaximoDolares")
            Me.columnMontoMaximoDolares2 = MyBase.Columns("MontoMaximoDolares2")
            Me.columnMontoMaximoEuros = MyBase.Columns("MontoMaximoEuros")
            Me.columnMontoMaximoEuros2 = MyBase.Columns("MontoMaximoEuros2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnCodigoEntidadOrigen = New Global.System.Data.DataColumn("CodigoEntidadOrigen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEntidadOrigen)
            Me.columnMontoMaximoColones = New Global.System.Data.DataColumn("MontoMaximoColones", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoColones)
            Me.columnMontoMaximoColones2 = New Global.System.Data.DataColumn("MontoMaximoColones2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoColones2)
            Me.columnMontoMaximoDolares = New Global.System.Data.DataColumn("MontoMaximoDolares", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoDolares)
            Me.columnMontoMaximoDolares2 = New Global.System.Data.DataColumn("MontoMaximoDolares2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoDolares2)
            Me.columnMontoMaximoEuros = New Global.System.Data.DataColumn("MontoMaximoEuros", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoEuros)
            Me.columnMontoMaximoEuros2 = New Global.System.Data.DataColumn("MontoMaximoEuros2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoEuros2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoCentro}, true))
            Me.columnCodigoCentro.AllowDBNull = false
            Me.columnCodigoCentro.Unique = true
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnMontoMaximoColones.AllowDBNull = false
            Me.columnMontoMaximoColones2.AllowDBNull = false
            Me.columnMontoMaximoDolares.AllowDBNull = false
            Me.columnMontoMaximoDolares2.AllowDBNull = false
            Me.columnMontoMaximoEuros.AllowDBNull = false
            Me.columnMontoMaximoEuros2.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_CentrosCostoRow() As PC_CentrosCostoRow
            Return CType(Me.NewRow,PC_CentrosCostoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_CentrosCostoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_CentrosCostoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_CentrosCostoRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_CentrosCostoRowChanged(Me, New PC_CentrosCostoRowChangeEvent(CType(e.Row,PC_CentrosCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_CentrosCostoRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_CentrosCostoRowChanging(Me, New PC_CentrosCostoRowChangeEvent(CType(e.Row,PC_CentrosCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_CentrosCostoRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_CentrosCostoRowDeleted(Me, New PC_CentrosCostoRowChangeEvent(CType(e.Row,PC_CentrosCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_CentrosCostoRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_CentrosCostoRowDeleting(Me, New PC_CentrosCostoRowChangeEvent(CType(e.Row,PC_CentrosCostoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_CentrosCostoRow(ByVal row As PC_CentrosCostoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CatalogoCentrosCosto = New CatalogoCentrosCosto
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_CentrosCostoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ParametrosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoEntidadOrigen As Global.System.Data.DataColumn
        
        Private columnCedulaEntidad As Global.System.Data.DataColumn
        
        Private columnNombreEntidad As Global.System.Data.DataColumn
        
        Private columnDirectorioGen As Global.System.Data.DataColumn
        
        Private columnCodigoServicioPagos As Global.System.Data.DataColumn
        
        Private columnCodigoServicioCobros As Global.System.Data.DataColumn
        
        Private columnCuentaReservaOrigen As Global.System.Data.DataColumn
        
        Private columnTipoCambioUtilizarPagos As Global.System.Data.DataColumn
        
        Private columnTipoCambioUtilizarCobros As Global.System.Data.DataColumn
        
        Private columnRequiereAutorizacionPagos As Global.System.Data.DataColumn
        
        Private columnRequiereAutorizacionCobros As Global.System.Data.DataColumn
        
        Private columnRequiereFirma1Pagos As Global.System.Data.DataColumn
        
        Private columnRequiereFirma1Cobros As Global.System.Data.DataColumn
        
        Private columnRequiereFirma2Pagos As Global.System.Data.DataColumn
        
        Private columnRequiereFirma2Cobros As Global.System.Data.DataColumn
        
        Private columnAbreviaturaEntidad As Global.System.Data.DataColumn
        
        Private columnRequiereCargosAutomaticos As Global.System.Data.DataColumn
        
        Private columnCodigoMonedaLocal As Global.System.Data.DataColumn
        
        Private columnCuentaReservaOrigenDolares As Global.System.Data.DataColumn
        
        Private columnLicenciasRepresentadas As Global.System.Data.DataColumn
        
        Private columnRegistraBitacora As Global.System.Data.DataColumn
        
        Private columnCuentaReservaOrigenEuros As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_Parametros"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoEntidadOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoEntidadOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaEntidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaEntidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEntidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEntidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DirectorioGenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDirectorioGen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioPagosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicioPagos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioCobrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicioCobros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaReservaOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaReservaOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioUtilizarPagosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambioUtilizarPagos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioUtilizarCobrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambioUtilizarCobros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereAutorizacionPagosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereAutorizacionPagos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereAutorizacionCobrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereAutorizacionCobros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereFirma1PagosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereFirma1Pagos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereFirma1CobrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereFirma1Cobros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereFirma2PagosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereFirma2Pagos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereFirma2CobrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereFirma2Cobros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaEntidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaEntidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiereCargosAutomaticosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiereCargosAutomaticos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaLocalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMonedaLocal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaReservaOrigenDolaresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaReservaOrigenDolares
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LicenciasRepresentadasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLicenciasRepresentadas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistraBitacoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistraBitacora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaReservaOrigenEurosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaReservaOrigenEuros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ParametrosRow
            Get
                Return CType(Me.Rows(index),PC_ParametrosRow)
            End Get
        End Property
        
        Public Event PC_ParametrosRowChanging As PC_ParametrosRowChangeEventHandler
        
        Public Event PC_ParametrosRowChanged As PC_ParametrosRowChangeEventHandler
        
        Public Event PC_ParametrosRowDeleting As PC_ParametrosRowChangeEventHandler
        
        Public Event PC_ParametrosRowDeleted As PC_ParametrosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ParametrosRow(ByVal row As PC_ParametrosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ParametrosRow( _
                    ByVal CodigoEntidadOrigen As Integer,  _
                    ByVal CedulaEntidad As String,  _
                    ByVal NombreEntidad As String,  _
                    ByVal DirectorioGen As String,  _
                    ByVal CodigoServicioPagos As Integer,  _
                    ByVal CodigoServicioCobros As Integer,  _
                    ByVal CuentaReservaOrigen As String,  _
                    ByVal TipoCambioUtilizarPagos As String,  _
                    ByVal TipoCambioUtilizarCobros As String,  _
                    ByVal RequiereAutorizacionPagos As String,  _
                    ByVal RequiereAutorizacionCobros As String,  _
                    ByVal RequiereFirma1Pagos As String,  _
                    ByVal RequiereFirma1Cobros As String,  _
                    ByVal RequiereFirma2Pagos As String,  _
                    ByVal RequiereFirma2Cobros As String,  _
                    ByVal AbreviaturaEntidad As String,  _
                    ByVal RequiereCargosAutomaticos As String,  _
                    ByVal CodigoMonedaLocal As Integer,  _
                    ByVal CuentaReservaOrigenDolares As String,  _
                    ByVal LicenciasRepresentadas As Integer,  _
                    ByVal RegistraBitacora As String,  _
                    ByVal CuentaReservaOrigenEuros As String) As PC_ParametrosRow
            Dim rowPC_ParametrosRow As PC_ParametrosRow = CType(Me.NewRow,PC_ParametrosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoEntidadOrigen, CedulaEntidad, NombreEntidad, DirectorioGen, CodigoServicioPagos, CodigoServicioCobros, CuentaReservaOrigen, TipoCambioUtilizarPagos, TipoCambioUtilizarCobros, RequiereAutorizacionPagos, RequiereAutorizacionCobros, RequiereFirma1Pagos, RequiereFirma1Cobros, RequiereFirma2Pagos, RequiereFirma2Cobros, AbreviaturaEntidad, RequiereCargosAutomaticos, CodigoMonedaLocal, CuentaReservaOrigenDolares, LicenciasRepresentadas, RegistraBitacora, CuentaReservaOrigenEuros}
            rowPC_ParametrosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ParametrosRow)
            Return rowPC_ParametrosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoEntidadOrigen(ByVal CodigoEntidadOrigen As Integer) As PC_ParametrosRow
            Return CType(Me.Rows.Find(New Object() {CodigoEntidadOrigen}),PC_ParametrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ParametrosDataTable = CType(MyBase.Clone,PC_ParametrosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ParametrosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoEntidadOrigen = MyBase.Columns("CodigoEntidadOrigen")
            Me.columnCedulaEntidad = MyBase.Columns("CedulaEntidad")
            Me.columnNombreEntidad = MyBase.Columns("NombreEntidad")
            Me.columnDirectorioGen = MyBase.Columns("DirectorioGen")
            Me.columnCodigoServicioPagos = MyBase.Columns("CodigoServicioPagos")
            Me.columnCodigoServicioCobros = MyBase.Columns("CodigoServicioCobros")
            Me.columnCuentaReservaOrigen = MyBase.Columns("CuentaReservaOrigen")
            Me.columnTipoCambioUtilizarPagos = MyBase.Columns("TipoCambioUtilizarPagos")
            Me.columnTipoCambioUtilizarCobros = MyBase.Columns("TipoCambioUtilizarCobros")
            Me.columnRequiereAutorizacionPagos = MyBase.Columns("RequiereAutorizacionPagos")
            Me.columnRequiereAutorizacionCobros = MyBase.Columns("RequiereAutorizacionCobros")
            Me.columnRequiereFirma1Pagos = MyBase.Columns("RequiereFirma1Pagos")
            Me.columnRequiereFirma1Cobros = MyBase.Columns("RequiereFirma1Cobros")
            Me.columnRequiereFirma2Pagos = MyBase.Columns("RequiereFirma2Pagos")
            Me.columnRequiereFirma2Cobros = MyBase.Columns("RequiereFirma2Cobros")
            Me.columnAbreviaturaEntidad = MyBase.Columns("AbreviaturaEntidad")
            Me.columnRequiereCargosAutomaticos = MyBase.Columns("RequiereCargosAutomaticos")
            Me.columnCodigoMonedaLocal = MyBase.Columns("CodigoMonedaLocal")
            Me.columnCuentaReservaOrigenDolares = MyBase.Columns("CuentaReservaOrigenDolares")
            Me.columnLicenciasRepresentadas = MyBase.Columns("LicenciasRepresentadas")
            Me.columnRegistraBitacora = MyBase.Columns("RegistraBitacora")
            Me.columnCuentaReservaOrigenEuros = MyBase.Columns("CuentaReservaOrigenEuros")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoEntidadOrigen = New Global.System.Data.DataColumn("CodigoEntidadOrigen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoEntidadOrigen)
            Me.columnCedulaEntidad = New Global.System.Data.DataColumn("CedulaEntidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaEntidad)
            Me.columnNombreEntidad = New Global.System.Data.DataColumn("NombreEntidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEntidad)
            Me.columnDirectorioGen = New Global.System.Data.DataColumn("DirectorioGen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDirectorioGen)
            Me.columnCodigoServicioPagos = New Global.System.Data.DataColumn("CodigoServicioPagos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicioPagos)
            Me.columnCodigoServicioCobros = New Global.System.Data.DataColumn("CodigoServicioCobros", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicioCobros)
            Me.columnCuentaReservaOrigen = New Global.System.Data.DataColumn("CuentaReservaOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaReservaOrigen)
            Me.columnTipoCambioUtilizarPagos = New Global.System.Data.DataColumn("TipoCambioUtilizarPagos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambioUtilizarPagos)
            Me.columnTipoCambioUtilizarCobros = New Global.System.Data.DataColumn("TipoCambioUtilizarCobros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambioUtilizarCobros)
            Me.columnRequiereAutorizacionPagos = New Global.System.Data.DataColumn("RequiereAutorizacionPagos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereAutorizacionPagos)
            Me.columnRequiereAutorizacionCobros = New Global.System.Data.DataColumn("RequiereAutorizacionCobros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereAutorizacionCobros)
            Me.columnRequiereFirma1Pagos = New Global.System.Data.DataColumn("RequiereFirma1Pagos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereFirma1Pagos)
            Me.columnRequiereFirma1Cobros = New Global.System.Data.DataColumn("RequiereFirma1Cobros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereFirma1Cobros)
            Me.columnRequiereFirma2Pagos = New Global.System.Data.DataColumn("RequiereFirma2Pagos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereFirma2Pagos)
            Me.columnRequiereFirma2Cobros = New Global.System.Data.DataColumn("RequiereFirma2Cobros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereFirma2Cobros)
            Me.columnAbreviaturaEntidad = New Global.System.Data.DataColumn("AbreviaturaEntidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaEntidad)
            Me.columnRequiereCargosAutomaticos = New Global.System.Data.DataColumn("RequiereCargosAutomaticos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiereCargosAutomaticos)
            Me.columnCodigoMonedaLocal = New Global.System.Data.DataColumn("CodigoMonedaLocal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMonedaLocal)
            Me.columnCuentaReservaOrigenDolares = New Global.System.Data.DataColumn("CuentaReservaOrigenDolares", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaReservaOrigenDolares)
            Me.columnLicenciasRepresentadas = New Global.System.Data.DataColumn("LicenciasRepresentadas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLicenciasRepresentadas)
            Me.columnRegistraBitacora = New Global.System.Data.DataColumn("RegistraBitacora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistraBitacora)
            Me.columnCuentaReservaOrigenEuros = New Global.System.Data.DataColumn("CuentaReservaOrigenEuros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaReservaOrigenEuros)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoEntidadOrigen}, true))
            Me.columnCodigoEntidadOrigen.AllowDBNull = false
            Me.columnCodigoEntidadOrigen.Unique = true
            Me.columnCedulaEntidad.AllowDBNull = false
            Me.columnCedulaEntidad.MaxLength = 15
            Me.columnNombreEntidad.AllowDBNull = false
            Me.columnNombreEntidad.MaxLength = 60
            Me.columnDirectorioGen.AllowDBNull = false
            Me.columnDirectorioGen.MaxLength = 250
            Me.columnCuentaReservaOrigen.AllowDBNull = false
            Me.columnCuentaReservaOrigen.MaxLength = 17
            Me.columnTipoCambioUtilizarPagos.AllowDBNull = false
            Me.columnTipoCambioUtilizarPagos.MaxLength = 1
            Me.columnTipoCambioUtilizarCobros.AllowDBNull = false
            Me.columnTipoCambioUtilizarCobros.MaxLength = 1
            Me.columnRequiereAutorizacionPagos.AllowDBNull = false
            Me.columnRequiereAutorizacionPagos.MaxLength = 1
            Me.columnRequiereAutorizacionCobros.AllowDBNull = false
            Me.columnRequiereAutorizacionCobros.MaxLength = 1
            Me.columnRequiereFirma1Pagos.AllowDBNull = false
            Me.columnRequiereFirma1Pagos.MaxLength = 1
            Me.columnRequiereFirma1Cobros.AllowDBNull = false
            Me.columnRequiereFirma1Cobros.MaxLength = 1
            Me.columnRequiereFirma2Pagos.AllowDBNull = false
            Me.columnRequiereFirma2Pagos.MaxLength = 1
            Me.columnRequiereFirma2Cobros.AllowDBNull = false
            Me.columnRequiereFirma2Cobros.MaxLength = 1
            Me.columnAbreviaturaEntidad.MaxLength = 20
            Me.columnRequiereCargosAutomaticos.MaxLength = 1
            Me.columnCuentaReservaOrigenDolares.MaxLength = 17
            Me.columnRegistraBitacora.MaxLength = 1
            Me.columnCuentaReservaOrigenEuros.MaxLength = 17
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ParametrosRow() As PC_ParametrosRow
            Return CType(Me.NewRow,PC_ParametrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ParametrosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ParametrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ParametrosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ParametrosRowChanged(Me, New PC_ParametrosRowChangeEvent(CType(e.Row,PC_ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ParametrosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ParametrosRowChanging(Me, New PC_ParametrosRowChangeEvent(CType(e.Row,PC_ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ParametrosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ParametrosRowDeleted(Me, New PC_ParametrosRowChangeEvent(CType(e.Row,PC_ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ParametrosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ParametrosRowDeleting(Me, New PC_ParametrosRowChangeEvent(CType(e.Row,PC_ParametrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ParametrosRow(ByVal row As PC_ParametrosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CatalogoCentrosCosto = New CatalogoCentrosCosto
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ParametrosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_CentrosCostoRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_CentrosCosto As PC_CentrosCostoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_CentrosCosto = CType(Me.Table,PC_CentrosCostoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.CodigoCentroColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEntidadOrigen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_CentrosCosto.CodigoEntidadOrigenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoEntidadOrigen' de la tabla 'PC_CentrosCosto' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.CodigoEntidadOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoColones() As Decimal
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.MontoMaximoColonesColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.MontoMaximoColonesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoColones2() As Decimal
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.MontoMaximoColones2Column),Decimal)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.MontoMaximoColones2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoDolares() As Decimal
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.MontoMaximoDolaresColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.MontoMaximoDolaresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoDolares2() As Decimal
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.MontoMaximoDolares2Column),Decimal)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.MontoMaximoDolares2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoEuros() As Decimal
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.MontoMaximoEurosColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.MontoMaximoEurosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoEuros2() As Decimal
            Get
                Return CType(Me(Me.tablePC_CentrosCosto.MontoMaximoEuros2Column),Decimal)
            End Get
            Set
                Me(Me.tablePC_CentrosCosto.MontoMaximoEuros2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PC_ParametrosRow() As PC_ParametrosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_pc_CentrosCosto_PC_Parametros")),PC_ParametrosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_pc_CentrosCosto_PC_Parametros"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoEntidadOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_CentrosCosto.CodigoEntidadOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoEntidadOrigenNull()
            Me(Me.tablePC_CentrosCosto.CodigoEntidadOrigenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ParametrosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_Parametros As PC_ParametrosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_Parametros = CType(Me.Table,PC_ParametrosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoEntidadOrigen() As Integer
            Get
                Return CType(Me(Me.tablePC_Parametros.CodigoEntidadOrigenColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Parametros.CodigoEntidadOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaEntidad() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.CedulaEntidadColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.CedulaEntidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEntidad() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.NombreEntidadColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.NombreEntidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DirectorioGen() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.DirectorioGenColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.DirectorioGenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicioPagos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.CodigoServicioPagosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoServicioPagos' de la tabla 'PC_Parametros' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.CodigoServicioPagosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicioCobros() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.CodigoServicioCobrosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoServicioCobros' de la tabla 'PC_Parametros' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.CodigoServicioCobrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaReservaOrigen() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.CuentaReservaOrigenColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.CuentaReservaOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambioUtilizarPagos() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.TipoCambioUtilizarPagosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.TipoCambioUtilizarPagosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambioUtilizarCobros() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.TipoCambioUtilizarCobrosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.TipoCambioUtilizarCobrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereAutorizacionPagos() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.RequiereAutorizacionPagosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.RequiereAutorizacionPagosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereAutorizacionCobros() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.RequiereAutorizacionCobrosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.RequiereAutorizacionCobrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereFirma1Pagos() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.RequiereFirma1PagosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.RequiereFirma1PagosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereFirma1Cobros() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.RequiereFirma1CobrosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.RequiereFirma1CobrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereFirma2Pagos() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.RequiereFirma2PagosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.RequiereFirma2PagosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereFirma2Cobros() As String
            Get
                Return CType(Me(Me.tablePC_Parametros.RequiereFirma2CobrosColumn),String)
            End Get
            Set
                Me(Me.tablePC_Parametros.RequiereFirma2CobrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaEntidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.AbreviaturaEntidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AbreviaturaEntidad' de la tabla 'PC_Parametros' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.AbreviaturaEntidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiereCargosAutomaticos() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.RequiereCargosAutomaticosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RequiereCargosAutomaticos' de la tabla 'PC_Parametros' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.RequiereCargosAutomaticosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMonedaLocal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.CodigoMonedaLocalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoMonedaLocal' de la tabla 'PC_Parametros' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.CodigoMonedaLocalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaReservaOrigenDolares() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.CuentaReservaOrigenDolaresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaReservaOrigenDolares' de la tabla 'PC_Parametros' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.CuentaReservaOrigenDolaresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LicenciasRepresentadas() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.LicenciasRepresentadasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LicenciasRepresentadas' de la tabla 'PC_Parametros' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.LicenciasRepresentadasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistraBitacora() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.RegistraBitacoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RegistraBitacora' de la tabla 'PC_Parametros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.RegistraBitacoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaReservaOrigenEuros() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Parametros.CuentaReservaOrigenEurosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaReservaOrigenEuros' de la tabla 'PC_Parametros' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Parametros.CuentaReservaOrigenEurosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoServicioPagosNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.CodigoServicioPagosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoServicioPagosNull()
            Me(Me.tablePC_Parametros.CodigoServicioPagosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoServicioCobrosNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.CodigoServicioCobrosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoServicioCobrosNull()
            Me(Me.tablePC_Parametros.CodigoServicioCobrosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbreviaturaEntidadNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.AbreviaturaEntidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbreviaturaEntidadNull()
            Me(Me.tablePC_Parametros.AbreviaturaEntidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequiereCargosAutomaticosNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.RequiereCargosAutomaticosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequiereCargosAutomaticosNull()
            Me(Me.tablePC_Parametros.RequiereCargosAutomaticosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoMonedaLocalNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.CodigoMonedaLocalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoMonedaLocalNull()
            Me(Me.tablePC_Parametros.CodigoMonedaLocalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaReservaOrigenDolaresNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.CuentaReservaOrigenDolaresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaReservaOrigenDolaresNull()
            Me(Me.tablePC_Parametros.CuentaReservaOrigenDolaresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLicenciasRepresentadasNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.LicenciasRepresentadasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLicenciasRepresentadasNull()
            Me(Me.tablePC_Parametros.LicenciasRepresentadasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistraBitacoraNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.RegistraBitacoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistraBitacoraNull()
            Me(Me.tablePC_Parametros.RegistraBitacoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaReservaOrigenEurosNull() As Boolean
            Return Me.IsNull(Me.tablePC_Parametros.CuentaReservaOrigenEurosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaReservaOrigenEurosNull()
            Me(Me.tablePC_Parametros.CuentaReservaOrigenEurosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPC_CentrosCostoRows() As PC_CentrosCostoRow()
            If (Me.Table.ChildRelations("FK_pc_CentrosCosto_PC_Parametros") Is Nothing) Then
                Return New PC_CentrosCostoRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_pc_CentrosCosto_PC_Parametros")),PC_CentrosCostoRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_CentrosCostoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_CentrosCostoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_CentrosCostoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_CentrosCostoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ParametrosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ParametrosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ParametrosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ParametrosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CatalogoConceptos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CatalogoConceptos
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteConceptos As PC_ReporteConceptosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteConceptos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteConceptosDataTable(ds.Tables("PC_ReporteConceptos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteConceptos() As PC_ReporteConceptosDataTable
        Get
            Return Me.tablePC_ReporteConceptos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CatalogoConceptos = CType(MyBase.Clone,CatalogoConceptos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteConceptos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteConceptosDataTable(ds.Tables("PC_ReporteConceptos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteConceptos = CType(MyBase.Tables("PC_ReporteConceptos"),PC_ReporteConceptosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteConceptos) Is Nothing) Then
                Me.tablePC_ReporteConceptos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CatalogoConceptos"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/CatalogoConceptos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteConceptos = New PC_ReporteConceptosDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteConceptos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteConceptos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CatalogoConceptos = New CatalogoConceptos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteConceptosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteConceptosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteConceptosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteConceptos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteConceptosRow
            Get
                Return CType(Me.Rows(index),PC_ReporteConceptosRow)
            End Get
        End Property
        
        Public Event PC_ReporteConceptosRowChanging As PC_ReporteConceptosRowChangeEventHandler
        
        Public Event PC_ReporteConceptosRowChanged As PC_ReporteConceptosRowChangeEventHandler
        
        Public Event PC_ReporteConceptosRowDeleting As PC_ReporteConceptosRowChangeEventHandler
        
        Public Event PC_ReporteConceptosRowDeleted As PC_ReporteConceptosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteConceptosRow(ByVal row As PC_ReporteConceptosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteConceptosRow(ByVal TipoOperacion As String, ByVal CodigoConcepto As Integer, ByVal NombreConcepto As String, ByVal Estado As String) As PC_ReporteConceptosRow
            Dim rowPC_ReporteConceptosRow As PC_ReporteConceptosRow = CType(Me.NewRow,PC_ReporteConceptosRow)
            Dim columnValuesArray() As Object = New Object() {TipoOperacion, CodigoConcepto, NombreConcepto, Estado}
            rowPC_ReporteConceptosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteConceptosRow)
            Return rowPC_ReporteConceptosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoOperacionCodigoConcepto(ByVal TipoOperacion As String, ByVal CodigoConcepto As Integer) As PC_ReporteConceptosRow
            Return CType(Me.Rows.Find(New Object() {TipoOperacion, CodigoConcepto}),PC_ReporteConceptosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteConceptosDataTable = CType(MyBase.Clone,PC_ReporteConceptosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteConceptosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnEstado = MyBase.Columns("Estado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoOperacion, Me.columnCodigoConcepto}, true))
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteConceptosRow() As PC_ReporteConceptosRow
            Return CType(Me.NewRow,PC_ReporteConceptosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteConceptosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteConceptosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteConceptosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteConceptosRowChanged(Me, New PC_ReporteConceptosRowChangeEvent(CType(e.Row,PC_ReporteConceptosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteConceptosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteConceptosRowChanging(Me, New PC_ReporteConceptosRowChangeEvent(CType(e.Row,PC_ReporteConceptosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteConceptosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteConceptosRowDeleted(Me, New PC_ReporteConceptosRowChangeEvent(CType(e.Row,PC_ReporteConceptosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteConceptosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteConceptosRowDeleting(Me, New PC_ReporteConceptosRowChangeEvent(CType(e.Row,PC_ReporteConceptosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteConceptosRow(ByVal row As PC_ReporteConceptosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CatalogoConceptos = New CatalogoConceptos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteConceptosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteConceptosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteConceptos As PC_ReporteConceptosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteConceptos = CType(Me.Table,PC_ReporteConceptosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteConceptos.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteConceptos.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteConceptos.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteConceptos.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteConceptos.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteConceptos.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_ReporteConceptos.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteConceptos.EstadoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteConceptosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteConceptosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteConceptosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteConceptosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Destinatarios"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Destinatarios
    Inherits Global.System.Data.DataSet
    
    Private tablePC_MatriculaPersonas As PC_MatriculaPersonasDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_MatriculaPersonas")) Is Nothing) Then
                MyBase.Tables.Add(New PC_MatriculaPersonasDataTable(ds.Tables("PC_MatriculaPersonas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_MatriculaPersonas() As PC_MatriculaPersonasDataTable
        Get
            Return Me.tablePC_MatriculaPersonas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Destinatarios = CType(MyBase.Clone,Destinatarios)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_MatriculaPersonas")) Is Nothing) Then
                MyBase.Tables.Add(New PC_MatriculaPersonasDataTable(ds.Tables("PC_MatriculaPersonas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_MatriculaPersonas = CType(MyBase.Tables("PC_MatriculaPersonas"),PC_MatriculaPersonasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_MatriculaPersonas) Is Nothing) Then
                Me.tablePC_MatriculaPersonas.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Destinatarios"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/Destinatarios.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_MatriculaPersonas = New PC_MatriculaPersonasDataTable
        MyBase.Tables.Add(Me.tablePC_MatriculaPersonas)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_MatriculaPersonas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Destinatarios = New Destinatarios
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_MatriculaPersonasRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_MatriculaPersonasRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_MatriculaPersonasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnEnPadron As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnFecVencPersoneria As Global.System.Data.DataColumn
        
        Private columnConvenioFirmado As Global.System.Data.DataColumn
        
        Private columnAlDiaCCSS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_MatriculaPersonas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnPadronColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnPadron
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FecVencPersoneriaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecVencPersoneria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConvenioFirmadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConvenioFirmado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlDiaCCSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlDiaCCSS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_MatriculaPersonasRow
            Get
                Return CType(Me.Rows(index),PC_MatriculaPersonasRow)
            End Get
        End Property
        
        Public Event PC_MatriculaPersonasRowChanging As PC_MatriculaPersonasRowChangeEventHandler
        
        Public Event PC_MatriculaPersonasRowChanged As PC_MatriculaPersonasRowChangeEventHandler
        
        Public Event PC_MatriculaPersonasRowDeleting As PC_MatriculaPersonasRowChangeEventHandler
        
        Public Event PC_MatriculaPersonasRowDeleted As PC_MatriculaPersonasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_MatriculaPersonasRow(ByVal row As PC_MatriculaPersonasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_MatriculaPersonasRow(ByVal CedulaPersona As String, ByVal NombrePersona As String, ByVal EnPadron As String, ByVal Estado As String, ByVal UsuarioRegistra As String, ByVal FechaRegistro As Date, ByVal FecVencPersoneria As Date, ByVal ConvenioFirmado As String, ByVal AlDiaCCSS As String) As PC_MatriculaPersonasRow
            Dim rowPC_MatriculaPersonasRow As PC_MatriculaPersonasRow = CType(Me.NewRow,PC_MatriculaPersonasRow)
            Dim columnValuesArray() As Object = New Object() {CedulaPersona, NombrePersona, EnPadron, Estado, UsuarioRegistra, FechaRegistro, FecVencPersoneria, ConvenioFirmado, AlDiaCCSS}
            rowPC_MatriculaPersonasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_MatriculaPersonasRow)
            Return rowPC_MatriculaPersonasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCedulaPersona(ByVal CedulaPersona As String) As PC_MatriculaPersonasRow
            Return CType(Me.Rows.Find(New Object() {CedulaPersona}),PC_MatriculaPersonasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_MatriculaPersonasDataTable = CType(MyBase.Clone,PC_MatriculaPersonasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_MatriculaPersonasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnEnPadron = MyBase.Columns("EnPadron")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnFecVencPersoneria = MyBase.Columns("FecVencPersoneria")
            Me.columnConvenioFirmado = MyBase.Columns("ConvenioFirmado")
            Me.columnAlDiaCCSS = MyBase.Columns("AlDiaCCSS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnEnPadron = New Global.System.Data.DataColumn("EnPadron", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnPadron)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnFecVencPersoneria = New Global.System.Data.DataColumn("FecVencPersoneria", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecVencPersoneria)
            Me.columnConvenioFirmado = New Global.System.Data.DataColumn("ConvenioFirmado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConvenioFirmado)
            Me.columnAlDiaCCSS = New Global.System.Data.DataColumn("AlDiaCCSS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlDiaCCSS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCedulaPersona}, true))
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.Unique = true
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnEnPadron.AllowDBNull = false
            Me.columnEnPadron.MaxLength = 1
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 20
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnConvenioFirmado.MaxLength = 1
            Me.columnAlDiaCCSS.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_MatriculaPersonasRow() As PC_MatriculaPersonasRow
            Return CType(Me.NewRow,PC_MatriculaPersonasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_MatriculaPersonasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_MatriculaPersonasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_MatriculaPersonasRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_MatriculaPersonasRowChanged(Me, New PC_MatriculaPersonasRowChangeEvent(CType(e.Row,PC_MatriculaPersonasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_MatriculaPersonasRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_MatriculaPersonasRowChanging(Me, New PC_MatriculaPersonasRowChangeEvent(CType(e.Row,PC_MatriculaPersonasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_MatriculaPersonasRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_MatriculaPersonasRowDeleted(Me, New PC_MatriculaPersonasRowChangeEvent(CType(e.Row,PC_MatriculaPersonasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_MatriculaPersonasRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_MatriculaPersonasRowDeleting(Me, New PC_MatriculaPersonasRowChangeEvent(CType(e.Row,PC_MatriculaPersonasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_MatriculaPersonasRow(ByVal row As PC_MatriculaPersonasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Destinatarios = New Destinatarios
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_MatriculaPersonasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_MatriculaPersonasRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_MatriculaPersonas As PC_MatriculaPersonasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_MatriculaPersonas = CType(Me.Table,PC_MatriculaPersonasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_MatriculaPersonas.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_MatriculaPersonas.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnPadron() As String
            Get
                Return CType(Me(Me.tablePC_MatriculaPersonas.EnPadronColumn),String)
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.EnPadronColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_MatriculaPersonas.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_MatriculaPersonas.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_MatriculaPersonas.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FecVencPersoneria() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_MatriculaPersonas.FecVencPersoneriaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FecVencPersoneria' de la tabla 'PC_MatriculaPersonas' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.FecVencPersoneriaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConvenioFirmado() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_MatriculaPersonas.ConvenioFirmadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ConvenioFirmado' de la tabla 'PC_MatriculaPersonas' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.ConvenioFirmadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlDiaCCSS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_MatriculaPersonas.AlDiaCCSSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AlDiaCCSS' de la tabla 'PC_MatriculaPersonas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_MatriculaPersonas.AlDiaCCSSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFecVencPersoneriaNull() As Boolean
            Return Me.IsNull(Me.tablePC_MatriculaPersonas.FecVencPersoneriaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFecVencPersoneriaNull()
            Me(Me.tablePC_MatriculaPersonas.FecVencPersoneriaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConvenioFirmadoNull() As Boolean
            Return Me.IsNull(Me.tablePC_MatriculaPersonas.ConvenioFirmadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConvenioFirmadoNull()
            Me(Me.tablePC_MatriculaPersonas.ConvenioFirmadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlDiaCCSSNull() As Boolean
            Return Me.IsNull(Me.tablePC_MatriculaPersonas.AlDiaCCSSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlDiaCCSSNull()
            Me(Me.tablePC_MatriculaPersonas.AlDiaCCSSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_MatriculaPersonasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_MatriculaPersonasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_MatriculaPersonasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_MatriculaPersonasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_Bancos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_Bancos
    Inherits Global.System.Data.DataSet
    
    Private tablePC_Bancos As PC_BancosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_Bancos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_BancosDataTable(ds.Tables("PC_Bancos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_Bancos() As PC_BancosDataTable
        Get
            Return Me.tablePC_Bancos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_Bancos = CType(MyBase.Clone,PC_Bancos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_Bancos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_BancosDataTable(ds.Tables("PC_Bancos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_Bancos = CType(MyBase.Tables("PC_Bancos"),PC_BancosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_Bancos) Is Nothing) Then
                Me.tablePC_Bancos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_Bancos"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_Bancos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_Bancos = New PC_BancosDataTable
        MyBase.Tables.Add(Me.tablePC_Bancos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_Bancos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_Bancos = New PC_Bancos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_BancosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_BancosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_BancosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoBanco As Global.System.Data.DataColumn
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnAbreviaturaBanco As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnAyudaDomiciliaciones As Global.System.Data.DataColumn
        
        Private columnAyudaTransacciones As Global.System.Data.DataColumn
        
        Private columnCedulaBanco As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_Bancos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AyudaDomiciliacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAyudaDomiciliaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AyudaTransaccionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAyudaTransacciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_BancosRow
            Get
                Return CType(Me.Rows(index),PC_BancosRow)
            End Get
        End Property
        
        Public Event PC_BancosRowChanging As PC_BancosRowChangeEventHandler
        
        Public Event PC_BancosRowChanged As PC_BancosRowChangeEventHandler
        
        Public Event PC_BancosRowDeleting As PC_BancosRowChangeEventHandler
        
        Public Event PC_BancosRowDeleted As PC_BancosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_BancosRow(ByVal row As PC_BancosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_BancosRow(ByVal CodigoBanco As Integer, ByVal NombreBanco As String, ByVal AbreviaturaBanco As String, ByVal Estado As String, ByVal AyudaDomiciliaciones As String, ByVal AyudaTransacciones As String, ByVal CedulaBanco As String) As PC_BancosRow
            Dim rowPC_BancosRow As PC_BancosRow = CType(Me.NewRow,PC_BancosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoBanco, NombreBanco, AbreviaturaBanco, Estado, AyudaDomiciliaciones, AyudaTransacciones, CedulaBanco}
            rowPC_BancosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_BancosRow)
            Return rowPC_BancosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoBanco(ByVal CodigoBanco As Integer) As PC_BancosRow
            Return CType(Me.Rows.Find(New Object() {CodigoBanco}),PC_BancosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_BancosDataTable = CType(MyBase.Clone,PC_BancosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_BancosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoBanco = MyBase.Columns("CodigoBanco")
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnAbreviaturaBanco = MyBase.Columns("AbreviaturaBanco")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnAyudaDomiciliaciones = MyBase.Columns("AyudaDomiciliaciones")
            Me.columnAyudaTransacciones = MyBase.Columns("AyudaTransacciones")
            Me.columnCedulaBanco = MyBase.Columns("CedulaBanco")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoBanco = New Global.System.Data.DataColumn("CodigoBanco", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoBanco)
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnAbreviaturaBanco = New Global.System.Data.DataColumn("AbreviaturaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaBanco)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnAyudaDomiciliaciones = New Global.System.Data.DataColumn("AyudaDomiciliaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAyudaDomiciliaciones)
            Me.columnAyudaTransacciones = New Global.System.Data.DataColumn("AyudaTransacciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAyudaTransacciones)
            Me.columnCedulaBanco = New Global.System.Data.DataColumn("CedulaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaBanco)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoBanco}, true))
            Me.columnCodigoBanco.AllowDBNull = false
            Me.columnCodigoBanco.Unique = true
            Me.columnNombreBanco.AllowDBNull = false
            Me.columnNombreBanco.MaxLength = 100
            Me.columnAbreviaturaBanco.AllowDBNull = false
            Me.columnAbreviaturaBanco.MaxLength = 15
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnAyudaDomiciliaciones.MaxLength = 255
            Me.columnAyudaTransacciones.MaxLength = 255
            Me.columnCedulaBanco.MaxLength = 15
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_Bancos")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_Bancos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_BancosRow() As PC_BancosRow
            Return CType(Me.NewRow,PC_BancosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_BancosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_BancosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_BancosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowChanged(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_BancosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowChanging(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_BancosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowDeleted(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_BancosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_BancosRowDeleting(Me, New PC_BancosRowChangeEvent(CType(e.Row,PC_BancosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_BancosRow(ByVal row As PC_BancosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_Bancos = New PC_Bancos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_BancosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_BancosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_Bancos As PC_BancosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_Bancos = CType(Me.Table,PC_BancosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoBanco() As Integer
            Get
                Return CType(Me(Me.tablePC_Bancos.CodigoBancoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Bancos.CodigoBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Return CType(Me(Me.tablePC_Bancos.NombreBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Bancos.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaBanco() As String
            Get
                Return CType(Me(Me.tablePC_Bancos.AbreviaturaBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Bancos.AbreviaturaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_Bancos.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Bancos.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AyudaDomiciliaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Bancos.AyudaDomiciliacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AyudaDomiciliaciones' de la tabla 'PC_Bancos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Bancos.AyudaDomiciliacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AyudaTransacciones() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Bancos.AyudaTransaccionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AyudaTransacciones' de la tabla 'PC_Bancos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Bancos.AyudaTransaccionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaBanco() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Bancos.CedulaBancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaBanco' de la tabla 'PC_Bancos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Bancos.CedulaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAyudaDomiciliacionesNull() As Boolean
            Return Me.IsNull(Me.tablePC_Bancos.AyudaDomiciliacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAyudaDomiciliacionesNull()
            Me(Me.tablePC_Bancos.AyudaDomiciliacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAyudaTransaccionesNull() As Boolean
            Return Me.IsNull(Me.tablePC_Bancos.AyudaTransaccionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAyudaTransaccionesNull()
            Me(Me.tablePC_Bancos.AyudaTransaccionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaBancoNull() As Boolean
            Return Me.IsNull(Me.tablePC_Bancos.CedulaBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaBancoNull()
            Me(Me.tablePC_Bancos.CedulaBancoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_BancosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_BancosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_BancosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_BancosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_Monedas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_Monedas
    Inherits Global.System.Data.DataSet
    
    Private tablePC_Monedas As PC_MonedasDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_Monedas")) Is Nothing) Then
                MyBase.Tables.Add(New PC_MonedasDataTable(ds.Tables("PC_Monedas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_Monedas() As PC_MonedasDataTable
        Get
            Return Me.tablePC_Monedas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_Monedas = CType(MyBase.Clone,PC_Monedas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_Monedas")) Is Nothing) Then
                MyBase.Tables.Add(New PC_MonedasDataTable(ds.Tables("PC_Monedas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_Monedas = CType(MyBase.Tables("PC_Monedas"),PC_MonedasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_Monedas) Is Nothing) Then
                Me.tablePC_Monedas.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_Monedas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PC_Monedas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_Monedas = New PC_MonedasDataTable
        MyBase.Tables.Add(Me.tablePC_Monedas)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_Monedas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_Monedas = New PC_Monedas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_MonedasRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_MonedasRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_MonedasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnSigno As Global.System.Data.DataColumn
        
        Private columnTCCompra As Global.System.Data.DataColumn
        
        Private columnTCVenta As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnFechaCambio As Global.System.Data.DataColumn
        
        Private columnUsuarioCambio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_Monedas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SignoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSigno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCCompraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCCompra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_MonedasRow
            Get
                Return CType(Me.Rows(index),PC_MonedasRow)
            End Get
        End Property
        
        Public Event PC_MonedasRowChanging As PC_MonedasRowChangeEventHandler
        
        Public Event PC_MonedasRowChanged As PC_MonedasRowChangeEventHandler
        
        Public Event PC_MonedasRowDeleting As PC_MonedasRowChangeEventHandler
        
        Public Event PC_MonedasRowDeleted As PC_MonedasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_MonedasRow(ByVal row As PC_MonedasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_MonedasRow(ByVal CodigoMoneda As Integer, ByVal NombreMoneda As String, ByVal Signo As String, ByVal TCCompra As Decimal, ByVal TCVenta As Decimal, ByVal Estado As String, ByVal FechaCambio As Date, ByVal UsuarioCambio As String) As PC_MonedasRow
            Dim rowPC_MonedasRow As PC_MonedasRow = CType(Me.NewRow,PC_MonedasRow)
            Dim columnValuesArray() As Object = New Object() {CodigoMoneda, NombreMoneda, Signo, TCCompra, TCVenta, Estado, FechaCambio, UsuarioCambio}
            rowPC_MonedasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_MonedasRow)
            Return rowPC_MonedasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoMoneda(ByVal CodigoMoneda As Integer) As PC_MonedasRow
            Return CType(Me.Rows.Find(New Object() {CodigoMoneda}),PC_MonedasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_MonedasDataTable = CType(MyBase.Clone,PC_MonedasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_MonedasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnSigno = MyBase.Columns("Signo")
            Me.columnTCCompra = MyBase.Columns("TCCompra")
            Me.columnTCVenta = MyBase.Columns("TCVenta")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnFechaCambio = MyBase.Columns("FechaCambio")
            Me.columnUsuarioCambio = MyBase.Columns("UsuarioCambio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnSigno = New Global.System.Data.DataColumn("Signo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSigno)
            Me.columnTCCompra = New Global.System.Data.DataColumn("TCCompra", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCCompra)
            Me.columnTCVenta = New Global.System.Data.DataColumn("TCVenta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCVenta)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnFechaCambio = New Global.System.Data.DataColumn("FechaCambio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCambio)
            Me.columnUsuarioCambio = New Global.System.Data.DataColumn("UsuarioCambio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioCambio)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoMoneda}, true))
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnCodigoMoneda.Unique = true
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnSigno.AllowDBNull = false
            Me.columnSigno.MaxLength = 1
            Me.columnTCCompra.AllowDBNull = false
            Me.columnTCVenta.AllowDBNull = false
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnFechaCambio.AllowDBNull = false
            Me.columnUsuarioCambio.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_Monedas")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_Monedas")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_MonedasRow() As PC_MonedasRow
            Return CType(Me.NewRow,PC_MonedasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_MonedasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_MonedasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_MonedasRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_MonedasRowChanged(Me, New PC_MonedasRowChangeEvent(CType(e.Row,PC_MonedasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_MonedasRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_MonedasRowChanging(Me, New PC_MonedasRowChangeEvent(CType(e.Row,PC_MonedasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_MonedasRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_MonedasRowDeleted(Me, New PC_MonedasRowChangeEvent(CType(e.Row,PC_MonedasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_MonedasRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_MonedasRowDeleting(Me, New PC_MonedasRowChangeEvent(CType(e.Row,PC_MonedasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_MonedasRow(ByVal row As PC_MonedasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_Monedas = New PC_Monedas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_MonedasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_MonedasRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_Monedas As PC_MonedasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_Monedas = CType(Me.Table,PC_MonedasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_Monedas.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Monedas.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_Monedas.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_Monedas.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Signo() As String
            Get
                Return CType(Me(Me.tablePC_Monedas.SignoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Monedas.SignoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCCompra() As Decimal
            Get
                Return CType(Me(Me.tablePC_Monedas.TCCompraColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_Monedas.TCCompraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCVenta() As Decimal
            Get
                Return CType(Me(Me.tablePC_Monedas.TCVentaColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_Monedas.TCVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_Monedas.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Monedas.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCambio() As Date
            Get
                Return CType(Me(Me.tablePC_Monedas.FechaCambioColumn),Date)
            End Get
            Set
                Me(Me.tablePC_Monedas.FechaCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioCambio() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_Monedas.UsuarioCambioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioCambio' de la tabla 'PC_Monedas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Monedas.UsuarioCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioCambioNull() As Boolean
            Return Me.IsNull(Me.tablePC_Monedas.UsuarioCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioCambioNull()
            Me(Me.tablePC_Monedas.UsuarioCambioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_MonedasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_MonedasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_MonedasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_MonedasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_Motivos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_Motivos
    Inherits Global.System.Data.DataSet
    
    Private tablePC_Motivos As PC_MotivosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_Motivos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_MotivosDataTable(ds.Tables("PC_Motivos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_Motivos() As PC_MotivosDataTable
        Get
            Return Me.tablePC_Motivos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_Motivos = CType(MyBase.Clone,PC_Motivos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_Motivos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_MotivosDataTable(ds.Tables("PC_Motivos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_Motivos = CType(MyBase.Tables("PC_Motivos"),PC_MotivosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_Motivos) Is Nothing) Then
                Me.tablePC_Motivos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_Motivos"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_Motivos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_Motivos = New PC_MotivosDataTable
        MyBase.Tables.Add(Me.tablePC_Motivos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_Motivos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_Motivos = New PC_Motivos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_MotivosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_MotivosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_MotivosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoMotivo As Global.System.Data.DataColumn
        
        Private columnDescripcionMotivo As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnEsDeSINPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_Motivos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionMotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EsDeSINPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEsDeSINPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_MotivosRow
            Get
                Return CType(Me.Rows(index),PC_MotivosRow)
            End Get
        End Property
        
        Public Event PC_MotivosRowChanging As PC_MotivosRowChangeEventHandler
        
        Public Event PC_MotivosRowChanged As PC_MotivosRowChangeEventHandler
        
        Public Event PC_MotivosRowDeleting As PC_MotivosRowChangeEventHandler
        
        Public Event PC_MotivosRowDeleted As PC_MotivosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_MotivosRow(ByVal row As PC_MotivosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_MotivosRow(ByVal CodigoMotivo As Integer, ByVal DescripcionMotivo As String, ByVal Tipo As String, ByVal Estado As String, ByVal EsDeSINPE As Boolean) As PC_MotivosRow
            Dim rowPC_MotivosRow As PC_MotivosRow = CType(Me.NewRow,PC_MotivosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoMotivo, DescripcionMotivo, Tipo, Estado, EsDeSINPE}
            rowPC_MotivosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_MotivosRow)
            Return rowPC_MotivosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoMotivo(ByVal CodigoMotivo As Integer) As PC_MotivosRow
            Return CType(Me.Rows.Find(New Object() {CodigoMotivo}),PC_MotivosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_MotivosDataTable = CType(MyBase.Clone,PC_MotivosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_MotivosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoMotivo = MyBase.Columns("CodigoMotivo")
            Me.columnDescripcionMotivo = MyBase.Columns("DescripcionMotivo")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnEsDeSINPE = MyBase.Columns("EsDeSINPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoMotivo = New Global.System.Data.DataColumn("CodigoMotivo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivo)
            Me.columnDescripcionMotivo = New Global.System.Data.DataColumn("DescripcionMotivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionMotivo)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnEsDeSINPE = New Global.System.Data.DataColumn("EsDeSINPE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEsDeSINPE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoMotivo}, true))
            Me.columnCodigoMotivo.AllowDBNull = false
            Me.columnCodigoMotivo.Unique = true
            Me.columnDescripcionMotivo.AllowDBNull = false
            Me.columnDescripcionMotivo.MaxLength = 80
            Me.columnTipo.AllowDBNull = false
            Me.columnTipo.MaxLength = 1
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnEsDeSINPE.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_Motivos")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_Motivos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_MotivosRow() As PC_MotivosRow
            Return CType(Me.NewRow,PC_MotivosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_MotivosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_MotivosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_MotivosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_MotivosRowChanged(Me, New PC_MotivosRowChangeEvent(CType(e.Row,PC_MotivosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_MotivosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_MotivosRowChanging(Me, New PC_MotivosRowChangeEvent(CType(e.Row,PC_MotivosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_MotivosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_MotivosRowDeleted(Me, New PC_MotivosRowChangeEvent(CType(e.Row,PC_MotivosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_MotivosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_MotivosRowDeleting(Me, New PC_MotivosRowChangeEvent(CType(e.Row,PC_MotivosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_MotivosRow(ByVal row As PC_MotivosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_Motivos = New PC_Motivos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_MotivosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_MotivosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_Motivos As PC_MotivosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_Motivos = CType(Me.Table,PC_MotivosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivo() As Integer
            Get
                Return CType(Me(Me.tablePC_Motivos.CodigoMotivoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Motivos.CodigoMotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionMotivo() As String
            Get
                Return CType(Me(Me.tablePC_Motivos.DescripcionMotivoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Motivos.DescripcionMotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tablePC_Motivos.TipoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Motivos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_Motivos.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Motivos.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EsDeSINPE() As Boolean
            Get
                Return CType(Me(Me.tablePC_Motivos.EsDeSINPEColumn),Boolean)
            End Get
            Set
                Me(Me.tablePC_Motivos.EsDeSINPEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_MotivosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_MotivosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_MotivosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_MotivosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_Servicios"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_Servicios
    Inherits Global.System.Data.DataSet
    
    Private tablePC_Servicios As PC_ServiciosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_Servicios")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ServiciosDataTable(ds.Tables("PC_Servicios")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_Servicios() As PC_ServiciosDataTable
        Get
            Return Me.tablePC_Servicios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_Servicios = CType(MyBase.Clone,PC_Servicios)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_Servicios")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ServiciosDataTable(ds.Tables("PC_Servicios")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_Servicios = CType(MyBase.Tables("PC_Servicios"),PC_ServiciosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_Servicios) Is Nothing) Then
                Me.tablePC_Servicios.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_Servicios"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_Servicios.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_Servicios = New PC_ServiciosDataTable
        MyBase.Tables.Add(Me.tablePC_Servicios)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_Servicios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_Servicios = New PC_Servicios
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ServiciosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ServiciosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ServiciosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoServicio As Global.System.Data.DataColumn
        
        Private columnNombreServicio As Global.System.Data.DataColumn
        
        Private columnNomCortoServicio As Global.System.Data.DataColumn
        
        Private columnAbreviaturaServicio As Global.System.Data.DataColumn
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnCodigoMotivoEnvio As Global.System.Data.DataColumn
        
        Private columnConsecutivoInicial As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnMontoMaximoColones As Global.System.Data.DataColumn
        
        Private columnMontoMaximoDolares As Global.System.Data.DataColumn
        
        Private columnMontoMaximoColones2 As Global.System.Data.DataColumn
        
        Private columnMontoMaximoDolares2 As Global.System.Data.DataColumn
        
        Private columnIniciaEnvio As Global.System.Data.DataColumn
        
        Private columnFinalizaEnvio As Global.System.Data.DataColumn
        
        Private columnIniciaDevolucion As Global.System.Data.DataColumn
        
        Private columnFinalizaDevolucion As Global.System.Data.DataColumn
        
        Private columnMontoMaximoEuros As Global.System.Data.DataColumn
        
        Private columnMontoMaximoEuros2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_Servicios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomCortoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomCortoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivoEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsecutivoInicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsecutivoInicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoColonesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoColones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoDolaresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoDolares
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoColones2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoColones2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoDolares2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoDolares2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IniciaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIniciaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalizaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalizaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IniciaDevolucionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIniciaDevolucion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalizaDevolucionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalizaDevolucion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoEurosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoEuros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoMaximoEuros2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoMaximoEuros2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ServiciosRow
            Get
                Return CType(Me.Rows(index),PC_ServiciosRow)
            End Get
        End Property
        
        Public Event PC_ServiciosRowChanging As PC_ServiciosRowChangeEventHandler
        
        Public Event PC_ServiciosRowChanged As PC_ServiciosRowChangeEventHandler
        
        Public Event PC_ServiciosRowDeleting As PC_ServiciosRowChangeEventHandler
        
        Public Event PC_ServiciosRowDeleted As PC_ServiciosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ServiciosRow(ByVal row As PC_ServiciosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ServiciosRow( _
                    ByVal CodigoServicio As Integer,  _
                    ByVal NombreServicio As String,  _
                    ByVal NomCortoServicio As String,  _
                    ByVal AbreviaturaServicio As String,  _
                    ByVal TipoOperacion As String,  _
                    ByVal CodigoMotivoEnvio As Integer,  _
                    ByVal ConsecutivoInicial As Integer,  _
                    ByVal Estado As String,  _
                    ByVal MontoMaximoColones As Decimal,  _
                    ByVal MontoMaximoDolares As Decimal,  _
                    ByVal MontoMaximoColones2 As Decimal,  _
                    ByVal MontoMaximoDolares2 As Decimal,  _
                    ByVal IniciaEnvio As Date,  _
                    ByVal FinalizaEnvio As Date,  _
                    ByVal IniciaDevolucion As Date,  _
                    ByVal FinalizaDevolucion As Date,  _
                    ByVal MontoMaximoEuros As Decimal,  _
                    ByVal MontoMaximoEuros2 As Decimal) As PC_ServiciosRow
            Dim rowPC_ServiciosRow As PC_ServiciosRow = CType(Me.NewRow,PC_ServiciosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoServicio, NombreServicio, NomCortoServicio, AbreviaturaServicio, TipoOperacion, CodigoMotivoEnvio, ConsecutivoInicial, Estado, MontoMaximoColones, MontoMaximoDolares, MontoMaximoColones2, MontoMaximoDolares2, IniciaEnvio, FinalizaEnvio, IniciaDevolucion, FinalizaDevolucion, MontoMaximoEuros, MontoMaximoEuros2}
            rowPC_ServiciosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ServiciosRow)
            Return rowPC_ServiciosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigoServicio(ByVal CodigoServicio As Integer) As PC_ServiciosRow
            Return CType(Me.Rows.Find(New Object() {CodigoServicio}),PC_ServiciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ServiciosDataTable = CType(MyBase.Clone,PC_ServiciosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ServiciosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoServicio = MyBase.Columns("CodigoServicio")
            Me.columnNombreServicio = MyBase.Columns("NombreServicio")
            Me.columnNomCortoServicio = MyBase.Columns("NomCortoServicio")
            Me.columnAbreviaturaServicio = MyBase.Columns("AbreviaturaServicio")
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnCodigoMotivoEnvio = MyBase.Columns("CodigoMotivoEnvio")
            Me.columnConsecutivoInicial = MyBase.Columns("ConsecutivoInicial")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnMontoMaximoColones = MyBase.Columns("MontoMaximoColones")
            Me.columnMontoMaximoDolares = MyBase.Columns("MontoMaximoDolares")
            Me.columnMontoMaximoColones2 = MyBase.Columns("MontoMaximoColones2")
            Me.columnMontoMaximoDolares2 = MyBase.Columns("MontoMaximoDolares2")
            Me.columnIniciaEnvio = MyBase.Columns("IniciaEnvio")
            Me.columnFinalizaEnvio = MyBase.Columns("FinalizaEnvio")
            Me.columnIniciaDevolucion = MyBase.Columns("IniciaDevolucion")
            Me.columnFinalizaDevolucion = MyBase.Columns("FinalizaDevolucion")
            Me.columnMontoMaximoEuros = MyBase.Columns("MontoMaximoEuros")
            Me.columnMontoMaximoEuros2 = MyBase.Columns("MontoMaximoEuros2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoServicio = New Global.System.Data.DataColumn("CodigoServicio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicio)
            Me.columnNombreServicio = New Global.System.Data.DataColumn("NombreServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreServicio)
            Me.columnNomCortoServicio = New Global.System.Data.DataColumn("NomCortoServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCortoServicio)
            Me.columnAbreviaturaServicio = New Global.System.Data.DataColumn("AbreviaturaServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaServicio)
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnCodigoMotivoEnvio = New Global.System.Data.DataColumn("CodigoMotivoEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivoEnvio)
            Me.columnConsecutivoInicial = New Global.System.Data.DataColumn("ConsecutivoInicial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsecutivoInicial)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnMontoMaximoColones = New Global.System.Data.DataColumn("MontoMaximoColones", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoColones)
            Me.columnMontoMaximoDolares = New Global.System.Data.DataColumn("MontoMaximoDolares", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoDolares)
            Me.columnMontoMaximoColones2 = New Global.System.Data.DataColumn("MontoMaximoColones2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoColones2)
            Me.columnMontoMaximoDolares2 = New Global.System.Data.DataColumn("MontoMaximoDolares2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoDolares2)
            Me.columnIniciaEnvio = New Global.System.Data.DataColumn("IniciaEnvio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIniciaEnvio)
            Me.columnFinalizaEnvio = New Global.System.Data.DataColumn("FinalizaEnvio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalizaEnvio)
            Me.columnIniciaDevolucion = New Global.System.Data.DataColumn("IniciaDevolucion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIniciaDevolucion)
            Me.columnFinalizaDevolucion = New Global.System.Data.DataColumn("FinalizaDevolucion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalizaDevolucion)
            Me.columnMontoMaximoEuros = New Global.System.Data.DataColumn("MontoMaximoEuros", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoEuros)
            Me.columnMontoMaximoEuros2 = New Global.System.Data.DataColumn("MontoMaximoEuros2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoMaximoEuros2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCodigoServicio}, true))
            Me.columnCodigoServicio.AllowDBNull = false
            Me.columnCodigoServicio.Unique = true
            Me.columnNombreServicio.AllowDBNull = false
            Me.columnNombreServicio.MaxLength = 60
            Me.columnNomCortoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.MaxLength = 30
            Me.columnAbreviaturaServicio.AllowDBNull = false
            Me.columnAbreviaturaServicio.MaxLength = 5
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnCodigoMotivoEnvio.AllowDBNull = false
            Me.columnConsecutivoInicial.AllowDBNull = false
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnMontoMaximoEuros.AllowDBNull = false
            Me.columnMontoMaximoEuros2.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_Servicios")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_Servicios")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ServiciosRow() As PC_ServiciosRow
            Return CType(Me.NewRow,PC_ServiciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ServiciosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ServiciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ServiciosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ServiciosRowChanged(Me, New PC_ServiciosRowChangeEvent(CType(e.Row,PC_ServiciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ServiciosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ServiciosRowChanging(Me, New PC_ServiciosRowChangeEvent(CType(e.Row,PC_ServiciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ServiciosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ServiciosRowDeleted(Me, New PC_ServiciosRowChangeEvent(CType(e.Row,PC_ServiciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ServiciosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ServiciosRowDeleting(Me, New PC_ServiciosRowChangeEvent(CType(e.Row,PC_ServiciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ServiciosRow(ByVal row As PC_ServiciosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_Servicios = New PC_Servicios
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ServiciosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ServiciosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_Servicios As PC_ServiciosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_Servicios = CType(Me.Table,PC_ServiciosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicio() As Integer
            Get
                Return CType(Me(Me.tablePC_Servicios.CodigoServicioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Servicios.CodigoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreServicio() As String
            Get
                Return CType(Me(Me.tablePC_Servicios.NombreServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_Servicios.NombreServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCortoServicio() As String
            Get
                Return CType(Me(Me.tablePC_Servicios.NomCortoServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_Servicios.NomCortoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaServicio() As String
            Get
                Return CType(Me(Me.tablePC_Servicios.AbreviaturaServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_Servicios.AbreviaturaServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_Servicios.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_Servicios.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivoEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_Servicios.CodigoMotivoEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Servicios.CodigoMotivoEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsecutivoInicial() As Integer
            Get
                Return CType(Me(Me.tablePC_Servicios.ConsecutivoInicialColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_Servicios.ConsecutivoInicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_Servicios.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_Servicios.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoColones() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.MontoMaximoColonesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMaximoColones' de la tabla 'PC_Servicios' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.MontoMaximoColonesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoDolares() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.MontoMaximoDolaresColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMaximoDolares' de la tabla 'PC_Servicios' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.MontoMaximoDolaresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoColones2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.MontoMaximoColones2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMaximoColones2' de la tabla 'PC_Servicios' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.MontoMaximoColones2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoDolares2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.MontoMaximoDolares2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMaximoDolares2' de la tabla 'PC_Servicios' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.MontoMaximoDolares2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IniciaEnvio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.IniciaEnvioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IniciaEnvio' de la tabla 'PC_Servicios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.IniciaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinalizaEnvio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.FinalizaEnvioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FinalizaEnvio' de la tabla 'PC_Servicios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.FinalizaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IniciaDevolucion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.IniciaDevolucionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IniciaDevolucion' de la tabla 'PC_Servicios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.IniciaDevolucionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinalizaDevolucion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_Servicios.FinalizaDevolucionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FinalizaDevolucion' de la tabla 'PC_Servicios' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_Servicios.FinalizaDevolucionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoEuros() As Decimal
            Get
                Return CType(Me(Me.tablePC_Servicios.MontoMaximoEurosColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_Servicios.MontoMaximoEurosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoMaximoEuros2() As Decimal
            Get
                Return CType(Me(Me.tablePC_Servicios.MontoMaximoEuros2Column),Decimal)
            End Get
            Set
                Me(Me.tablePC_Servicios.MontoMaximoEuros2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoMaximoColonesNull() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.MontoMaximoColonesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoMaximoColonesNull()
            Me(Me.tablePC_Servicios.MontoMaximoColonesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoMaximoDolaresNull() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.MontoMaximoDolaresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoMaximoDolaresNull()
            Me(Me.tablePC_Servicios.MontoMaximoDolaresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoMaximoColones2Null() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.MontoMaximoColones2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoMaximoColones2Null()
            Me(Me.tablePC_Servicios.MontoMaximoColones2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoMaximoDolares2Null() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.MontoMaximoDolares2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoMaximoDolares2Null()
            Me(Me.tablePC_Servicios.MontoMaximoDolares2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIniciaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.IniciaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIniciaEnvioNull()
            Me(Me.tablePC_Servicios.IniciaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalizaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.FinalizaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalizaEnvioNull()
            Me(Me.tablePC_Servicios.FinalizaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIniciaDevolucionNull() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.IniciaDevolucionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIniciaDevolucionNull()
            Me(Me.tablePC_Servicios.IniciaDevolucionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalizaDevolucionNull() As Boolean
            Return Me.IsNull(Me.tablePC_Servicios.FinalizaDevolucionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalizaDevolucionNull()
            Me(Me.tablePC_Servicios.FinalizaDevolucionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ServiciosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ServiciosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ServiciosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ServiciosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CatalogoUsuarioCentroCosto"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CatalogoUsuarioCentroCosto
    Inherits Global.System.Data.DataSet
    
    Private tablePC_UsuariosCentros As PC_UsuariosCentrosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_UsuariosCentros")) Is Nothing) Then
                MyBase.Tables.Add(New PC_UsuariosCentrosDataTable(ds.Tables("PC_UsuariosCentros")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_UsuariosCentros() As PC_UsuariosCentrosDataTable
        Get
            Return Me.tablePC_UsuariosCentros
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CatalogoUsuarioCentroCosto = CType(MyBase.Clone,CatalogoUsuarioCentroCosto)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_UsuariosCentros")) Is Nothing) Then
                MyBase.Tables.Add(New PC_UsuariosCentrosDataTable(ds.Tables("PC_UsuariosCentros")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_UsuariosCentros = CType(MyBase.Tables("PC_UsuariosCentros"),PC_UsuariosCentrosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_UsuariosCentros) Is Nothing) Then
                Me.tablePC_UsuariosCentros.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CatalogoUsuarioCentroCosto"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/CatalogoUsuarioCentroCosto.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_UsuariosCentros = New PC_UsuariosCentrosDataTable
        MyBase.Tables.Add(Me.tablePC_UsuariosCentros)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_UsuariosCentros() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CatalogoUsuarioCentroCosto = New CatalogoUsuarioCentroCosto
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_UsuariosCentrosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_UsuariosCentrosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_UsuariosCentrosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnCodigoUsuario As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_UsuariosCentros"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_UsuariosCentrosRow
            Get
                Return CType(Me.Rows(index),PC_UsuariosCentrosRow)
            End Get
        End Property
        
        Public Event PC_UsuariosCentrosRowChanging As PC_UsuariosCentrosRowChangeEventHandler
        
        Public Event PC_UsuariosCentrosRowChanged As PC_UsuariosCentrosRowChangeEventHandler
        
        Public Event PC_UsuariosCentrosRowDeleting As PC_UsuariosCentrosRowChangeEventHandler
        
        Public Event PC_UsuariosCentrosRowDeleted As PC_UsuariosCentrosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_UsuariosCentrosRow(ByVal row As PC_UsuariosCentrosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_UsuariosCentrosRow(ByVal CodigoCentro As Integer, ByVal NombreCentro As String, ByVal Estado As String, ByVal CodigoUsuario As Integer, ByVal Usuario As String, ByVal NombreUsuario As String) As PC_UsuariosCentrosRow
            Dim rowPC_UsuariosCentrosRow As PC_UsuariosCentrosRow = CType(Me.NewRow,PC_UsuariosCentrosRow)
            Dim columnValuesArray() As Object = New Object() {CodigoCentro, NombreCentro, Estado, CodigoUsuario, Usuario, NombreUsuario}
            rowPC_UsuariosCentrosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_UsuariosCentrosRow)
            Return rowPC_UsuariosCentrosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_UsuariosCentrosDataTable = CType(MyBase.Clone,PC_UsuariosCentrosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_UsuariosCentrosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnCodigoUsuario = MyBase.Columns("CodigoUsuario")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnCodigoUsuario = New Global.System.Data.DataColumn("CodigoUsuario", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoUsuario)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnCodigoCentro.AllowDBNull = false
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnEstado.AllowDBNull = false
            Me.columnEstado.MaxLength = 1
            Me.columnCodigoUsuario.AllowDBNull = false
            Me.columnUsuario.AllowDBNull = false
            Me.columnUsuario.MaxLength = 30
            Me.columnNombreUsuario.ReadOnly = true
            Me.columnNombreUsuario.MaxLength = 98
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_UsuariosCentrosRow() As PC_UsuariosCentrosRow
            Return CType(Me.NewRow,PC_UsuariosCentrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_UsuariosCentrosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_UsuariosCentrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_UsuariosCentrosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_UsuariosCentrosRowChanged(Me, New PC_UsuariosCentrosRowChangeEvent(CType(e.Row,PC_UsuariosCentrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_UsuariosCentrosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_UsuariosCentrosRowChanging(Me, New PC_UsuariosCentrosRowChangeEvent(CType(e.Row,PC_UsuariosCentrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_UsuariosCentrosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_UsuariosCentrosRowDeleted(Me, New PC_UsuariosCentrosRowChangeEvent(CType(e.Row,PC_UsuariosCentrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_UsuariosCentrosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_UsuariosCentrosRowDeleting(Me, New PC_UsuariosCentrosRowChangeEvent(CType(e.Row,PC_UsuariosCentrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_UsuariosCentrosRow(ByVal row As PC_UsuariosCentrosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CatalogoUsuarioCentroCosto = New CatalogoUsuarioCentroCosto
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_UsuariosCentrosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_UsuariosCentrosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_UsuariosCentros As PC_UsuariosCentrosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_UsuariosCentros = CType(Me.Table,PC_UsuariosCentrosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Return CType(Me(Me.tablePC_UsuariosCentros.CodigoCentroColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_UsuariosCentros.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_UsuariosCentros.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_UsuariosCentros.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Return CType(Me(Me.tablePC_UsuariosCentros.EstadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_UsuariosCentros.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoUsuario() As Integer
            Get
                Return CType(Me(Me.tablePC_UsuariosCentros.CodigoUsuarioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_UsuariosCentros.CodigoUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Return CType(Me(Me.tablePC_UsuariosCentros.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePC_UsuariosCentros.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_UsuariosCentros.NombreUsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuario' de la tabla 'PC_UsuariosCentros' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_UsuariosCentros.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablePC_UsuariosCentros.NombreUsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioNull()
            Me(Me.tablePC_UsuariosCentros.NombreUsuarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_UsuariosCentrosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_UsuariosCentrosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_UsuariosCentrosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_UsuariosCentrosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DomiciliacionesPeriodo"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DomiciliacionesPeriodo
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteDomicPeriodo As PC_ReporteDomicPeriodoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteDomicPeriodo")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteDomicPeriodoDataTable(ds.Tables("PC_ReporteDomicPeriodo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteDomicPeriodo() As PC_ReporteDomicPeriodoDataTable
        Get
            Return Me.tablePC_ReporteDomicPeriodo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DomiciliacionesPeriodo = CType(MyBase.Clone,DomiciliacionesPeriodo)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteDomicPeriodo")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteDomicPeriodoDataTable(ds.Tables("PC_ReporteDomicPeriodo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteDomicPeriodo = CType(MyBase.Tables("PC_ReporteDomicPeriodo"),PC_ReporteDomicPeriodoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteDomicPeriodo) Is Nothing) Then
                Me.tablePC_ReporteDomicPeriodo.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DomiciliacionesPeriodo"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/DomiciliacionesPeriodo.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteDomicPeriodo = New PC_ReporteDomicPeriodoDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteDomicPeriodo)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteDomicPeriodo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DomiciliacionesPeriodo = New DomiciliacionesPeriodo
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteDomicPeriodoRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteDomicPeriodoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteDomicPeriodoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCedulaPersonaServ As Global.System.Data.DataColumn
        
        Private columnNombrePersonaServ As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnEstadoOrden As Global.System.Data.DataColumn
        
        Private columnCodigoMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnFechaRechazo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteDomicPeriodo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaServColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersonaServ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaServColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersonaServ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteDomicPeriodoRow
            Get
                Return CType(Me.Rows(index),PC_ReporteDomicPeriodoRow)
            End Get
        End Property
        
        Public Event PC_ReporteDomicPeriodoRowChanging As PC_ReporteDomicPeriodoRowChangeEventHandler
        
        Public Event PC_ReporteDomicPeriodoRowChanged As PC_ReporteDomicPeriodoRowChangeEventHandler
        
        Public Event PC_ReporteDomicPeriodoRowDeleting As PC_ReporteDomicPeriodoRowChangeEventHandler
        
        Public Event PC_ReporteDomicPeriodoRowDeleted As PC_ReporteDomicPeriodoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteDomicPeriodoRow(ByVal row As PC_ReporteDomicPeriodoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteDomicPeriodoRow(ByVal NumeroOrden As Integer, ByVal CedulaPersonaServ As String, ByVal NombrePersonaServ As String, ByVal CuentaCliente As String, ByVal UsuarioRegistra As String, ByVal FechaRegistro As Date, ByVal EstadoOrden As String, ByVal CodigoMotivoRechazo As Integer, ByVal FechaRechazo As Date) As PC_ReporteDomicPeriodoRow
            Dim rowPC_ReporteDomicPeriodoRow As PC_ReporteDomicPeriodoRow = CType(Me.NewRow,PC_ReporteDomicPeriodoRow)
            Dim columnValuesArray() As Object = New Object() {NumeroOrden, CedulaPersonaServ, NombrePersonaServ, CuentaCliente, UsuarioRegistra, FechaRegistro, EstadoOrden, CodigoMotivoRechazo, FechaRechazo}
            rowPC_ReporteDomicPeriodoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteDomicPeriodoRow)
            Return rowPC_ReporteDomicPeriodoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteDomicPeriodoDataTable = CType(MyBase.Clone,PC_ReporteDomicPeriodoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteDomicPeriodoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCedulaPersonaServ = MyBase.Columns("CedulaPersonaServ")
            Me.columnNombrePersonaServ = MyBase.Columns("NombrePersonaServ")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnEstadoOrden = MyBase.Columns("EstadoOrden")
            Me.columnCodigoMotivoRechazo = MyBase.Columns("CodigoMotivoRechazo")
            Me.columnFechaRechazo = MyBase.Columns("FechaRechazo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCedulaPersonaServ = New Global.System.Data.DataColumn("CedulaPersonaServ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersonaServ)
            Me.columnNombrePersonaServ = New Global.System.Data.DataColumn("NombrePersonaServ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersonaServ)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnEstadoOrden = New Global.System.Data.DataColumn("EstadoOrden", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoOrden)
            Me.columnCodigoMotivoRechazo = New Global.System.Data.DataColumn("CodigoMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivoRechazo)
            Me.columnFechaRechazo = New Global.System.Data.DataColumn("FechaRechazo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRechazo)
            Me.columnNumeroOrden.AllowDBNull = false
            Me.columnCedulaPersonaServ.AllowDBNull = false
            Me.columnCedulaPersonaServ.MaxLength = 20
            Me.columnNombrePersonaServ.AllowDBNull = false
            Me.columnNombrePersonaServ.MaxLength = 100
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnEstadoOrden.AllowDBNull = false
            Me.columnEstadoOrden.MaxLength = 1
            Me.columnFechaRechazo.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteDomicPeriodoRow() As PC_ReporteDomicPeriodoRow
            Return CType(Me.NewRow,PC_ReporteDomicPeriodoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteDomicPeriodoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteDomicPeriodoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteDomicPeriodoRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDomicPeriodoRowChanged(Me, New PC_ReporteDomicPeriodoRowChangeEvent(CType(e.Row,PC_ReporteDomicPeriodoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteDomicPeriodoRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDomicPeriodoRowChanging(Me, New PC_ReporteDomicPeriodoRowChangeEvent(CType(e.Row,PC_ReporteDomicPeriodoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteDomicPeriodoRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDomicPeriodoRowDeleted(Me, New PC_ReporteDomicPeriodoRowChangeEvent(CType(e.Row,PC_ReporteDomicPeriodoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteDomicPeriodoRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDomicPeriodoRowDeleting(Me, New PC_ReporteDomicPeriodoRowChangeEvent(CType(e.Row,PC_ReporteDomicPeriodoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteDomicPeriodoRow(ByVal row As PC_ReporteDomicPeriodoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DomiciliacionesPeriodo = New DomiciliacionesPeriodo
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteDomicPeriodoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteDomicPeriodoRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteDomicPeriodo As PC_ReporteDomicPeriodoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteDomicPeriodo = CType(Me.Table,PC_ReporteDomicPeriodoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteDomicPeriodo.NumeroOrdenColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersonaServ() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDomicPeriodo.CedulaPersonaServColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.CedulaPersonaServColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersonaServ() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDomicPeriodo.NombrePersonaServColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.NombrePersonaServColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDomicPeriodo.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDomicPeriodo.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteDomicPeriodo.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoOrden() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDomicPeriodo.EstadoOrdenColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.EstadoOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDomicPeriodo.CodigoMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoMotivoRechazo' de la tabla 'PC_ReporteDomicPeriodo'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.CodigoMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRechazo() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDomicPeriodo.FechaRechazoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaRechazo' de la tabla 'PC_ReporteDomicPeriodo' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDomicPeriodo.FechaRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDomicPeriodo.CodigoMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoMotivoRechazoNull()
            Me(Me.tablePC_ReporteDomicPeriodo.CodigoMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDomicPeriodo.FechaRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaRechazoNull()
            Me(Me.tablePC_ReporteDomicPeriodo.FechaRechazoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteDomicPeriodoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteDomicPeriodoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteDomicPeriodoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteDomicPeriodoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("EstadisticasporConcepto"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class EstadisticasporConcepto
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteEstadisticasPorConcepto As PC_ReporteEstadisticasPorConceptoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteEstadisticasPorConcepto")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEstadisticasPorConceptoDataTable(ds.Tables("PC_ReporteEstadisticasPorConcepto")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteEstadisticasPorConcepto() As PC_ReporteEstadisticasPorConceptoDataTable
        Get
            Return Me.tablePC_ReporteEstadisticasPorConcepto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As EstadisticasporConcepto = CType(MyBase.Clone,EstadisticasporConcepto)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteEstadisticasPorConcepto")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEstadisticasPorConceptoDataTable(ds.Tables("PC_ReporteEstadisticasPorConcepto")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteEstadisticasPorConcepto = CType(MyBase.Tables("PC_ReporteEstadisticasPorConcepto"),PC_ReporteEstadisticasPorConceptoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteEstadisticasPorConcepto) Is Nothing) Then
                Me.tablePC_ReporteEstadisticasPorConcepto.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "EstadisticasporConcepto"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/EstadisticasporConcepto.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteEstadisticasPorConcepto = New PC_ReporteEstadisticasPorConceptoDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteEstadisticasPorConcepto)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteEstadisticasPorConcepto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As EstadisticasporConcepto = New EstadisticasporConcepto
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteEstadisticasPorConceptoRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteEstadisticasPorConceptoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteEstadisticasPorConceptoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteEstadisticasPorConcepto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteEstadisticasPorConceptoRow
            Get
                Return CType(Me.Rows(index),PC_ReporteEstadisticasPorConceptoRow)
            End Get
        End Property
        
        Public Event PC_ReporteEstadisticasPorConceptoRowChanging As PC_ReporteEstadisticasPorConceptoRowChangeEventHandler
        
        Public Event PC_ReporteEstadisticasPorConceptoRowChanged As PC_ReporteEstadisticasPorConceptoRowChangeEventHandler
        
        Public Event PC_ReporteEstadisticasPorConceptoRowDeleting As PC_ReporteEstadisticasPorConceptoRowChangeEventHandler
        
        Public Event PC_ReporteEstadisticasPorConceptoRowDeleted As PC_ReporteEstadisticasPorConceptoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteEstadisticasPorConceptoRow(ByVal row As PC_ReporteEstadisticasPorConceptoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteEstadisticasPorConceptoRow(ByVal CodigoConcepto As Integer, ByVal NombreConcepto As String, ByVal FechaRegistro As Date, ByVal TipoOperacion As String, ByVal EstadoTran As String, ByVal Monto As Decimal, ByVal CodigoMoneda As Integer, ByVal NombreMoneda As String) As PC_ReporteEstadisticasPorConceptoRow
            Dim rowPC_ReporteEstadisticasPorConceptoRow As PC_ReporteEstadisticasPorConceptoRow = CType(Me.NewRow,PC_ReporteEstadisticasPorConceptoRow)
            Dim columnValuesArray() As Object = New Object() {CodigoConcepto, NombreConcepto, FechaRegistro, TipoOperacion, EstadoTran, Monto, CodigoMoneda, NombreMoneda}
            rowPC_ReporteEstadisticasPorConceptoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteEstadisticasPorConceptoRow)
            Return rowPC_ReporteEstadisticasPorConceptoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteEstadisticasPorConceptoDataTable = CType(MyBase.Clone,PC_ReporteEstadisticasPorConceptoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteEstadisticasPorConceptoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnMonto.AllowDBNull = false
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteEstadisticasPorConceptoRow() As PC_ReporteEstadisticasPorConceptoRow
            Return CType(Me.NewRow,PC_ReporteEstadisticasPorConceptoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteEstadisticasPorConceptoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteEstadisticasPorConceptoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteEstadisticasPorConceptoRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorConceptoRowChanged(Me, New PC_ReporteEstadisticasPorConceptoRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorConceptoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteEstadisticasPorConceptoRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorConceptoRowChanging(Me, New PC_ReporteEstadisticasPorConceptoRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorConceptoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteEstadisticasPorConceptoRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorConceptoRowDeleted(Me, New PC_ReporteEstadisticasPorConceptoRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorConceptoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteEstadisticasPorConceptoRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorConceptoRowDeleting(Me, New PC_ReporteEstadisticasPorConceptoRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorConceptoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteEstadisticasPorConceptoRow(ByVal row As PC_ReporteEstadisticasPorConceptoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EstadisticasporConcepto = New EstadisticasporConcepto
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteEstadisticasPorConceptoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteEstadisticasPorConceptoRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteEstadisticasPorConcepto As PC_ReporteEstadisticasPorConceptoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteEstadisticasPorConcepto = CType(Me.Table,PC_ReporteEstadisticasPorConceptoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorConcepto.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorConcepto.NombreMonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteEstadisticasPorConceptoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteEstadisticasPorConceptoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteEstadisticasPorConceptoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteEstadisticasPorConceptoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("EstadisticasDestinatarios"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class EstadisticasDestinatarios
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteEstadisticasPorDestinatario As PC_ReporteEstadisticasPorDestinatarioDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteEstadisticasPorDestinatario")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEstadisticasPorDestinatarioDataTable(ds.Tables("PC_ReporteEstadisticasPorDestinatario")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteEstadisticasPorDestinatario() As PC_ReporteEstadisticasPorDestinatarioDataTable
        Get
            Return Me.tablePC_ReporteEstadisticasPorDestinatario
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As EstadisticasDestinatarios = CType(MyBase.Clone,EstadisticasDestinatarios)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteEstadisticasPorDestinatario")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEstadisticasPorDestinatarioDataTable(ds.Tables("PC_ReporteEstadisticasPorDestinatario")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteEstadisticasPorDestinatario = CType(MyBase.Tables("PC_ReporteEstadisticasPorDestinatario"),PC_ReporteEstadisticasPorDestinatarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteEstadisticasPorDestinatario) Is Nothing) Then
                Me.tablePC_ReporteEstadisticasPorDestinatario.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "EstadisticasDestinatarios"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/EstadisticasDestinatarios.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteEstadisticasPorDestinatario = New PC_ReporteEstadisticasPorDestinatarioDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteEstadisticasPorDestinatario)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteEstadisticasPorDestinatario() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As EstadisticasDestinatarios = New EstadisticasDestinatarios
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteEstadisticasPorDestinatarioRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteEstadisticasPorDestinatarioRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteEstadisticasPorDestinatarioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteEstadisticasPorDestinatario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteEstadisticasPorDestinatarioRow
            Get
                Return CType(Me.Rows(index),PC_ReporteEstadisticasPorDestinatarioRow)
            End Get
        End Property
        
        Public Event PC_ReporteEstadisticasPorDestinatarioRowChanging As PC_ReporteEstadisticasPorDestinatarioRowChangeEventHandler
        
        Public Event PC_ReporteEstadisticasPorDestinatarioRowChanged As PC_ReporteEstadisticasPorDestinatarioRowChangeEventHandler
        
        Public Event PC_ReporteEstadisticasPorDestinatarioRowDeleting As PC_ReporteEstadisticasPorDestinatarioRowChangeEventHandler
        
        Public Event PC_ReporteEstadisticasPorDestinatarioRowDeleted As PC_ReporteEstadisticasPorDestinatarioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteEstadisticasPorDestinatarioRow(ByVal row As PC_ReporteEstadisticasPorDestinatarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteEstadisticasPorDestinatarioRow(ByVal NombrePersona As String, ByVal TipoOperacion As String, ByVal FechaRegistro As Date, ByVal CedulaPersona As String, ByVal CodigoConcepto As Integer, ByVal NombreConcepto As String, ByVal EstadoTran As String, ByVal Monto As Decimal, ByVal CodigoMoneda As Integer, ByVal NombreMoneda As String) As PC_ReporteEstadisticasPorDestinatarioRow
            Dim rowPC_ReporteEstadisticasPorDestinatarioRow As PC_ReporteEstadisticasPorDestinatarioRow = CType(Me.NewRow,PC_ReporteEstadisticasPorDestinatarioRow)
            Dim columnValuesArray() As Object = New Object() {NombrePersona, TipoOperacion, FechaRegistro, CedulaPersona, CodigoConcepto, NombreConcepto, EstadoTran, Monto, CodigoMoneda, NombreMoneda}
            rowPC_ReporteEstadisticasPorDestinatarioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteEstadisticasPorDestinatarioRow)
            Return rowPC_ReporteEstadisticasPorDestinatarioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteEstadisticasPorDestinatarioDataTable = CType(MyBase.Clone,PC_ReporteEstadisticasPorDestinatarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteEstadisticasPorDestinatarioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnMonto.AllowDBNull = false
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteEstadisticasPorDestinatarioRow() As PC_ReporteEstadisticasPorDestinatarioRow
            Return CType(Me.NewRow,PC_ReporteEstadisticasPorDestinatarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteEstadisticasPorDestinatarioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteEstadisticasPorDestinatarioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteEstadisticasPorDestinatarioRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorDestinatarioRowChanged(Me, New PC_ReporteEstadisticasPorDestinatarioRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorDestinatarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteEstadisticasPorDestinatarioRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorDestinatarioRowChanging(Me, New PC_ReporteEstadisticasPorDestinatarioRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorDestinatarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteEstadisticasPorDestinatarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorDestinatarioRowDeleted(Me, New PC_ReporteEstadisticasPorDestinatarioRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorDestinatarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteEstadisticasPorDestinatarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEstadisticasPorDestinatarioRowDeleting(Me, New PC_ReporteEstadisticasPorDestinatarioRowChangeEvent(CType(e.Row,PC_ReporteEstadisticasPorDestinatarioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteEstadisticasPorDestinatarioRow(ByVal row As PC_ReporteEstadisticasPorDestinatarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As EstadisticasDestinatarios = New EstadisticasDestinatarios
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteEstadisticasPorDestinatarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteEstadisticasPorDestinatarioRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteEstadisticasPorDestinatario As PC_ReporteEstadisticasPorDestinatarioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteEstadisticasPorDestinatario = CType(Me.Table,PC_ReporteEstadisticasPorDestinatarioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEstadisticasPorDestinatario.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEstadisticasPorDestinatario.NombreMonedaColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteEstadisticasPorDestinatarioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteEstadisticasPorDestinatarioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteEstadisticasPorDestinatarioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteEstadisticasPorDestinatarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReporteDetalleEventos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReporteDetalleEventos
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteDetalleEventos As PC_ReporteDetalleEventosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteDetalleEventos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteDetalleEventosDataTable(ds.Tables("PC_ReporteDetalleEventos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteDetalleEventos() As PC_ReporteDetalleEventosDataTable
        Get
            Return Me.tablePC_ReporteDetalleEventos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReporteDetalleEventos = CType(MyBase.Clone,ReporteDetalleEventos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteDetalleEventos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteDetalleEventosDataTable(ds.Tables("PC_ReporteDetalleEventos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteDetalleEventos = CType(MyBase.Tables("PC_ReporteDetalleEventos"),PC_ReporteDetalleEventosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteDetalleEventos) Is Nothing) Then
                Me.tablePC_ReporteDetalleEventos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReporteDetalleEventos"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/ReporteDetalleEventos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteDetalleEventos = New PC_ReporteDetalleEventosDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteDetalleEventos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteDetalleEventos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReporteDetalleEventos = New ReporteDetalleEventos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteDetalleEventosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteDetalleEventosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteDetalleEventosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoEvento As Global.System.Data.DataColumn
        
        Private columnFechaEvento As Global.System.Data.DataColumn
        
        Private columnLogin As Global.System.Data.DataColumn
        
        Private columnDescripcionEvento As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnReferenciaTecnica As Global.System.Data.DataColumn
        
        Private columnDireccionIP As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteDetalleEventos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaTecnicaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenciaTecnica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteDetalleEventosRow
            Get
                Return CType(Me.Rows(index),PC_ReporteDetalleEventosRow)
            End Get
        End Property
        
        Public Event PC_ReporteDetalleEventosRowChanging As PC_ReporteDetalleEventosRowChangeEventHandler
        
        Public Event PC_ReporteDetalleEventosRowChanged As PC_ReporteDetalleEventosRowChangeEventHandler
        
        Public Event PC_ReporteDetalleEventosRowDeleting As PC_ReporteDetalleEventosRowChangeEventHandler
        
        Public Event PC_ReporteDetalleEventosRowDeleted As PC_ReporteDetalleEventosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteDetalleEventosRow(ByVal row As PC_ReporteDetalleEventosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteDetalleEventosRow(ByVal TipoEvento As Short, ByVal FechaEvento As Date, ByVal Login As String, ByVal DescripcionEvento As String, ByVal NumeroTransaccion As Integer, ByVal NumeroEnvio As Integer, ByVal ReferenciaTecnica As String, ByVal DireccionIP As String, ByVal NombreUsuario As String) As PC_ReporteDetalleEventosRow
            Dim rowPC_ReporteDetalleEventosRow As PC_ReporteDetalleEventosRow = CType(Me.NewRow,PC_ReporteDetalleEventosRow)
            Dim columnValuesArray() As Object = New Object() {TipoEvento, FechaEvento, Login, DescripcionEvento, NumeroTransaccion, NumeroEnvio, ReferenciaTecnica, DireccionIP, NombreUsuario}
            rowPC_ReporteDetalleEventosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteDetalleEventosRow)
            Return rowPC_ReporteDetalleEventosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteDetalleEventosDataTable = CType(MyBase.Clone,PC_ReporteDetalleEventosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteDetalleEventosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoEvento = MyBase.Columns("TipoEvento")
            Me.columnFechaEvento = MyBase.Columns("FechaEvento")
            Me.columnLogin = MyBase.Columns("Login")
            Me.columnDescripcionEvento = MyBase.Columns("DescripcionEvento")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnReferenciaTecnica = MyBase.Columns("ReferenciaTecnica")
            Me.columnDireccionIP = MyBase.Columns("DireccionIP")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoEvento = New Global.System.Data.DataColumn("TipoEvento", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoEvento)
            Me.columnFechaEvento = New Global.System.Data.DataColumn("FechaEvento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEvento)
            Me.columnLogin = New Global.System.Data.DataColumn("Login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogin)
            Me.columnDescripcionEvento = New Global.System.Data.DataColumn("DescripcionEvento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionEvento)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnReferenciaTecnica = New Global.System.Data.DataColumn("ReferenciaTecnica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenciaTecnica)
            Me.columnDireccionIP = New Global.System.Data.DataColumn("DireccionIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionIP)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnTipoEvento.AllowDBNull = false
            Me.columnFechaEvento.AllowDBNull = false
            Me.columnLogin.AllowDBNull = false
            Me.columnLogin.MaxLength = 30
            Me.columnDescripcionEvento.MaxLength = 500
            Me.columnReferenciaTecnica.AllowDBNull = false
            Me.columnReferenciaTecnica.MaxLength = 500
            Me.columnDireccionIP.MaxLength = 15
            Me.columnNombreUsuario.ReadOnly = true
            Me.columnNombreUsuario.MaxLength = 98
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteDetalleEventosRow() As PC_ReporteDetalleEventosRow
            Return CType(Me.NewRow,PC_ReporteDetalleEventosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteDetalleEventosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteDetalleEventosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteDetalleEventosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDetalleEventosRowChanged(Me, New PC_ReporteDetalleEventosRowChangeEvent(CType(e.Row,PC_ReporteDetalleEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteDetalleEventosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDetalleEventosRowChanging(Me, New PC_ReporteDetalleEventosRowChangeEvent(CType(e.Row,PC_ReporteDetalleEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteDetalleEventosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDetalleEventosRowDeleted(Me, New PC_ReporteDetalleEventosRowChangeEvent(CType(e.Row,PC_ReporteDetalleEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteDetalleEventosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDetalleEventosRowDeleting(Me, New PC_ReporteDetalleEventosRowChangeEvent(CType(e.Row,PC_ReporteDetalleEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteDetalleEventosRow(ByVal row As PC_ReporteDetalleEventosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReporteDetalleEventos = New ReporteDetalleEventos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteDetalleEventosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteDetalleEventosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteDetalleEventos As PC_ReporteDetalleEventosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteDetalleEventos = CType(Me.Table,PC_ReporteDetalleEventosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoEvento() As Short
            Get
                Return CType(Me(Me.tablePC_ReporteDetalleEventos.TipoEventoColumn),Short)
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.TipoEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEvento() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteDetalleEventos.FechaEventoColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.FechaEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Login() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDetalleEventos.LoginColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.LoginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionEvento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDetalleEventos.DescripcionEventoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionEvento' de la tabla 'PC_ReporteDetalleEventos'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.DescripcionEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDetalleEventos.NumeroTransaccionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroTransaccion' de la tabla 'PC_ReporteDetalleEventos'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDetalleEventos.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteDetalleEventos' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferenciaTecnica() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDetalleEventos.ReferenciaTecnicaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.ReferenciaTecnicaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionIP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDetalleEventos.DireccionIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DireccionIP' de la tabla 'PC_ReporteDetalleEventos' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.DireccionIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDetalleEventos.NombreUsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuario' de la tabla 'PC_ReporteDetalleEventos' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDetalleEventos.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionEventoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDetalleEventos.DescripcionEventoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionEventoNull()
            Me(Me.tablePC_ReporteDetalleEventos.DescripcionEventoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroTransaccionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDetalleEventos.NumeroTransaccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroTransaccionNull()
            Me(Me.tablePC_ReporteDetalleEventos.NumeroTransaccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDetalleEventos.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteDetalleEventos.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionIPNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDetalleEventos.DireccionIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionIPNull()
            Me(Me.tablePC_ReporteDetalleEventos.DireccionIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDetalleEventos.NombreUsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioNull()
            Me(Me.tablePC_ReporteDetalleEventos.NombreUsuarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteDetalleEventosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteDetalleEventosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteDetalleEventosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteDetalleEventosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReporteEventos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReporteEventos
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteEventos As PC_ReporteEventosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteEventos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEventosDataTable(ds.Tables("PC_ReporteEventos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteEventos() As PC_ReporteEventosDataTable
        Get
            Return Me.tablePC_ReporteEventos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReporteEventos = CType(MyBase.Clone,ReporteEventos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteEventos")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEventosDataTable(ds.Tables("PC_ReporteEventos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteEventos = CType(MyBase.Tables("PC_ReporteEventos"),PC_ReporteEventosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteEventos) Is Nothing) Then
                Me.tablePC_ReporteEventos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReporteEventos"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/ReporteEventos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteEventos = New PC_ReporteEventosDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteEventos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteEventos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReporteEventos = New ReporteEventos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteEventosRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteEventosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteEventosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoEvento As Global.System.Data.DataColumn
        
        Private columnFechaEvento As Global.System.Data.DataColumn
        
        Private columnLogin As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        Private columnDescripcionEvento As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteEventos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteEventosRow
            Get
                Return CType(Me.Rows(index),PC_ReporteEventosRow)
            End Get
        End Property
        
        Public Event PC_ReporteEventosRowChanging As PC_ReporteEventosRowChangeEventHandler
        
        Public Event PC_ReporteEventosRowChanged As PC_ReporteEventosRowChangeEventHandler
        
        Public Event PC_ReporteEventosRowDeleting As PC_ReporteEventosRowChangeEventHandler
        
        Public Event PC_ReporteEventosRowDeleted As PC_ReporteEventosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteEventosRow(ByVal row As PC_ReporteEventosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteEventosRow(ByVal TipoEvento As Short, ByVal FechaEvento As Date, ByVal Login As String, ByVal NombreUsuario As String, ByVal DescripcionEvento As String, ByVal NumeroTransaccion As Integer, ByVal NumeroEnvio As Integer) As PC_ReporteEventosRow
            Dim rowPC_ReporteEventosRow As PC_ReporteEventosRow = CType(Me.NewRow,PC_ReporteEventosRow)
            Dim columnValuesArray() As Object = New Object() {TipoEvento, FechaEvento, Login, NombreUsuario, DescripcionEvento, NumeroTransaccion, NumeroEnvio}
            rowPC_ReporteEventosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteEventosRow)
            Return rowPC_ReporteEventosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteEventosDataTable = CType(MyBase.Clone,PC_ReporteEventosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteEventosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoEvento = MyBase.Columns("TipoEvento")
            Me.columnFechaEvento = MyBase.Columns("FechaEvento")
            Me.columnLogin = MyBase.Columns("Login")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
            Me.columnDescripcionEvento = MyBase.Columns("DescripcionEvento")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoEvento = New Global.System.Data.DataColumn("TipoEvento", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoEvento)
            Me.columnFechaEvento = New Global.System.Data.DataColumn("FechaEvento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEvento)
            Me.columnLogin = New Global.System.Data.DataColumn("Login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogin)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnDescripcionEvento = New Global.System.Data.DataColumn("DescripcionEvento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionEvento)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnTipoEvento.AllowDBNull = false
            Me.columnFechaEvento.AllowDBNull = false
            Me.columnLogin.AllowDBNull = false
            Me.columnLogin.MaxLength = 35
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnNombreUsuario.MaxLength = 50
            Me.columnDescripcionEvento.AllowDBNull = false
            Me.columnDescripcionEvento.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteEventosRow() As PC_ReporteEventosRow
            Return CType(Me.NewRow,PC_ReporteEventosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteEventosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteEventosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteEventosRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosRowChanged(Me, New PC_ReporteEventosRowChangeEvent(CType(e.Row,PC_ReporteEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteEventosRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosRowChanging(Me, New PC_ReporteEventosRowChangeEvent(CType(e.Row,PC_ReporteEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteEventosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosRowDeleted(Me, New PC_ReporteEventosRowChangeEvent(CType(e.Row,PC_ReporteEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteEventosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosRowDeleting(Me, New PC_ReporteEventosRowChangeEvent(CType(e.Row,PC_ReporteEventosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteEventosRow(ByVal row As PC_ReporteEventosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReporteEventos = New ReporteEventos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteEventosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteEventosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteEventos As PC_ReporteEventosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteEventos = CType(Me.Table,PC_ReporteEventosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoEvento() As Short
            Get
                Return CType(Me(Me.tablePC_ReporteEventos.TipoEventoColumn),Short)
            End Get
            Set
                Me(Me.tablePC_ReporteEventos.TipoEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEvento() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteEventos.FechaEventoColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteEventos.FechaEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Login() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEventos.LoginColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEventos.LoginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEventos.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEventos.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionEvento() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEventos.DescripcionEventoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEventos.DescripcionEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventos.NumeroTransaccionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroTransaccion' de la tabla 'PC_ReporteEventos' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventos.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventos.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteEventos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventos.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroTransaccionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventos.NumeroTransaccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroTransaccionNull()
            Me(Me.tablePC_ReporteEventos.NumeroTransaccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventos.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteEventos.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteEventosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteEventosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteEventosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteEventosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReporteEventosEnvio"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReporteEventosEnvio
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteEventosEnvio As PC_ReporteEventosEnvioDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteEventosEnvio")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEventosEnvioDataTable(ds.Tables("PC_ReporteEventosEnvio")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteEventosEnvio() As PC_ReporteEventosEnvioDataTable
        Get
            Return Me.tablePC_ReporteEventosEnvio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReporteEventosEnvio = CType(MyBase.Clone,ReporteEventosEnvio)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteEventosEnvio")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEventosEnvioDataTable(ds.Tables("PC_ReporteEventosEnvio")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteEventosEnvio = CType(MyBase.Tables("PC_ReporteEventosEnvio"),PC_ReporteEventosEnvioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteEventosEnvio) Is Nothing) Then
                Me.tablePC_ReporteEventosEnvio.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReporteEventosEnvio"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/ReporteEventosEnvio.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteEventosEnvio = New PC_ReporteEventosEnvioDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteEventosEnvio)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteEventosEnvio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReporteEventosEnvio = New ReporteEventosEnvio
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteEventosEnvioRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteEventosEnvioRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteEventosEnvioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoEvento As Global.System.Data.DataColumn
        
        Private columnFechaEvento As Global.System.Data.DataColumn
        
        Private columnLogin As Global.System.Data.DataColumn
        
        Private columnDescripcionEvento As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnDireccionIP As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteEventosEnvio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteEventosEnvioRow
            Get
                Return CType(Me.Rows(index),PC_ReporteEventosEnvioRow)
            End Get
        End Property
        
        Public Event PC_ReporteEventosEnvioRowChanging As PC_ReporteEventosEnvioRowChangeEventHandler
        
        Public Event PC_ReporteEventosEnvioRowChanged As PC_ReporteEventosEnvioRowChangeEventHandler
        
        Public Event PC_ReporteEventosEnvioRowDeleting As PC_ReporteEventosEnvioRowChangeEventHandler
        
        Public Event PC_ReporteEventosEnvioRowDeleted As PC_ReporteEventosEnvioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteEventosEnvioRow(ByVal row As PC_ReporteEventosEnvioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteEventosEnvioRow(ByVal TipoEvento As Short, ByVal FechaEvento As Date, ByVal Login As String, ByVal DescripcionEvento As String, ByVal NumeroTransaccion As Integer, ByVal NumeroEnvio As Integer, ByVal DireccionIP As String, ByVal NombreUsuario As String) As PC_ReporteEventosEnvioRow
            Dim rowPC_ReporteEventosEnvioRow As PC_ReporteEventosEnvioRow = CType(Me.NewRow,PC_ReporteEventosEnvioRow)
            Dim columnValuesArray() As Object = New Object() {TipoEvento, FechaEvento, Login, DescripcionEvento, NumeroTransaccion, NumeroEnvio, DireccionIP, NombreUsuario}
            rowPC_ReporteEventosEnvioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteEventosEnvioRow)
            Return rowPC_ReporteEventosEnvioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteEventosEnvioDataTable = CType(MyBase.Clone,PC_ReporteEventosEnvioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteEventosEnvioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoEvento = MyBase.Columns("TipoEvento")
            Me.columnFechaEvento = MyBase.Columns("FechaEvento")
            Me.columnLogin = MyBase.Columns("Login")
            Me.columnDescripcionEvento = MyBase.Columns("DescripcionEvento")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnDireccionIP = MyBase.Columns("DireccionIP")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoEvento = New Global.System.Data.DataColumn("TipoEvento", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoEvento)
            Me.columnFechaEvento = New Global.System.Data.DataColumn("FechaEvento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEvento)
            Me.columnLogin = New Global.System.Data.DataColumn("Login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogin)
            Me.columnDescripcionEvento = New Global.System.Data.DataColumn("DescripcionEvento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionEvento)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnDireccionIP = New Global.System.Data.DataColumn("DireccionIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionIP)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnTipoEvento.AllowDBNull = false
            Me.columnFechaEvento.AllowDBNull = false
            Me.columnLogin.AllowDBNull = false
            Me.columnLogin.MaxLength = 35
            Me.columnDescripcionEvento.MaxLength = 500
            Me.columnDireccionIP.MaxLength = 15
            Me.columnNombreUsuario.ReadOnly = true
            Me.columnNombreUsuario.MaxLength = 98
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteEventosEnvioRow() As PC_ReporteEventosEnvioRow
            Return CType(Me.NewRow,PC_ReporteEventosEnvioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteEventosEnvioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteEventosEnvioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteEventosEnvioRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosEnvioRowChanged(Me, New PC_ReporteEventosEnvioRowChangeEvent(CType(e.Row,PC_ReporteEventosEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteEventosEnvioRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosEnvioRowChanging(Me, New PC_ReporteEventosEnvioRowChangeEvent(CType(e.Row,PC_ReporteEventosEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteEventosEnvioRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosEnvioRowDeleted(Me, New PC_ReporteEventosEnvioRowChangeEvent(CType(e.Row,PC_ReporteEventosEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteEventosEnvioRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosEnvioRowDeleting(Me, New PC_ReporteEventosEnvioRowChangeEvent(CType(e.Row,PC_ReporteEventosEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteEventosEnvioRow(ByVal row As PC_ReporteEventosEnvioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReporteEventosEnvio = New ReporteEventosEnvio
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteEventosEnvioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteEventosEnvioRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteEventosEnvio As PC_ReporteEventosEnvioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteEventosEnvio = CType(Me.Table,PC_ReporteEventosEnvioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoEvento() As Short
            Get
                Return CType(Me(Me.tablePC_ReporteEventosEnvio.TipoEventoColumn),Short)
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.TipoEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEvento() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteEventosEnvio.FechaEventoColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.FechaEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Login() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEventosEnvio.LoginColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.LoginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionEvento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosEnvio.DescripcionEventoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionEvento' de la tabla 'PC_ReporteEventosEnvio' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.DescripcionEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosEnvio.NumeroTransaccionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroTransaccion' de la tabla 'PC_ReporteEventosEnvio' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosEnvio.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteEventosEnvio' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionIP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosEnvio.DireccionIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DireccionIP' de la tabla 'PC_ReporteEventosEnvio' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.DireccionIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosEnvio.NombreUsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuario' de la tabla 'PC_ReporteEventosEnvio' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosEnvio.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionEventoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosEnvio.DescripcionEventoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionEventoNull()
            Me(Me.tablePC_ReporteEventosEnvio.DescripcionEventoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroTransaccionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosEnvio.NumeroTransaccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroTransaccionNull()
            Me(Me.tablePC_ReporteEventosEnvio.NumeroTransaccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosEnvio.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteEventosEnvio.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionIPNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosEnvio.DireccionIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionIPNull()
            Me(Me.tablePC_ReporteEventosEnvio.DireccionIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosEnvio.NombreUsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioNull()
            Me(Me.tablePC_ReporteEventosEnvio.NombreUsuarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteEventosEnvioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteEventosEnvioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteEventosEnvioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteEventosEnvioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReporteEventosTran"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReporteEventosTran
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteEventosTran As PC_ReporteEventosTranDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteEventosTran")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEventosTranDataTable(ds.Tables("PC_ReporteEventosTran")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteEventosTran() As PC_ReporteEventosTranDataTable
        Get
            Return Me.tablePC_ReporteEventosTran
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReporteEventosTran = CType(MyBase.Clone,ReporteEventosTran)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteEventosTran")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEventosTranDataTable(ds.Tables("PC_ReporteEventosTran")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteEventosTran = CType(MyBase.Tables("PC_ReporteEventosTran"),PC_ReporteEventosTranDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteEventosTran) Is Nothing) Then
                Me.tablePC_ReporteEventosTran.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReporteEventosTran"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/ReporteEventosTran.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteEventosTran = New PC_ReporteEventosTranDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteEventosTran)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteEventosTran() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReporteEventosTran = New ReporteEventosTran
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteEventosTranRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteEventosTranRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteEventosTranDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoEvento As Global.System.Data.DataColumn
        
        Private columnFechaEvento As Global.System.Data.DataColumn
        
        Private columnLogin As Global.System.Data.DataColumn
        
        Private columnDescripcionEvento As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnDireccionIP As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteEventosTran"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionEventoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionEvento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccionIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteEventosTranRow
            Get
                Return CType(Me.Rows(index),PC_ReporteEventosTranRow)
            End Get
        End Property
        
        Public Event PC_ReporteEventosTranRowChanging As PC_ReporteEventosTranRowChangeEventHandler
        
        Public Event PC_ReporteEventosTranRowChanged As PC_ReporteEventosTranRowChangeEventHandler
        
        Public Event PC_ReporteEventosTranRowDeleting As PC_ReporteEventosTranRowChangeEventHandler
        
        Public Event PC_ReporteEventosTranRowDeleted As PC_ReporteEventosTranRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteEventosTranRow(ByVal row As PC_ReporteEventosTranRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteEventosTranRow(ByVal TipoEvento As Short, ByVal FechaEvento As Date, ByVal Login As String, ByVal DescripcionEvento As String, ByVal NumeroTransaccion As Integer, ByVal NumeroEnvio As Integer, ByVal DireccionIP As String, ByVal NombreUsuario As String) As PC_ReporteEventosTranRow
            Dim rowPC_ReporteEventosTranRow As PC_ReporteEventosTranRow = CType(Me.NewRow,PC_ReporteEventosTranRow)
            Dim columnValuesArray() As Object = New Object() {TipoEvento, FechaEvento, Login, DescripcionEvento, NumeroTransaccion, NumeroEnvio, DireccionIP, NombreUsuario}
            rowPC_ReporteEventosTranRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteEventosTranRow)
            Return rowPC_ReporteEventosTranRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteEventosTranDataTable = CType(MyBase.Clone,PC_ReporteEventosTranDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteEventosTranDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoEvento = MyBase.Columns("TipoEvento")
            Me.columnFechaEvento = MyBase.Columns("FechaEvento")
            Me.columnLogin = MyBase.Columns("Login")
            Me.columnDescripcionEvento = MyBase.Columns("DescripcionEvento")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnDireccionIP = MyBase.Columns("DireccionIP")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoEvento = New Global.System.Data.DataColumn("TipoEvento", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoEvento)
            Me.columnFechaEvento = New Global.System.Data.DataColumn("FechaEvento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEvento)
            Me.columnLogin = New Global.System.Data.DataColumn("Login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogin)
            Me.columnDescripcionEvento = New Global.System.Data.DataColumn("DescripcionEvento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionEvento)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnDireccionIP = New Global.System.Data.DataColumn("DireccionIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccionIP)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnTipoEvento.AllowDBNull = false
            Me.columnFechaEvento.AllowDBNull = false
            Me.columnLogin.AllowDBNull = false
            Me.columnLogin.MaxLength = 35
            Me.columnDescripcionEvento.MaxLength = 500
            Me.columnDireccionIP.MaxLength = 15
            Me.columnNombreUsuario.ReadOnly = true
            Me.columnNombreUsuario.MaxLength = 98
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteEventosTranRow() As PC_ReporteEventosTranRow
            Return CType(Me.NewRow,PC_ReporteEventosTranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteEventosTranRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteEventosTranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteEventosTranRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosTranRowChanged(Me, New PC_ReporteEventosTranRowChangeEvent(CType(e.Row,PC_ReporteEventosTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteEventosTranRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosTranRowChanging(Me, New PC_ReporteEventosTranRowChangeEvent(CType(e.Row,PC_ReporteEventosTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteEventosTranRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosTranRowDeleted(Me, New PC_ReporteEventosTranRowChangeEvent(CType(e.Row,PC_ReporteEventosTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteEventosTranRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEventosTranRowDeleting(Me, New PC_ReporteEventosTranRowChangeEvent(CType(e.Row,PC_ReporteEventosTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteEventosTranRow(ByVal row As PC_ReporteEventosTranRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReporteEventosTran = New ReporteEventosTran
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteEventosTranDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteEventosTranRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteEventosTran As PC_ReporteEventosTranDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteEventosTran = CType(Me.Table,PC_ReporteEventosTranDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoEvento() As Short
            Get
                Return CType(Me(Me.tablePC_ReporteEventosTran.TipoEventoColumn),Short)
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.TipoEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEvento() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteEventosTran.FechaEventoColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.FechaEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Login() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEventosTran.LoginColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.LoginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionEvento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosTran.DescripcionEventoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionEvento' de la tabla 'PC_ReporteEventosTran' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.DescripcionEventoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosTran.NumeroTransaccionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroTransaccion' de la tabla 'PC_ReporteEventosTran' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosTran.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteEventosTran' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DireccionIP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosTran.DireccionIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DireccionIP' de la tabla 'PC_ReporteEventosTran' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.DireccionIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEventosTran.NombreUsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuario' de la tabla 'PC_ReporteEventosTran' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEventosTran.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionEventoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosTran.DescripcionEventoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionEventoNull()
            Me(Me.tablePC_ReporteEventosTran.DescripcionEventoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroTransaccionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosTran.NumeroTransaccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroTransaccionNull()
            Me(Me.tablePC_ReporteEventosTran.NumeroTransaccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosTran.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteEventosTran.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionIPNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosTran.DireccionIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionIPNull()
            Me(Me.tablePC_ReporteEventosTran.DireccionIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEventosTran.NombreUsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioNull()
            Me(Me.tablePC_ReporteEventosTran.NombreUsuarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteEventosTranRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteEventosTranRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteEventosTranRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteEventosTranRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_ReportePropuestas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_ReportePropuestas
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReportePropuestas As PC_ReportePropuestasDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReportePropuestas")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReportePropuestasDataTable(ds.Tables("PC_ReportePropuestas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_ReportePropuestas() As PC_ReportePropuestasDataTable
        Get
            Return Me.tablePC_ReportePropuestas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_ReportePropuestas = CType(MyBase.Clone,PC_ReportePropuestas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReportePropuestas")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReportePropuestasDataTable(ds.Tables("PC_ReportePropuestas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReportePropuestas = CType(MyBase.Tables("PC_ReportePropuestas"),PC_ReportePropuestasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReportePropuestas) Is Nothing) Then
                Me.tablePC_ReportePropuestas.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_ReportePropuestas"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_ReportePropuestas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReportePropuestas = New PC_ReportePropuestasDataTable
        MyBase.Tables.Add(Me.tablePC_ReportePropuestas)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_ReportePropuestas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_ReportePropuestas = New PC_ReportePropuestas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReportePropuestasRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReportePropuestasRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReportePropuestasDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnDescripcionGen As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnEstadoEnvioSinpe As Global.System.Data.DataColumn
        
        Private columnNombreServicio As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnDescMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnAbreviaturaBanco As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReportePropuestas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionGenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionGen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoEnvioSinpeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoEnvioSinpe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReportePropuestasRow
            Get
                Return CType(Me.Rows(index),PC_ReportePropuestasRow)
            End Get
        End Property
        
        Public Event PC_ReportePropuestasRowChanging As PC_ReportePropuestasRowChangeEventHandler
        
        Public Event PC_ReportePropuestasRowChanged As PC_ReportePropuestasRowChangeEventHandler
        
        Public Event PC_ReportePropuestasRowDeleting As PC_ReportePropuestasRowChangeEventHandler
        
        Public Event PC_ReportePropuestasRowDeleted As PC_ReportePropuestasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReportePropuestasRow(ByVal row As PC_ReportePropuestasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReportePropuestasRow( _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal NombreMoneda As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NombreConcepto As String,  _
                    ByVal DescripcionGen As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal TipoOperacion As String,  _
                    ByVal EstadoEnvioSinpe As String,  _
                    ByVal NombreServicio As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal FechaCiclo As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal DescMotivoRechazo As String,  _
                    ByVal AbreviaturaBanco As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal CuentaClienteOrigen As String) As PC_ReportePropuestasRow
            Dim rowPC_ReportePropuestasRow As PC_ReportePropuestasRow = CType(Me.NewRow,PC_ReportePropuestasRow)
            Dim columnValuesArray() As Object = New Object() {NumeroEnvio, CedulaPersona, NombrePersona, CuentaCliente, NombreMoneda, Monto, NombreConcepto, DescripcionGen, NumeroTransaccion, NumeroDocumento, TipoOperacion, EstadoEnvioSinpe, NombreServicio, EstadoTran, FechaCiclo, CodMotivoRechazo, DescMotivoRechazo, AbreviaturaBanco, CedulaClienteOrigen, CuentaClienteOrigen}
            rowPC_ReportePropuestasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReportePropuestasRow)
            Return rowPC_ReportePropuestasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReportePropuestasDataTable = CType(MyBase.Clone,PC_ReportePropuestasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReportePropuestasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnDescripcionGen = MyBase.Columns("DescripcionGen")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnEstadoEnvioSinpe = MyBase.Columns("EstadoEnvioSinpe")
            Me.columnNombreServicio = MyBase.Columns("NombreServicio")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnDescMotivoRechazo = MyBase.Columns("DescMotivoRechazo")
            Me.columnAbreviaturaBanco = MyBase.Columns("AbreviaturaBanco")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnDescripcionGen = New Global.System.Data.DataColumn("DescripcionGen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionGen)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnEstadoEnvioSinpe = New Global.System.Data.DataColumn("EstadoEnvioSinpe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoEnvioSinpe)
            Me.columnNombreServicio = New Global.System.Data.DataColumn("NombreServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreServicio)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnDescMotivoRechazo = New Global.System.Data.DataColumn("DescMotivoRechazo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescMotivoRechazo)
            Me.columnAbreviaturaBanco = New Global.System.Data.DataColumn("AbreviaturaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaBanco)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnNumeroEnvio.AllowDBNull = false
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnMonto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnDescripcionGen.AllowDBNull = false
            Me.columnDescripcionGen.MaxLength = 100
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnEstadoEnvioSinpe.AllowDBNull = false
            Me.columnEstadoEnvioSinpe.MaxLength = 1
            Me.columnNombreServicio.AllowDBNull = false
            Me.columnNombreServicio.MaxLength = 60
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnFechaCiclo.AllowDBNull = false
            Me.columnDescMotivoRechazo.ReadOnly = true
            Me.columnDescMotivoRechazo.MaxLength = 50
            Me.columnAbreviaturaBanco.AllowDBNull = false
            Me.columnAbreviaturaBanco.MaxLength = 15
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_ReportePropuestas")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_ReportePropuestas")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReportePropuestasRow() As PC_ReportePropuestasRow
            Return CType(Me.NewRow,PC_ReportePropuestasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReportePropuestasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReportePropuestasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReportePropuestasRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasRowChanged(Me, New PC_ReportePropuestasRowChangeEvent(CType(e.Row,PC_ReportePropuestasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReportePropuestasRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasRowChanging(Me, New PC_ReportePropuestasRowChangeEvent(CType(e.Row,PC_ReportePropuestasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReportePropuestasRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasRowDeleted(Me, New PC_ReportePropuestasRowChangeEvent(CType(e.Row,PC_ReportePropuestasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReportePropuestasRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasRowDeleting(Me, New PC_ReportePropuestasRowChangeEvent(CType(e.Row,PC_ReportePropuestasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReportePropuestasRow(ByVal row As PC_ReportePropuestasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_ReportePropuestas = New PC_ReportePropuestas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReportePropuestasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReportePropuestasRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReportePropuestas As PC_ReportePropuestasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReportePropuestas = CType(Me.Table,PC_ReportePropuestasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.NumeroEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionGen() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.DescripcionGenColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.DescripcionGenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReportePropuestas.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReportePropuestas' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoEnvioSinpe() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.EstadoEnvioSinpeColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.EstadoEnvioSinpeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.NombreServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.NombreServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.FechaCicloColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReportePropuestas.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReportePropuestas' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescMotivoRechazo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReportePropuestas.DescMotivoRechazoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescMotivoRechazo' de la tabla 'PC_ReportePropuestas' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.DescMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestas.AbreviaturaBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.AbreviaturaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReportePropuestas.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReportePropuestas' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReportePropuestas.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReportePropuestas' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReportePropuestas.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReportePropuestas.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReportePropuestas.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReportePropuestas.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReportePropuestas.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReportePropuestas.DescMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescMotivoRechazoNull()
            Me(Me.tablePC_ReportePropuestas.DescMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReportePropuestas.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReportePropuestas.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReportePropuestas.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReportePropuestas.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReportePropuestasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReportePropuestasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReportePropuestasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReportePropuestasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_ReporteDevoluciones"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_ReporteDevoluciones
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteDevoluciones As PC_ReporteDevolucionesDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteDevoluciones")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteDevolucionesDataTable(ds.Tables("PC_ReporteDevoluciones")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_ReporteDevoluciones() As PC_ReporteDevolucionesDataTable
        Get
            Return Me.tablePC_ReporteDevoluciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_ReporteDevoluciones = CType(MyBase.Clone,PC_ReporteDevoluciones)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteDevoluciones")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteDevolucionesDataTable(ds.Tables("PC_ReporteDevoluciones")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteDevoluciones = CType(MyBase.Tables("PC_ReporteDevoluciones"),PC_ReporteDevolucionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteDevoluciones) Is Nothing) Then
                Me.tablePC_ReporteDevoluciones.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_ReporteDevoluciones"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PC_ReporteDevoluciones.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteDevoluciones = New PC_ReporteDevolucionesDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteDevoluciones)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_ReporteDevoluciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_ReporteDevoluciones = New PC_ReporteDevoluciones
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteDevolucionesRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteDevolucionesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteDevolucionesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnNombreCanal As Global.System.Data.DataColumn
        
        Private columnAbreviaturaBanco As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnDescripcionGen As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnEstadoEnvioSinpe As Global.System.Data.DataColumn
        
        Private columnNombreServicio As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnDescMotivoRechazo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteDevoluciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionGenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionGen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoEnvioSinpeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoEnvioSinpe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteDevolucionesRow
            Get
                Return CType(Me.Rows(index),PC_ReporteDevolucionesRow)
            End Get
        End Property
        
        Public Event PC_ReporteDevolucionesRowChanging As PC_ReporteDevolucionesRowChangeEventHandler
        
        Public Event PC_ReporteDevolucionesRowChanged As PC_ReporteDevolucionesRowChangeEventHandler
        
        Public Event PC_ReporteDevolucionesRowDeleting As PC_ReporteDevolucionesRowChangeEventHandler
        
        Public Event PC_ReporteDevolucionesRowDeleted As PC_ReporteDevolucionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteDevolucionesRow(ByVal row As PC_ReporteDevolucionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteDevolucionesRow( _
                    ByVal NombreBanco As String,  _
                    ByVal NombreCanal As String,  _
                    ByVal AbreviaturaBanco As String,  _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal CuentaClienteOrigen As String,  _
                    ByVal NombreMoneda As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NombreConcepto As String,  _
                    ByVal DescripcionGen As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal TipoOperacion As String,  _
                    ByVal EstadoEnvioSinpe As String,  _
                    ByVal NombreServicio As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal FechaCiclo As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal DescMotivoRechazo As String) As PC_ReporteDevolucionesRow
            Dim rowPC_ReporteDevolucionesRow As PC_ReporteDevolucionesRow = CType(Me.NewRow,PC_ReporteDevolucionesRow)
            Dim columnValuesArray() As Object = New Object() {NombreBanco, NombreCanal, AbreviaturaBanco, NumeroEnvio, CedulaPersona, NombrePersona, CuentaCliente, CedulaClienteOrigen, CuentaClienteOrigen, NombreMoneda, Monto, NombreConcepto, DescripcionGen, NumeroTransaccion, NumeroDocumento, TipoOperacion, EstadoEnvioSinpe, NombreServicio, EstadoTran, FechaCiclo, CodMotivoRechazo, DescMotivoRechazo}
            rowPC_ReporteDevolucionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteDevolucionesRow)
            Return rowPC_ReporteDevolucionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteDevolucionesDataTable = CType(MyBase.Clone,PC_ReporteDevolucionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteDevolucionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnNombreCanal = MyBase.Columns("NombreCanal")
            Me.columnAbreviaturaBanco = MyBase.Columns("AbreviaturaBanco")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnDescripcionGen = MyBase.Columns("DescripcionGen")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnEstadoEnvioSinpe = MyBase.Columns("EstadoEnvioSinpe")
            Me.columnNombreServicio = MyBase.Columns("NombreServicio")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnDescMotivoRechazo = MyBase.Columns("DescMotivoRechazo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnNombreCanal = New Global.System.Data.DataColumn("NombreCanal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCanal)
            Me.columnAbreviaturaBanco = New Global.System.Data.DataColumn("AbreviaturaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaBanco)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnDescripcionGen = New Global.System.Data.DataColumn("DescripcionGen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionGen)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnEstadoEnvioSinpe = New Global.System.Data.DataColumn("EstadoEnvioSinpe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoEnvioSinpe)
            Me.columnNombreServicio = New Global.System.Data.DataColumn("NombreServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreServicio)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnDescMotivoRechazo = New Global.System.Data.DataColumn("DescMotivoRechazo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescMotivoRechazo)
            Me.columnNombreBanco.AllowDBNull = false
            Me.columnNombreBanco.MaxLength = 100
            Me.columnNombreCanal.ReadOnly = true
            Me.columnNombreCanal.MaxLength = 255
            Me.columnAbreviaturaBanco.AllowDBNull = false
            Me.columnAbreviaturaBanco.MaxLength = 15
            Me.columnNumeroEnvio.AllowDBNull = false
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnCuentaClienteOrigen.ReadOnly = true
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnMonto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnDescripcionGen.ReadOnly = true
            Me.columnDescripcionGen.MaxLength = 255
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnNumeroDocumento.ReadOnly = true
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnEstadoEnvioSinpe.AllowDBNull = false
            Me.columnEstadoEnvioSinpe.MaxLength = 1
            Me.columnNombreServicio.AllowDBNull = false
            Me.columnNombreServicio.MaxLength = 60
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnFechaCiclo.AllowDBNull = false
            Me.columnCodMotivoRechazo.ReadOnly = true
            Me.columnDescMotivoRechazo.ReadOnly = true
            Me.columnDescMotivoRechazo.MaxLength = 76
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_ReporteDevoluciones")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_ReporteDevoluciones")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteDevolucionesRow() As PC_ReporteDevolucionesRow
            Return CType(Me.NewRow,PC_ReporteDevolucionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteDevolucionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteDevolucionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteDevolucionesRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDevolucionesRowChanged(Me, New PC_ReporteDevolucionesRowChangeEvent(CType(e.Row,PC_ReporteDevolucionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteDevolucionesRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDevolucionesRowChanging(Me, New PC_ReporteDevolucionesRowChangeEvent(CType(e.Row,PC_ReporteDevolucionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteDevolucionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDevolucionesRowDeleted(Me, New PC_ReporteDevolucionesRowChangeEvent(CType(e.Row,PC_ReporteDevolucionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteDevolucionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteDevolucionesRowDeleting(Me, New PC_ReporteDevolucionesRowChangeEvent(CType(e.Row,PC_ReporteDevolucionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteDevolucionesRow(ByVal row As PC_ReporteDevolucionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_ReporteDevoluciones = New PC_ReporteDevoluciones
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteDevolucionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteDevolucionesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteDevoluciones As PC_ReporteDevolucionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteDevoluciones = CType(Me.Table,PC_ReporteDevolucionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.NombreBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCanal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDevoluciones.NombreCanalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCanal' de la tabla 'PC_ReporteDevoluciones' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NombreCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.AbreviaturaBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.AbreviaturaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.NumeroEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDevoluciones.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteDevoluciones'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDevoluciones.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteDevoluciones'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionGen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDevoluciones.DescripcionGenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionGen' de la tabla 'PC_ReporteDevoluciones' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.DescripcionGenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDevoluciones.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReporteDevoluciones' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoEnvioSinpe() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.EstadoEnvioSinpeColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.EstadoEnvioSinpeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.NombreServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.NombreServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteDevoluciones.FechaCicloColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDevoluciones.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReporteDevoluciones' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescMotivoRechazo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteDevoluciones.DescMotivoRechazoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescMotivoRechazo' de la tabla 'PC_ReporteDevoluciones' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteDevoluciones.DescMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDevoluciones.NombreCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCanalNull()
            Me(Me.tablePC_ReporteDevoluciones.NombreCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDevoluciones.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteDevoluciones.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDevoluciones.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteDevoluciones.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionGenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDevoluciones.DescripcionGenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionGenNull()
            Me(Me.tablePC_ReporteDevoluciones.DescripcionGenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDevoluciones.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReporteDevoluciones.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDevoluciones.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReporteDevoluciones.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteDevoluciones.DescMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescMotivoRechazoNull()
            Me(Me.tablePC_ReporteDevoluciones.DescMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteDevolucionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteDevolucionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteDevolucionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteDevolucionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_ReporteEntidades"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_ReporteEntidades
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteEntidades As PC_ReporteEntidadesDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteEntidades")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEntidadesDataTable(ds.Tables("PC_ReporteEntidades")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_ReporteEntidades() As PC_ReporteEntidadesDataTable
        Get
            Return Me.tablePC_ReporteEntidades
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_ReporteEntidades = CType(MyBase.Clone,PC_ReporteEntidades)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteEntidades")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteEntidadesDataTable(ds.Tables("PC_ReporteEntidades")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteEntidades = CType(MyBase.Tables("PC_ReporteEntidades"),PC_ReporteEntidadesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteEntidades) Is Nothing) Then
                Me.tablePC_ReporteEntidades.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_ReporteEntidades"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PC_ReporteEntidades.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteEntidades = New PC_ReporteEntidadesDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteEntidades)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_ReporteEntidades() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_ReporteEntidades = New PC_ReporteEntidades
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteEntidadesRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteEntidadesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteEntidadesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnAbreviaturaBanco As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnDescripcionGen As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnEstadoEnvioSinpe As Global.System.Data.DataColumn
        
        Private columnNombreServicio As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnDescMotivoRechazo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteEntidades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionGenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionGen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoEnvioSinpeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoEnvioSinpe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteEntidadesRow
            Get
                Return CType(Me.Rows(index),PC_ReporteEntidadesRow)
            End Get
        End Property
        
        Public Event PC_ReporteEntidadesRowChanging As PC_ReporteEntidadesRowChangeEventHandler
        
        Public Event PC_ReporteEntidadesRowChanged As PC_ReporteEntidadesRowChangeEventHandler
        
        Public Event PC_ReporteEntidadesRowDeleting As PC_ReporteEntidadesRowChangeEventHandler
        
        Public Event PC_ReporteEntidadesRowDeleted As PC_ReporteEntidadesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteEntidadesRow(ByVal row As PC_ReporteEntidadesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteEntidadesRow( _
                    ByVal NombreBanco As String,  _
                    ByVal AbreviaturaBanco As String,  _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal CuentaClienteOrigen As String,  _
                    ByVal NombreMoneda As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NombreConcepto As String,  _
                    ByVal DescripcionGen As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal TipoOperacion As String,  _
                    ByVal EstadoEnvioSinpe As String,  _
                    ByVal NombreServicio As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal FechaCiclo As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal DescMotivoRechazo As String) As PC_ReporteEntidadesRow
            Dim rowPC_ReporteEntidadesRow As PC_ReporteEntidadesRow = CType(Me.NewRow,PC_ReporteEntidadesRow)
            Dim columnValuesArray() As Object = New Object() {NombreBanco, AbreviaturaBanco, NumeroEnvio, CedulaPersona, NombrePersona, CuentaCliente, CedulaClienteOrigen, CuentaClienteOrigen, NombreMoneda, Monto, NombreConcepto, DescripcionGen, NumeroTransaccion, NumeroDocumento, TipoOperacion, EstadoEnvioSinpe, NombreServicio, EstadoTran, FechaCiclo, CodMotivoRechazo, DescMotivoRechazo}
            rowPC_ReporteEntidadesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteEntidadesRow)
            Return rowPC_ReporteEntidadesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteEntidadesDataTable = CType(MyBase.Clone,PC_ReporteEntidadesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteEntidadesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnAbreviaturaBanco = MyBase.Columns("AbreviaturaBanco")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnDescripcionGen = MyBase.Columns("DescripcionGen")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnEstadoEnvioSinpe = MyBase.Columns("EstadoEnvioSinpe")
            Me.columnNombreServicio = MyBase.Columns("NombreServicio")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnDescMotivoRechazo = MyBase.Columns("DescMotivoRechazo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnAbreviaturaBanco = New Global.System.Data.DataColumn("AbreviaturaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaBanco)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnDescripcionGen = New Global.System.Data.DataColumn("DescripcionGen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionGen)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnEstadoEnvioSinpe = New Global.System.Data.DataColumn("EstadoEnvioSinpe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoEnvioSinpe)
            Me.columnNombreServicio = New Global.System.Data.DataColumn("NombreServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreServicio)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnDescMotivoRechazo = New Global.System.Data.DataColumn("DescMotivoRechazo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescMotivoRechazo)
            Me.columnNombreBanco.AllowDBNull = false
            Me.columnNombreBanco.MaxLength = 100
            Me.columnAbreviaturaBanco.AllowDBNull = false
            Me.columnAbreviaturaBanco.MaxLength = 15
            Me.columnNumeroEnvio.AllowDBNull = false
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnCuentaClienteOrigen.ReadOnly = true
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnMonto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnDescripcionGen.AllowDBNull = false
            Me.columnDescripcionGen.MaxLength = 100
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnNumeroDocumento.ReadOnly = true
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnEstadoEnvioSinpe.AllowDBNull = false
            Me.columnEstadoEnvioSinpe.MaxLength = 1
            Me.columnNombreServicio.AllowDBNull = false
            Me.columnNombreServicio.MaxLength = 60
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnFechaCiclo.AllowDBNull = false
            Me.columnCodMotivoRechazo.ReadOnly = true
            Me.columnDescMotivoRechazo.ReadOnly = true
            Me.columnDescMotivoRechazo.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_ReporteEntidades")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_ReporteEntidades")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteEntidadesRow() As PC_ReporteEntidadesRow
            Return CType(Me.NewRow,PC_ReporteEntidadesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteEntidadesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteEntidadesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteEntidadesRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEntidadesRowChanged(Me, New PC_ReporteEntidadesRowChangeEvent(CType(e.Row,PC_ReporteEntidadesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteEntidadesRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEntidadesRowChanging(Me, New PC_ReporteEntidadesRowChangeEvent(CType(e.Row,PC_ReporteEntidadesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteEntidadesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEntidadesRowDeleted(Me, New PC_ReporteEntidadesRowChangeEvent(CType(e.Row,PC_ReporteEntidadesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteEntidadesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteEntidadesRowDeleting(Me, New PC_ReporteEntidadesRowChangeEvent(CType(e.Row,PC_ReporteEntidadesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteEntidadesRow(ByVal row As PC_ReporteEntidadesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_ReporteEntidades = New PC_ReporteEntidades
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteEntidadesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteEntidadesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteEntidades As PC_ReporteEntidadesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteEntidades = CType(Me.Table,PC_ReporteEntidadesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.NombreBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.AbreviaturaBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.AbreviaturaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.NumeroEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEntidades.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteEntidades' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEntidades.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteEntidades' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionGen() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.DescripcionGenColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.DescripcionGenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEntidades.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReporteEntidades' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoEnvioSinpe() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.EstadoEnvioSinpeColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.EstadoEnvioSinpeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.NombreServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.NombreServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteEntidades.FechaCicloColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEntidades.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReporteEntidades' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescMotivoRechazo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteEntidades.DescMotivoRechazoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescMotivoRechazo' de la tabla 'PC_ReporteEntidades' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteEntidades.DescMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEntidades.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteEntidades.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEntidades.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteEntidades.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEntidades.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReporteEntidades.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEntidades.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReporteEntidades.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteEntidades.DescMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescMotivoRechazoNull()
            Me(Me.tablePC_ReporteEntidades.DescMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteEntidadesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteEntidadesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteEntidadesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteEntidadesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_ReportePropuestasListas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_ReportePropuestasListas
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReportePropuestasLista2 As PC_ReportePropuestasLista2DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReportePropuestasLista2")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReportePropuestasLista2DataTable(ds.Tables("PC_ReportePropuestasLista2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReportePropuestasLista2() As PC_ReportePropuestasLista2DataTable
        Get
            Return Me.tablePC_ReportePropuestasLista2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_ReportePropuestasListas = CType(MyBase.Clone,PC_ReportePropuestasListas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReportePropuestasLista2")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReportePropuestasLista2DataTable(ds.Tables("PC_ReportePropuestasLista2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReportePropuestasLista2 = CType(MyBase.Tables("PC_ReportePropuestasLista2"),PC_ReportePropuestasLista2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReportePropuestasLista2) Is Nothing) Then
                Me.tablePC_ReportePropuestasLista2.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_ReportePropuestasListas"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_ReportePropuestasListas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReportePropuestasLista2 = New PC_ReportePropuestasLista2DataTable
        MyBase.Tables.Add(Me.tablePC_ReportePropuestasLista2)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReportePropuestasLista2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_ReportePropuestasListas = New PC_ReportePropuestasListas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReportePropuestasLista2RowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReportePropuestasLista2RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReportePropuestasLista2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnCodigoServicio As Global.System.Data.DataColumn
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnDescripcionGen As Global.System.Data.DataColumn
        
        Private columnEstadoEnvioSinpe As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReportePropuestasLista2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionGenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionGen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoEnvioSinpeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoEnvioSinpe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReportePropuestasLista2Row
            Get
                Return CType(Me.Rows(index),PC_ReportePropuestasLista2Row)
            End Get
        End Property
        
        Public Event PC_ReportePropuestasLista2RowChanging As PC_ReportePropuestasLista2RowChangeEventHandler
        
        Public Event PC_ReportePropuestasLista2RowChanged As PC_ReportePropuestasLista2RowChangeEventHandler
        
        Public Event PC_ReportePropuestasLista2RowDeleting As PC_ReportePropuestasLista2RowChangeEventHandler
        
        Public Event PC_ReportePropuestasLista2RowDeleted As PC_ReportePropuestasLista2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReportePropuestasLista2Row(ByVal row As PC_ReportePropuestasLista2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReportePropuestasLista2Row(ByVal NombreCentro As String, ByVal NumeroEnvio As Integer, ByVal CodigoServicio As Integer, ByVal CodigoCentro As Integer, ByVal NumeroTransaccion As Integer, ByVal Monto As Decimal, ByVal TipoOperacion As String, ByVal CodigoMoneda As Integer, ByVal DescripcionGen As String, ByVal EstadoEnvioSinpe As String, ByVal FechaCiclo As Date) As PC_ReportePropuestasLista2Row
            Dim rowPC_ReportePropuestasLista2Row As PC_ReportePropuestasLista2Row = CType(Me.NewRow,PC_ReportePropuestasLista2Row)
            Dim columnValuesArray() As Object = New Object() {NombreCentro, NumeroEnvio, CodigoServicio, CodigoCentro, NumeroTransaccion, Monto, TipoOperacion, CodigoMoneda, DescripcionGen, EstadoEnvioSinpe, FechaCiclo}
            rowPC_ReportePropuestasLista2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReportePropuestasLista2Row)
            Return rowPC_ReportePropuestasLista2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoOperacionNumeroTransaccion(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer) As PC_ReportePropuestasLista2Row
            Return CType(Me.Rows.Find(New Object() {TipoOperacion, NumeroTransaccion}),PC_ReportePropuestasLista2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReportePropuestasLista2DataTable = CType(MyBase.Clone,PC_ReportePropuestasLista2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReportePropuestasLista2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnCodigoServicio = MyBase.Columns("CodigoServicio")
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnDescripcionGen = MyBase.Columns("DescripcionGen")
            Me.columnEstadoEnvioSinpe = MyBase.Columns("EstadoEnvioSinpe")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnCodigoServicio = New Global.System.Data.DataColumn("CodigoServicio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicio)
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnDescripcionGen = New Global.System.Data.DataColumn("DescripcionGen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionGen)
            Me.columnEstadoEnvioSinpe = New Global.System.Data.DataColumn("EstadoEnvioSinpe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoEnvioSinpe)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoOperacion, Me.columnNumeroTransaccion}, true))
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnNumeroEnvio.AllowDBNull = false
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnDescripcionGen.AllowDBNull = false
            Me.columnDescripcionGen.MaxLength = 100
            Me.columnEstadoEnvioSinpe.AllowDBNull = false
            Me.columnEstadoEnvioSinpe.MaxLength = 1
            Me.columnFechaCiclo.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReportePropuestasLista2Row() As PC_ReportePropuestasLista2Row
            Return CType(Me.NewRow,PC_ReportePropuestasLista2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReportePropuestasLista2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReportePropuestasLista2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReportePropuestasLista2RowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasLista2RowChanged(Me, New PC_ReportePropuestasLista2RowChangeEvent(CType(e.Row,PC_ReportePropuestasLista2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReportePropuestasLista2RowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasLista2RowChanging(Me, New PC_ReportePropuestasLista2RowChangeEvent(CType(e.Row,PC_ReportePropuestasLista2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReportePropuestasLista2RowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasLista2RowDeleted(Me, New PC_ReportePropuestasLista2RowChangeEvent(CType(e.Row,PC_ReportePropuestasLista2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReportePropuestasLista2RowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReportePropuestasLista2RowDeleting(Me, New PC_ReportePropuestasLista2RowChangeEvent(CType(e.Row,PC_ReportePropuestasLista2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReportePropuestasLista2Row(ByVal row As PC_ReportePropuestasLista2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_ReportePropuestasListas = New PC_ReportePropuestasListas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReportePropuestasLista2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReportePropuestasLista2Row
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReportePropuestasLista2 As PC_ReportePropuestasLista2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReportePropuestasLista2 = CType(Me.Table,PC_ReportePropuestasLista2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.NumeroEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReportePropuestasLista2.CodigoServicioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoServicio' de la tabla 'PC_ReportePropuestasLista2' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.CodigoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReportePropuestasLista2.CodigoCentroColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoCentro' de la tabla 'PC_ReportePropuestasLista2' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionGen() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.DescripcionGenColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.DescripcionGenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoEnvioSinpe() As String
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.EstadoEnvioSinpeColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.EstadoEnvioSinpeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Return CType(Me(Me.tablePC_ReportePropuestasLista2.FechaCicloColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReportePropuestasLista2.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoServicioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReportePropuestasLista2.CodigoServicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoServicioNull()
            Me(Me.tablePC_ReportePropuestasLista2.CodigoServicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoCentroNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReportePropuestasLista2.CodigoCentroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoCentroNull()
            Me(Me.tablePC_ReportePropuestasLista2.CodigoCentroColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReportePropuestasLista2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReportePropuestasLista2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReportePropuestasLista2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReportePropuestasLista2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_ReporteTransaccionesTran"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_ReporteTransaccionesTran
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteTransaccionesTran As PC_ReporteTransaccionesTranDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteTransaccionesTran")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesTranDataTable(ds.Tables("PC_ReporteTransaccionesTran")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_ReporteTransaccionesTran() As PC_ReporteTransaccionesTranDataTable
        Get
            Return Me.tablePC_ReporteTransaccionesTran
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_ReporteTransaccionesTran = CType(MyBase.Clone,PC_ReporteTransaccionesTran)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteTransaccionesTran")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesTranDataTable(ds.Tables("PC_ReporteTransaccionesTran")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteTransaccionesTran = CType(MyBase.Tables("PC_ReporteTransaccionesTran"),PC_ReporteTransaccionesTranDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteTransaccionesTran) Is Nothing) Then
                Me.tablePC_ReporteTransaccionesTran.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_ReporteTransaccionesTran"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_ReporteTransaccionesTran.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteTransaccionesTran = New PC_ReporteTransaccionesTranDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteTransaccionesTran)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_ReporteTransaccionesTran() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_ReporteTransaccionesTran = New PC_ReporteTransaccionesTran
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteTransaccionesTranRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteTransaccionesTranRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteTransaccionesTranDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnCodigoServicio As Global.System.Data.DataColumn
        
        Private columnNomCortoServicio As Global.System.Data.DataColumn
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnDescripcionTran As Global.System.Data.DataColumn
        
        Private columnNumeroServicio As Global.System.Data.DataColumn
        
        Private columnCodigoReferencia As Global.System.Data.DataColumn
        
        Private columnCodigoMotivoEnvio As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnImportado As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnUsuarioAprueba As Global.System.Data.DataColumn
        
        Private columnFechaAprobacion As Global.System.Data.DataColumn
        
        Private columnUsuarioEnvia As Global.System.Data.DataColumn
        
        Private columnFechaEnvio As Global.System.Data.DataColumn
        
        Private columnUsuarioAutoriza As Global.System.Data.DataColumn
        
        Private columnFechaAutoriza As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnIdVerificacion As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        Private columnUsuarioFirma1 As Global.System.Data.DataColumn
        
        Private columnUsuarioFirma2 As Global.System.Data.DataColumn
        
        Private columnFechaFirma1 As Global.System.Data.DataColumn
        
        Private columnFechaFirma2 As Global.System.Data.DataColumn
        
        Private columnNombreMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreClienteOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteTransaccionesTran"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomCortoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomCortoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivoEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImportadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImportado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioApruebaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAprueba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioEnviaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioEnvia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdVerificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdVerificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioFirma1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioFirma1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioFirma2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioFirma2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFirma1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFirma1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFirma2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFirma2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteTransaccionesTranRow
            Get
                Return CType(Me.Rows(index),PC_ReporteTransaccionesTranRow)
            End Get
        End Property
        
        Public Event PC_ReporteTransaccionesTranRowChanging As PC_ReporteTransaccionesTranRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesTranRowChanged As PC_ReporteTransaccionesTranRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesTranRowDeleting As PC_ReporteTransaccionesTranRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesTranRowDeleted As PC_ReporteTransaccionesTranRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteTransaccionesTranRow(ByVal row As PC_ReporteTransaccionesTranRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteTransaccionesTranRow( _
                    ByVal TipoOperacion As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal CodigoServicio As Integer,  _
                    ByVal NomCortoServicio As String,  _
                    ByVal NumeroOrden As Integer,  _
                    ByVal CodigoCentro As Integer,  _
                    ByVal NombreCentro As String,  _
                    ByVal CodigoConcepto As Integer,  _
                    ByVal NombreConcepto As String,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal NombreMoneda As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal NombreBanco As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal DescripcionTran As String,  _
                    ByVal NumeroServicio As String,  _
                    ByVal CodigoReferencia As String,  _
                    ByVal CodigoMotivoEnvio As Integer,  _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal Importado As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal UsuarioRegistra As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal UsuarioAprueba As String,  _
                    ByVal FechaAprobacion As Date,  _
                    ByVal UsuarioEnvia As String,  _
                    ByVal FechaEnvio As Date,  _
                    ByVal UsuarioAutoriza As String,  _
                    ByVal FechaAutoriza As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal IdVerificacion As String,  _
                    ByVal FechaCiclo As Date,  _
                    ByVal UsuarioFirma1 As String,  _
                    ByVal UsuarioFirma2 As String,  _
                    ByVal FechaFirma1 As Date,  _
                    ByVal FechaFirma2 As Date,  _
                    ByVal NombreMotivoRechazo As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal NombreClienteOrigen As String,  _
                    ByVal CuentaClienteOrigen As String) As PC_ReporteTransaccionesTranRow
            Dim rowPC_ReporteTransaccionesTranRow As PC_ReporteTransaccionesTranRow = CType(Me.NewRow,PC_ReporteTransaccionesTranRow)
            Dim columnValuesArray() As Object = New Object() {TipoOperacion, NumeroTransaccion, CodigoServicio, NomCortoServicio, NumeroOrden, CodigoCentro, NombreCentro, CodigoConcepto, NombreConcepto, CedulaPersona, NombrePersona, CodigoMoneda, NombreMoneda, CuentaCliente, NombreBanco, Monto, NumeroDocumento, DescripcionTran, NumeroServicio, CodigoReferencia, CodigoMotivoEnvio, NumeroEnvio, Importado, EstadoTran, UsuarioRegistra, FechaRegistro, UsuarioAprueba, FechaAprobacion, UsuarioEnvia, FechaEnvio, UsuarioAutoriza, FechaAutoriza, CodMotivoRechazo, IdVerificacion, FechaCiclo, UsuarioFirma1, UsuarioFirma2, FechaFirma1, FechaFirma2, NombreMotivoRechazo, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen}
            rowPC_ReporteTransaccionesTranRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteTransaccionesTranRow)
            Return rowPC_ReporteTransaccionesTranRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoOperacionNumeroTransaccion(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer) As PC_ReporteTransaccionesTranRow
            Return CType(Me.Rows.Find(New Object() {TipoOperacion, NumeroTransaccion}),PC_ReporteTransaccionesTranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteTransaccionesTranDataTable = CType(MyBase.Clone,PC_ReporteTransaccionesTranDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteTransaccionesTranDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnCodigoServicio = MyBase.Columns("CodigoServicio")
            Me.columnNomCortoServicio = MyBase.Columns("NomCortoServicio")
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnDescripcionTran = MyBase.Columns("DescripcionTran")
            Me.columnNumeroServicio = MyBase.Columns("NumeroServicio")
            Me.columnCodigoReferencia = MyBase.Columns("CodigoReferencia")
            Me.columnCodigoMotivoEnvio = MyBase.Columns("CodigoMotivoEnvio")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnImportado = MyBase.Columns("Importado")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnUsuarioAprueba = MyBase.Columns("UsuarioAprueba")
            Me.columnFechaAprobacion = MyBase.Columns("FechaAprobacion")
            Me.columnUsuarioEnvia = MyBase.Columns("UsuarioEnvia")
            Me.columnFechaEnvio = MyBase.Columns("FechaEnvio")
            Me.columnUsuarioAutoriza = MyBase.Columns("UsuarioAutoriza")
            Me.columnFechaAutoriza = MyBase.Columns("FechaAutoriza")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnIdVerificacion = MyBase.Columns("IdVerificacion")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
            Me.columnUsuarioFirma1 = MyBase.Columns("UsuarioFirma1")
            Me.columnUsuarioFirma2 = MyBase.Columns("UsuarioFirma2")
            Me.columnFechaFirma1 = MyBase.Columns("FechaFirma1")
            Me.columnFechaFirma2 = MyBase.Columns("FechaFirma2")
            Me.columnNombreMotivoRechazo = MyBase.Columns("NombreMotivoRechazo")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnNombreClienteOrigen = MyBase.Columns("NombreClienteOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnCodigoServicio = New Global.System.Data.DataColumn("CodigoServicio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicio)
            Me.columnNomCortoServicio = New Global.System.Data.DataColumn("NomCortoServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCortoServicio)
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnDescripcionTran = New Global.System.Data.DataColumn("DescripcionTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionTran)
            Me.columnNumeroServicio = New Global.System.Data.DataColumn("NumeroServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroServicio)
            Me.columnCodigoReferencia = New Global.System.Data.DataColumn("CodigoReferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoReferencia)
            Me.columnCodigoMotivoEnvio = New Global.System.Data.DataColumn("CodigoMotivoEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivoEnvio)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnImportado = New Global.System.Data.DataColumn("Importado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImportado)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnUsuarioAprueba = New Global.System.Data.DataColumn("UsuarioAprueba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAprueba)
            Me.columnFechaAprobacion = New Global.System.Data.DataColumn("FechaAprobacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAprobacion)
            Me.columnUsuarioEnvia = New Global.System.Data.DataColumn("UsuarioEnvia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioEnvia)
            Me.columnFechaEnvio = New Global.System.Data.DataColumn("FechaEnvio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEnvio)
            Me.columnUsuarioAutoriza = New Global.System.Data.DataColumn("UsuarioAutoriza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAutoriza)
            Me.columnFechaAutoriza = New Global.System.Data.DataColumn("FechaAutoriza", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAutoriza)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnIdVerificacion = New Global.System.Data.DataColumn("IdVerificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdVerificacion)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.columnUsuarioFirma1 = New Global.System.Data.DataColumn("UsuarioFirma1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioFirma1)
            Me.columnUsuarioFirma2 = New Global.System.Data.DataColumn("UsuarioFirma2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioFirma2)
            Me.columnFechaFirma1 = New Global.System.Data.DataColumn("FechaFirma1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFirma1)
            Me.columnFechaFirma2 = New Global.System.Data.DataColumn("FechaFirma2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFirma2)
            Me.columnNombreMotivoRechazo = New Global.System.Data.DataColumn("NombreMotivoRechazo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMotivoRechazo)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnNombreClienteOrigen = New Global.System.Data.DataColumn("NombreClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreClienteOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoOperacion, Me.columnNumeroTransaccion}, true))
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnCodigoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.MaxLength = 30
            Me.columnCodigoCentro.AllowDBNull = false
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnNombreBanco.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnDescripcionTran.AllowDBNull = false
            Me.columnDescripcionTran.MaxLength = 255
            Me.columnNumeroServicio.AllowDBNull = false
            Me.columnNumeroServicio.MaxLength = 20
            Me.columnCodigoReferencia.MaxLength = 25
            Me.columnCodigoMotivoEnvio.AllowDBNull = false
            Me.columnImportado.AllowDBNull = false
            Me.columnImportado.MaxLength = 1
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnUsuarioAprueba.MaxLength = 35
            Me.columnUsuarioEnvia.MaxLength = 35
            Me.columnUsuarioAutoriza.MaxLength = 35
            Me.columnIdVerificacion.AllowDBNull = false
            Me.columnIdVerificacion.MaxLength = 200
            Me.columnUsuarioFirma1.MaxLength = 35
            Me.columnUsuarioFirma2.MaxLength = 35
            Me.columnNombreMotivoRechazo.ReadOnly = true
            Me.columnNombreMotivoRechazo.MaxLength = 80
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnNombreClienteOrigen.MaxLength = 100
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_ReporteTransaccionesTran")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_ReporteTransaccionesTran")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteTransaccionesTranRow() As PC_ReporteTransaccionesTranRow
            Return CType(Me.NewRow,PC_ReporteTransaccionesTranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteTransaccionesTranRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteTransaccionesTranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteTransaccionesTranRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesTranRowChanged(Me, New PC_ReporteTransaccionesTranRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteTransaccionesTranRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesTranRowChanging(Me, New PC_ReporteTransaccionesTranRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteTransaccionesTranRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesTranRowDeleted(Me, New PC_ReporteTransaccionesTranRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteTransaccionesTranRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesTranRowDeleting(Me, New PC_ReporteTransaccionesTranRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesTranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteTransaccionesTranRow(ByVal row As PC_ReporteTransaccionesTranRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_ReporteTransaccionesTran = New PC_ReporteTransaccionesTran
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteTransaccionesTranDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteTransaccionesTranRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteTransaccionesTran As PC_ReporteTransaccionesTranDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteTransaccionesTran = CType(Me.Table,PC_ReporteTransaccionesTranDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CodigoServicioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CodigoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCortoServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NomCortoServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NomCortoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NumeroOrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroOrden' de la tabla 'PC_ReporteTransaccionesTran' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CodigoCentroColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NombreBancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreBanco' de la tabla 'PC_ReporteTransaccionesTran' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReporteTransaccionesTran"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.DescripcionTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.DescripcionTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NumeroServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NumeroServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoReferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CodigoReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoReferencia' de la tabla 'PC_ReporteTransaccionesTra"& _ 
                            "n' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CodigoReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivoEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CodigoMotivoEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CodigoMotivoEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteTransaccionesTran' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importado() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.ImportadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.ImportadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAprueba() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.UsuarioApruebaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAprueba' de la tabla 'PC_ReporteTransaccionesTran'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.UsuarioApruebaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAprobacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.FechaAprobacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAprobacion' de la tabla 'PC_ReporteTransaccionesTran"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.FechaAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioEnvia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.UsuarioEnviaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioEnvia' de la tabla 'PC_ReporteTransaccionesTran' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.UsuarioEnviaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEnvio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.FechaEnvioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaEnvio' de la tabla 'PC_ReporteTransaccionesTran' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.FechaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAutoriza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.UsuarioAutorizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAutoriza' de la tabla 'PC_ReporteTransaccionesTran"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.UsuarioAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAutoriza() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.FechaAutorizaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAutoriza' de la tabla 'PC_ReporteTransaccionesTran' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.FechaAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReporteTransaccionesTra"& _ 
                            "n' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdVerificacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesTran.IdVerificacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.IdVerificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.FechaCicloColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaCiclo' de la tabla 'PC_ReporteTransaccionesTran' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioFirma1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioFirma1' de la tabla 'PC_ReporteTransaccionesTran' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioFirma2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioFirma2' de la tabla 'PC_ReporteTransaccionesTran' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFirma1() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.FechaFirma1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFirma1' de la tabla 'PC_ReporteTransaccionesTran' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.FechaFirma1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFirma2() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.FechaFirma2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFirma2' de la tabla 'PC_ReporteTransaccionesTran' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.FechaFirma2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMotivoRechazo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NombreMotivoRechazoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreMotivoRechazo' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Tran' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NombreMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Tran' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.NombreClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Tran' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.NombreClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesTran.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Tran' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesTran.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroOrdenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.NumeroOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroOrdenNull()
            Me(Me.tablePC_ReporteTransaccionesTran.NumeroOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreBancoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.NombreBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreBancoNull()
            Me(Me.tablePC_ReporteTransaccionesTran.NombreBancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReporteTransaccionesTran.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.CodigoReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoReferenciaNull()
            Me(Me.tablePC_ReporteTransaccionesTran.CodigoReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesTran.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioApruebaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.UsuarioApruebaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioApruebaNull()
            Me(Me.tablePC_ReporteTransaccionesTran.UsuarioApruebaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.FechaAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAprobacionNull()
            Me(Me.tablePC_ReporteTransaccionesTran.FechaAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioEnviaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.UsuarioEnviaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioEnviaNull()
            Me(Me.tablePC_ReporteTransaccionesTran.UsuarioEnviaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.FechaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesTran.FechaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.UsuarioAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesTran.UsuarioAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.FechaAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesTran.FechaAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReporteTransaccionesTran.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCicloNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.FechaCicloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCicloNull()
            Me(Me.tablePC_ReporteTransaccionesTran.FechaCicloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioFirma1Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioFirma1Null()
            Me(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioFirma2Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioFirma2Null()
            Me(Me.tablePC_ReporteTransaccionesTran.UsuarioFirma2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFirma1Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.FechaFirma1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFirma1Null()
            Me(Me.tablePC_ReporteTransaccionesTran.FechaFirma1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFirma2Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.FechaFirma2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFirma2Null()
            Me(Me.tablePC_ReporteTransaccionesTran.FechaFirma2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.NombreMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreMotivoRechazoNull()
            Me(Me.tablePC_ReporteTransaccionesTran.NombreMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesTran.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.NombreClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesTran.NombreClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesTran.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesTran.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteTransaccionesTranRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteTransaccionesTranRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteTransaccionesTranRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteTransaccionesTranRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReporteTransaccionesFec"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReporteTransaccionesFec
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteTransaccionesFec As PC_ReporteTransaccionesFecDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteTransaccionesFec")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesFecDataTable(ds.Tables("PC_ReporteTransaccionesFec")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteTransaccionesFec() As PC_ReporteTransaccionesFecDataTable
        Get
            Return Me.tablePC_ReporteTransaccionesFec
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReporteTransaccionesFec = CType(MyBase.Clone,ReporteTransaccionesFec)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteTransaccionesFec")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesFecDataTable(ds.Tables("PC_ReporteTransaccionesFec")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteTransaccionesFec = CType(MyBase.Tables("PC_ReporteTransaccionesFec"),PC_ReporteTransaccionesFecDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteTransaccionesFec) Is Nothing) Then
                Me.tablePC_ReporteTransaccionesFec.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReporteTransaccionesFec"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/ReporteTransaccionesFec.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteTransaccionesFec = New PC_ReporteTransaccionesFecDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteTransaccionesFec)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteTransaccionesFec() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReporteTransaccionesFec = New ReporteTransaccionesFec
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteTransaccionesFecRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteTransaccionesFecRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteTransaccionesFecDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnCodigoServicio As Global.System.Data.DataColumn
        
        Private columnNomCortoServicio As Global.System.Data.DataColumn
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnDescripcionTran As Global.System.Data.DataColumn
        
        Private columnNumeroServicio As Global.System.Data.DataColumn
        
        Private columnCodigoReferencia As Global.System.Data.DataColumn
        
        Private columnCodigoMotivoEnvio As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnImportado As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnUsuarioAprueba As Global.System.Data.DataColumn
        
        Private columnFechaAprobacion As Global.System.Data.DataColumn
        
        Private columnUsuarioEnvia As Global.System.Data.DataColumn
        
        Private columnFechaEnvio As Global.System.Data.DataColumn
        
        Private columnUsuarioAutoriza As Global.System.Data.DataColumn
        
        Private columnFechaAutoriza As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnIdVerificacion As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        Private columnCodigoMonedaCC As Global.System.Data.DataColumn
        
        Private columnMontoCC As Global.System.Data.DataColumn
        
        Private columnNombreMonedaCC As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreClienteOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnAbreviaturaBanco As Global.System.Data.DataColumn
        
        Private columnNombreCanal As Global.System.Data.DataColumn
        
        Private columnIdCanal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteTransaccionesFec"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomCortoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomCortoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivoEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImportadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImportado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioApruebaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAprueba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioEnviaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioEnvia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdVerificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdVerificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaCCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMonedaCC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoCCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoCC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaCCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMonedaCC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteTransaccionesFecRow
            Get
                Return CType(Me.Rows(index),PC_ReporteTransaccionesFecRow)
            End Get
        End Property
        
        Public Event PC_ReporteTransaccionesFecRowChanging As PC_ReporteTransaccionesFecRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesFecRowChanged As PC_ReporteTransaccionesFecRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesFecRowDeleting As PC_ReporteTransaccionesFecRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesFecRowDeleted As PC_ReporteTransaccionesFecRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteTransaccionesFecRow(ByVal row As PC_ReporteTransaccionesFecRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteTransaccionesFecRow( _
                    ByVal TipoOperacion As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal CodigoServicio As Integer,  _
                    ByVal NomCortoServicio As String,  _
                    ByVal NumeroOrden As Integer,  _
                    ByVal CodigoCentro As Integer,  _
                    ByVal NombreCentro As String,  _
                    ByVal CodigoConcepto As Integer,  _
                    ByVal NombreConcepto As String,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal NombreMoneda As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal NombreBanco As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal DescripcionTran As String,  _
                    ByVal NumeroServicio As String,  _
                    ByVal CodigoReferencia As String,  _
                    ByVal CodigoMotivoEnvio As Integer,  _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal Importado As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal UsuarioRegistra As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal UsuarioAprueba As String,  _
                    ByVal FechaAprobacion As Date,  _
                    ByVal UsuarioEnvia As String,  _
                    ByVal FechaEnvio As Date,  _
                    ByVal UsuarioAutoriza As String,  _
                    ByVal FechaAutoriza As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal IdVerificacion As String,  _
                    ByVal FechaCiclo As Date,  _
                    ByVal CodigoMonedaCC As Integer,  _
                    ByVal MontoCC As Decimal,  _
                    ByVal NombreMonedaCC As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal NombreClienteOrigen As String,  _
                    ByVal CuentaClienteOrigen As String,  _
                    ByVal AbreviaturaBanco As String,  _
                    ByVal NombreCanal As String) As PC_ReporteTransaccionesFecRow
            Dim rowPC_ReporteTransaccionesFecRow As PC_ReporteTransaccionesFecRow = CType(Me.NewRow,PC_ReporteTransaccionesFecRow)
            Dim columnValuesArray() As Object = New Object() {TipoOperacion, NumeroTransaccion, CodigoServicio, NomCortoServicio, NumeroOrden, CodigoCentro, NombreCentro, CodigoConcepto, NombreConcepto, CedulaPersona, NombrePersona, CodigoMoneda, NombreMoneda, CuentaCliente, NombreBanco, Monto, NumeroDocumento, DescripcionTran, NumeroServicio, CodigoReferencia, CodigoMotivoEnvio, NumeroEnvio, Importado, EstadoTran, UsuarioRegistra, FechaRegistro, UsuarioAprueba, FechaAprobacion, UsuarioEnvia, FechaEnvio, UsuarioAutoriza, FechaAutoriza, CodMotivoRechazo, IdVerificacion, FechaCiclo, CodigoMonedaCC, MontoCC, NombreMonedaCC, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen, AbreviaturaBanco, NombreCanal, Nothing}
            rowPC_ReporteTransaccionesFecRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteTransaccionesFecRow)
            Return rowPC_ReporteTransaccionesFecRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoOperacionNumeroTransaccion(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer) As PC_ReporteTransaccionesFecRow
            Return CType(Me.Rows.Find(New Object() {TipoOperacion, NumeroTransaccion}),PC_ReporteTransaccionesFecRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteTransaccionesFecDataTable = CType(MyBase.Clone,PC_ReporteTransaccionesFecDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteTransaccionesFecDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnCodigoServicio = MyBase.Columns("CodigoServicio")
            Me.columnNomCortoServicio = MyBase.Columns("NomCortoServicio")
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnDescripcionTran = MyBase.Columns("DescripcionTran")
            Me.columnNumeroServicio = MyBase.Columns("NumeroServicio")
            Me.columnCodigoReferencia = MyBase.Columns("CodigoReferencia")
            Me.columnCodigoMotivoEnvio = MyBase.Columns("CodigoMotivoEnvio")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnImportado = MyBase.Columns("Importado")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnUsuarioAprueba = MyBase.Columns("UsuarioAprueba")
            Me.columnFechaAprobacion = MyBase.Columns("FechaAprobacion")
            Me.columnUsuarioEnvia = MyBase.Columns("UsuarioEnvia")
            Me.columnFechaEnvio = MyBase.Columns("FechaEnvio")
            Me.columnUsuarioAutoriza = MyBase.Columns("UsuarioAutoriza")
            Me.columnFechaAutoriza = MyBase.Columns("FechaAutoriza")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnIdVerificacion = MyBase.Columns("IdVerificacion")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
            Me.columnCodigoMonedaCC = MyBase.Columns("CodigoMonedaCC")
            Me.columnMontoCC = MyBase.Columns("MontoCC")
            Me.columnNombreMonedaCC = MyBase.Columns("NombreMonedaCC")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnNombreClienteOrigen = MyBase.Columns("NombreClienteOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
            Me.columnAbreviaturaBanco = MyBase.Columns("AbreviaturaBanco")
            Me.columnNombreCanal = MyBase.Columns("NombreCanal")
            Me.columnIdCanal = MyBase.Columns("IdCanal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnCodigoServicio = New Global.System.Data.DataColumn("CodigoServicio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicio)
            Me.columnNomCortoServicio = New Global.System.Data.DataColumn("NomCortoServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCortoServicio)
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnDescripcionTran = New Global.System.Data.DataColumn("DescripcionTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionTran)
            Me.columnNumeroServicio = New Global.System.Data.DataColumn("NumeroServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroServicio)
            Me.columnCodigoReferencia = New Global.System.Data.DataColumn("CodigoReferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoReferencia)
            Me.columnCodigoMotivoEnvio = New Global.System.Data.DataColumn("CodigoMotivoEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivoEnvio)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnImportado = New Global.System.Data.DataColumn("Importado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImportado)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnUsuarioAprueba = New Global.System.Data.DataColumn("UsuarioAprueba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAprueba)
            Me.columnFechaAprobacion = New Global.System.Data.DataColumn("FechaAprobacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAprobacion)
            Me.columnUsuarioEnvia = New Global.System.Data.DataColumn("UsuarioEnvia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioEnvia)
            Me.columnFechaEnvio = New Global.System.Data.DataColumn("FechaEnvio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEnvio)
            Me.columnUsuarioAutoriza = New Global.System.Data.DataColumn("UsuarioAutoriza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAutoriza)
            Me.columnFechaAutoriza = New Global.System.Data.DataColumn("FechaAutoriza", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAutoriza)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnIdVerificacion = New Global.System.Data.DataColumn("IdVerificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdVerificacion)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.columnCodigoMonedaCC = New Global.System.Data.DataColumn("CodigoMonedaCC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMonedaCC)
            Me.columnMontoCC = New Global.System.Data.DataColumn("MontoCC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoCC)
            Me.columnNombreMonedaCC = New Global.System.Data.DataColumn("NombreMonedaCC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMonedaCC)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnNombreClienteOrigen = New Global.System.Data.DataColumn("NombreClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreClienteOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnAbreviaturaBanco = New Global.System.Data.DataColumn("AbreviaturaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaBanco)
            Me.columnNombreCanal = New Global.System.Data.DataColumn("NombreCanal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCanal)
            Me.columnIdCanal = New Global.System.Data.DataColumn("IdCanal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCanal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoOperacion, Me.columnNumeroTransaccion}, true))
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnCodigoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.MaxLength = 30
            Me.columnCodigoCentro.AllowDBNull = false
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnNombreBanco.AllowDBNull = false
            Me.columnNombreBanco.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnDescripcionTran.AllowDBNull = false
            Me.columnDescripcionTran.MaxLength = 255
            Me.columnNumeroServicio.AllowDBNull = false
            Me.columnNumeroServicio.MaxLength = 20
            Me.columnCodigoReferencia.MaxLength = 25
            Me.columnCodigoMotivoEnvio.AllowDBNull = false
            Me.columnImportado.AllowDBNull = false
            Me.columnImportado.MaxLength = 1
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnUsuarioAprueba.MaxLength = 35
            Me.columnUsuarioEnvia.MaxLength = 35
            Me.columnUsuarioAutoriza.MaxLength = 35
            Me.columnIdVerificacion.AllowDBNull = false
            Me.columnIdVerificacion.MaxLength = 200
            Me.columnFechaCiclo.AllowDBNull = false
            Me.columnCodigoMonedaCC.AllowDBNull = false
            Me.columnMontoCC.AllowDBNull = false
            Me.columnNombreMonedaCC.AllowDBNull = false
            Me.columnNombreMonedaCC.MaxLength = 30
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnNombreClienteOrigen.MaxLength = 100
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.columnAbreviaturaBanco.AllowDBNull = false
            Me.columnAbreviaturaBanco.MaxLength = 15
            Me.columnNombreCanal.MaxLength = 255
            Me.columnIdCanal.AutoIncrement = true
            Me.columnIdCanal.AutoIncrementSeed = -1
            Me.columnIdCanal.AutoIncrementStep = -1
            Me.columnIdCanal.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteTransaccionesFecRow() As PC_ReporteTransaccionesFecRow
            Return CType(Me.NewRow,PC_ReporteTransaccionesFecRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteTransaccionesFecRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteTransaccionesFecRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteTransaccionesFecRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFecRowChanged(Me, New PC_ReporteTransaccionesFecRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFecRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteTransaccionesFecRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFecRowChanging(Me, New PC_ReporteTransaccionesFecRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFecRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteTransaccionesFecRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFecRowDeleted(Me, New PC_ReporteTransaccionesFecRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFecRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteTransaccionesFecRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFecRowDeleting(Me, New PC_ReporteTransaccionesFecRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFecRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteTransaccionesFecRow(ByVal row As PC_ReporteTransaccionesFecRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReporteTransaccionesFec = New ReporteTransaccionesFec
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteTransaccionesFecDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteTransaccionesFecRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteTransaccionesFec As PC_ReporteTransaccionesFecDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteTransaccionesFec = CType(Me.Table,PC_ReporteTransaccionesFecDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodigoServicioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodigoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCortoServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NomCortoServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NomCortoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NumeroOrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroOrden' de la tabla 'PC_ReporteTransaccionesFec' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodigoCentroColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombreBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReporteTransaccionesFec'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.DescripcionTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.DescripcionTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NumeroServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NumeroServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoReferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodigoReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoReferencia' de la tabla 'PC_ReporteTransaccionesFec"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodigoReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivoEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodigoMotivoEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodigoMotivoEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteTransaccionesFec' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importado() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.ImportadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.ImportadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAprueba() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.UsuarioApruebaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAprueba' de la tabla 'PC_ReporteTransaccionesFec' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.UsuarioApruebaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAprobacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.FechaAprobacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAprobacion' de la tabla 'PC_ReporteTransaccionesFec'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.FechaAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioEnvia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.UsuarioEnviaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioEnvia' de la tabla 'PC_ReporteTransaccionesFec' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.UsuarioEnviaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEnvio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.FechaEnvioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaEnvio' de la tabla 'PC_ReporteTransaccionesFec' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.FechaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAutoriza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.UsuarioAutorizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAutoriza' de la tabla 'PC_ReporteTransaccionesFec'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.UsuarioAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAutoriza() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.FechaAutorizaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAutoriza' de la tabla 'PC_ReporteTransaccionesFec' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.FechaAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReporteTransaccionesFec"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdVerificacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.IdVerificacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.IdVerificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.FechaCicloColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMonedaCC() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CodigoMonedaCCColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CodigoMonedaCCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoCC() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.MontoCCColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.MontoCCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMonedaCC() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombreMonedaCCColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombreMonedaCCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Fec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombreClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Fec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombreClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Fec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec.AbreviaturaBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.AbreviaturaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCanal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.NombreCanalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCanal' de la tabla 'PC_ReporteTransaccionesFec' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.NombreCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCanal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec.IdCanalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdCanal' de la tabla 'PC_ReporteTransaccionesFec' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec.IdCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroOrdenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.NumeroOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroOrdenNull()
            Me(Me.tablePC_ReporteTransaccionesFec.NumeroOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReporteTransaccionesFec.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.CodigoReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoReferenciaNull()
            Me(Me.tablePC_ReporteTransaccionesFec.CodigoReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesFec.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioApruebaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.UsuarioApruebaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioApruebaNull()
            Me(Me.tablePC_ReporteTransaccionesFec.UsuarioApruebaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.FechaAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAprobacionNull()
            Me(Me.tablePC_ReporteTransaccionesFec.FechaAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioEnviaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.UsuarioEnviaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioEnviaNull()
            Me(Me.tablePC_ReporteTransaccionesFec.UsuarioEnviaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.FechaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesFec.FechaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.UsuarioAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesFec.UsuarioAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.FechaAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesFec.FechaAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReporteTransaccionesFec.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesFec.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.NombreClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesFec.NombreClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesFec.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.NombreCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCanalNull()
            Me(Me.tablePC_ReporteTransaccionesFec.NombreCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec.IdCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCanalNull()
            Me(Me.tablePC_ReporteTransaccionesFec.IdCanalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteTransaccionesFecRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteTransaccionesFecRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteTransaccionesFecRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteTransaccionesFecRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ReporteTransaccionesFec2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ReporteTransaccionesFec2
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteTransaccionesFec2 As PC_ReporteTransaccionesFec2DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteTransaccionesFec2")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesFec2DataTable(ds.Tables("PC_ReporteTransaccionesFec2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PC_ReporteTransaccionesFec2() As PC_ReporteTransaccionesFec2DataTable
        Get
            Return Me.tablePC_ReporteTransaccionesFec2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ReporteTransaccionesFec2 = CType(MyBase.Clone,ReporteTransaccionesFec2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteTransaccionesFec2")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesFec2DataTable(ds.Tables("PC_ReporteTransaccionesFec2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteTransaccionesFec2 = CType(MyBase.Tables("PC_ReporteTransaccionesFec2"),PC_ReporteTransaccionesFec2DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteTransaccionesFec2) Is Nothing) Then
                Me.tablePC_ReporteTransaccionesFec2.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ReporteTransaccionesFec2"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/ReporteTransaccionesFec2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteTransaccionesFec2 = New PC_ReporteTransaccionesFec2DataTable
        MyBase.Tables.Add(Me.tablePC_ReporteTransaccionesFec2)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePC_ReporteTransaccionesFec2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ReporteTransaccionesFec2 = New ReporteTransaccionesFec2
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteTransaccionesFec2RowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteTransaccionesFec2RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteTransaccionesFec2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnCodigoServicio As Global.System.Data.DataColumn
        
        Private columnNomCortoServicio As Global.System.Data.DataColumn
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnDescripcionTran As Global.System.Data.DataColumn
        
        Private columnNumeroServicio As Global.System.Data.DataColumn
        
        Private columnCodigoReferencia As Global.System.Data.DataColumn
        
        Private columnCodigoMotivoEnvio As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnImportado As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnUsuarioAprueba As Global.System.Data.DataColumn
        
        Private columnFechaAprobacion As Global.System.Data.DataColumn
        
        Private columnUsuarioEnvia As Global.System.Data.DataColumn
        
        Private columnFechaEnvio As Global.System.Data.DataColumn
        
        Private columnUsuarioAutoriza As Global.System.Data.DataColumn
        
        Private columnFechaAutoriza As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnIdVerificacion As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        Private columnCodigoMonedaCC As Global.System.Data.DataColumn
        
        Private columnMontoCC As Global.System.Data.DataColumn
        
        Private columnNombreMonedaCC As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreClienteOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreCanal As Global.System.Data.DataColumn
        
        Private columnIdCanal As Global.System.Data.DataColumn
        
        Private columnAbreviaturaBanco As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteTransaccionesFec2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomCortoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomCortoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivoEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImportadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImportado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioApruebaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAprueba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioEnviaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioEnvia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdVerificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdVerificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaCCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMonedaCC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoCCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoCC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaCCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMonedaCC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbreviaturaBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbreviaturaBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteTransaccionesFec2Row
            Get
                Return CType(Me.Rows(index),PC_ReporteTransaccionesFec2Row)
            End Get
        End Property
        
        Public Event PC_ReporteTransaccionesFec2RowChanging As PC_ReporteTransaccionesFec2RowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesFec2RowChanged As PC_ReporteTransaccionesFec2RowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesFec2RowDeleting As PC_ReporteTransaccionesFec2RowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesFec2RowDeleted As PC_ReporteTransaccionesFec2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteTransaccionesFec2Row(ByVal row As PC_ReporteTransaccionesFec2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteTransaccionesFec2Row( _
                    ByVal TipoOperacion As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal CodigoServicio As Integer,  _
                    ByVal NomCortoServicio As String,  _
                    ByVal NumeroOrden As Integer,  _
                    ByVal CodigoCentro As Integer,  _
                    ByVal NombreCentro As String,  _
                    ByVal CodigoConcepto As Integer,  _
                    ByVal NombreConcepto As String,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal NombreMoneda As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal NombreBanco As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal DescripcionTran As String,  _
                    ByVal NumeroServicio As String,  _
                    ByVal CodigoReferencia As String,  _
                    ByVal CodigoMotivoEnvio As Integer,  _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal Importado As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal UsuarioRegistra As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal UsuarioAprueba As String,  _
                    ByVal FechaAprobacion As Date,  _
                    ByVal UsuarioEnvia As String,  _
                    ByVal FechaEnvio As Date,  _
                    ByVal UsuarioAutoriza As String,  _
                    ByVal FechaAutoriza As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal IdVerificacion As String,  _
                    ByVal FechaCiclo As Date,  _
                    ByVal CodigoMonedaCC As Integer,  _
                    ByVal MontoCC As Decimal,  _
                    ByVal NombreMonedaCC As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal NombreClienteOrigen As String,  _
                    ByVal CuentaClienteOrigen As String,  _
                    ByVal NombreCanal As String,  _
                    ByVal AbreviaturaBanco As String) As PC_ReporteTransaccionesFec2Row
            Dim rowPC_ReporteTransaccionesFec2Row As PC_ReporteTransaccionesFec2Row = CType(Me.NewRow,PC_ReporteTransaccionesFec2Row)
            Dim columnValuesArray() As Object = New Object() {TipoOperacion, NumeroTransaccion, CodigoServicio, NomCortoServicio, NumeroOrden, CodigoCentro, NombreCentro, CodigoConcepto, NombreConcepto, CedulaPersona, NombrePersona, CodigoMoneda, NombreMoneda, CuentaCliente, NombreBanco, Monto, NumeroDocumento, DescripcionTran, NumeroServicio, CodigoReferencia, CodigoMotivoEnvio, NumeroEnvio, Importado, EstadoTran, UsuarioRegistra, FechaRegistro, UsuarioAprueba, FechaAprobacion, UsuarioEnvia, FechaEnvio, UsuarioAutoriza, FechaAutoriza, CodMotivoRechazo, IdVerificacion, FechaCiclo, CodigoMonedaCC, MontoCC, NombreMonedaCC, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen, NombreCanal, Nothing, AbreviaturaBanco}
            rowPC_ReporteTransaccionesFec2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteTransaccionesFec2Row)
            Return rowPC_ReporteTransaccionesFec2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoOperacionNumeroTransaccion(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer) As PC_ReporteTransaccionesFec2Row
            Return CType(Me.Rows.Find(New Object() {TipoOperacion, NumeroTransaccion}),PC_ReporteTransaccionesFec2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteTransaccionesFec2DataTable = CType(MyBase.Clone,PC_ReporteTransaccionesFec2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteTransaccionesFec2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnCodigoServicio = MyBase.Columns("CodigoServicio")
            Me.columnNomCortoServicio = MyBase.Columns("NomCortoServicio")
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnDescripcionTran = MyBase.Columns("DescripcionTran")
            Me.columnNumeroServicio = MyBase.Columns("NumeroServicio")
            Me.columnCodigoReferencia = MyBase.Columns("CodigoReferencia")
            Me.columnCodigoMotivoEnvio = MyBase.Columns("CodigoMotivoEnvio")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnImportado = MyBase.Columns("Importado")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnUsuarioAprueba = MyBase.Columns("UsuarioAprueba")
            Me.columnFechaAprobacion = MyBase.Columns("FechaAprobacion")
            Me.columnUsuarioEnvia = MyBase.Columns("UsuarioEnvia")
            Me.columnFechaEnvio = MyBase.Columns("FechaEnvio")
            Me.columnUsuarioAutoriza = MyBase.Columns("UsuarioAutoriza")
            Me.columnFechaAutoriza = MyBase.Columns("FechaAutoriza")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnIdVerificacion = MyBase.Columns("IdVerificacion")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
            Me.columnCodigoMonedaCC = MyBase.Columns("CodigoMonedaCC")
            Me.columnMontoCC = MyBase.Columns("MontoCC")
            Me.columnNombreMonedaCC = MyBase.Columns("NombreMonedaCC")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnNombreClienteOrigen = MyBase.Columns("NombreClienteOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
            Me.columnNombreCanal = MyBase.Columns("NombreCanal")
            Me.columnIdCanal = MyBase.Columns("IdCanal")
            Me.columnAbreviaturaBanco = MyBase.Columns("AbreviaturaBanco")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnCodigoServicio = New Global.System.Data.DataColumn("CodigoServicio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicio)
            Me.columnNomCortoServicio = New Global.System.Data.DataColumn("NomCortoServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCortoServicio)
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnDescripcionTran = New Global.System.Data.DataColumn("DescripcionTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionTran)
            Me.columnNumeroServicio = New Global.System.Data.DataColumn("NumeroServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroServicio)
            Me.columnCodigoReferencia = New Global.System.Data.DataColumn("CodigoReferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoReferencia)
            Me.columnCodigoMotivoEnvio = New Global.System.Data.DataColumn("CodigoMotivoEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivoEnvio)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnImportado = New Global.System.Data.DataColumn("Importado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImportado)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnUsuarioAprueba = New Global.System.Data.DataColumn("UsuarioAprueba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAprueba)
            Me.columnFechaAprobacion = New Global.System.Data.DataColumn("FechaAprobacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAprobacion)
            Me.columnUsuarioEnvia = New Global.System.Data.DataColumn("UsuarioEnvia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioEnvia)
            Me.columnFechaEnvio = New Global.System.Data.DataColumn("FechaEnvio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEnvio)
            Me.columnUsuarioAutoriza = New Global.System.Data.DataColumn("UsuarioAutoriza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAutoriza)
            Me.columnFechaAutoriza = New Global.System.Data.DataColumn("FechaAutoriza", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAutoriza)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnIdVerificacion = New Global.System.Data.DataColumn("IdVerificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdVerificacion)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.columnCodigoMonedaCC = New Global.System.Data.DataColumn("CodigoMonedaCC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMonedaCC)
            Me.columnMontoCC = New Global.System.Data.DataColumn("MontoCC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoCC)
            Me.columnNombreMonedaCC = New Global.System.Data.DataColumn("NombreMonedaCC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMonedaCC)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnNombreClienteOrigen = New Global.System.Data.DataColumn("NombreClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreClienteOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnNombreCanal = New Global.System.Data.DataColumn("NombreCanal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCanal)
            Me.columnIdCanal = New Global.System.Data.DataColumn("IdCanal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCanal)
            Me.columnAbreviaturaBanco = New Global.System.Data.DataColumn("AbreviaturaBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbreviaturaBanco)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoOperacion, Me.columnNumeroTransaccion}, true))
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnCodigoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.MaxLength = 30
            Me.columnCodigoCentro.AllowDBNull = false
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnNombreBanco.AllowDBNull = false
            Me.columnNombreBanco.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnDescripcionTran.AllowDBNull = false
            Me.columnDescripcionTran.MaxLength = 255
            Me.columnNumeroServicio.AllowDBNull = false
            Me.columnNumeroServicio.MaxLength = 20
            Me.columnCodigoReferencia.MaxLength = 25
            Me.columnCodigoMotivoEnvio.AllowDBNull = false
            Me.columnImportado.AllowDBNull = false
            Me.columnImportado.MaxLength = 1
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnUsuarioAprueba.MaxLength = 35
            Me.columnUsuarioEnvia.MaxLength = 35
            Me.columnUsuarioAutoriza.MaxLength = 35
            Me.columnIdVerificacion.AllowDBNull = false
            Me.columnIdVerificacion.MaxLength = 200
            Me.columnFechaCiclo.AllowDBNull = false
            Me.columnCodigoMonedaCC.AllowDBNull = false
            Me.columnMontoCC.AllowDBNull = false
            Me.columnNombreMonedaCC.AllowDBNull = false
            Me.columnNombreMonedaCC.MaxLength = 30
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnNombreClienteOrigen.MaxLength = 100
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.columnNombreCanal.MaxLength = 255
            Me.columnIdCanal.AutoIncrement = true
            Me.columnIdCanal.AutoIncrementSeed = -1
            Me.columnIdCanal.AutoIncrementStep = -1
            Me.columnIdCanal.ReadOnly = true
            Me.columnAbreviaturaBanco.AllowDBNull = false
            Me.columnAbreviaturaBanco.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteTransaccionesFec2Row() As PC_ReporteTransaccionesFec2Row
            Return CType(Me.NewRow,PC_ReporteTransaccionesFec2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteTransaccionesFec2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteTransaccionesFec2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteTransaccionesFec2RowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFec2RowChanged(Me, New PC_ReporteTransaccionesFec2RowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFec2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteTransaccionesFec2RowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFec2RowChanging(Me, New PC_ReporteTransaccionesFec2RowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFec2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteTransaccionesFec2RowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFec2RowDeleted(Me, New PC_ReporteTransaccionesFec2RowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFec2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteTransaccionesFec2RowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesFec2RowDeleting(Me, New PC_ReporteTransaccionesFec2RowChangeEvent(CType(e.Row,PC_ReporteTransaccionesFec2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteTransaccionesFec2Row(ByVal row As PC_ReporteTransaccionesFec2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ReporteTransaccionesFec2 = New ReporteTransaccionesFec2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteTransaccionesFec2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteTransaccionesFec2Row
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteTransaccionesFec2 As PC_ReporteTransaccionesFec2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteTransaccionesFec2 = CType(Me.Table,PC_ReporteTransaccionesFec2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodigoServicioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodigoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCortoServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NomCortoServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NomCortoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NumeroOrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroOrden' de la tabla 'PC_ReporteTransaccionesFec2' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodigoCentroColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombreBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReporteTransaccionesFec2"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.DescripcionTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.DescripcionTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NumeroServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NumeroServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoReferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodigoReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoReferencia' de la tabla 'PC_ReporteTransaccionesFec"& _ 
                            "2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodigoReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivoEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodigoMotivoEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodigoMotivoEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteTransaccionesFec2' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importado() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.ImportadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.ImportadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAprueba() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioApruebaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAprueba' de la tabla 'PC_ReporteTransaccionesFec2'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioApruebaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAprobacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.FechaAprobacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAprobacion' de la tabla 'PC_ReporteTransaccionesFec2"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.FechaAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioEnvia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioEnviaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioEnvia' de la tabla 'PC_ReporteTransaccionesFec2' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioEnviaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEnvio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.FechaEnvioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaEnvio' de la tabla 'PC_ReporteTransaccionesFec2' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.FechaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAutoriza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioAutorizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAutoriza' de la tabla 'PC_ReporteTransaccionesFec2"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAutoriza() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.FechaAutorizaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAutoriza' de la tabla 'PC_ReporteTransaccionesFec2' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.FechaAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReporteTransaccionesFec"& _ 
                            "2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdVerificacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.IdVerificacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.IdVerificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.FechaCicloColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMonedaCC() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CodigoMonedaCCColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CodigoMonedaCCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoCC() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.MontoCCColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.MontoCCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMonedaCC() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombreMonedaCCColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombreMonedaCCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Fec2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombreClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Fec2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombreClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "Fec2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCanal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.NombreCanalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCanal' de la tabla 'PC_ReporteTransaccionesFec2' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.NombreCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCanal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.IdCanalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdCanal' de la tabla 'PC_ReporteTransaccionesFec2' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.IdCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AbreviaturaBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesFec2.AbreviaturaBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesFec2.AbreviaturaBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroOrdenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.NumeroOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroOrdenNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.NumeroOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.CodigoReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoReferenciaNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.CodigoReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioApruebaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.UsuarioApruebaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioApruebaNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioApruebaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.FechaAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAprobacionNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.FechaAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioEnviaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.UsuarioEnviaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioEnviaNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioEnviaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.FechaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.FechaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.UsuarioAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.UsuarioAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.FechaAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.FechaAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.NombreClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.NombreClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.NombreCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCanalNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.NombreCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesFec2.IdCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCanalNull()
            Me(Me.tablePC_ReporteTransaccionesFec2.IdCanalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteTransaccionesFec2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteTransaccionesFec2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteTransaccionesFec2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteTransaccionesFec2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_ReporteTransaccionesPorNumero"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_ReporteTransaccionesPorNumero
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteTransaccionesPorNumero As PC_ReporteTransaccionesPorNumeroDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteTransaccionesPorNumero")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesPorNumeroDataTable(ds.Tables("PC_ReporteTransaccionesPorNumero")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_ReporteTransaccionesPorNumero() As PC_ReporteTransaccionesPorNumeroDataTable
        Get
            Return Me.tablePC_ReporteTransaccionesPorNumero
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_ReporteTransaccionesPorNumero = CType(MyBase.Clone,PC_ReporteTransaccionesPorNumero)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteTransaccionesPorNumero")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesPorNumeroDataTable(ds.Tables("PC_ReporteTransaccionesPorNumero")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteTransaccionesPorNumero = CType(MyBase.Tables("PC_ReporteTransaccionesPorNumero"),PC_ReporteTransaccionesPorNumeroDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteTransaccionesPorNumero) Is Nothing) Then
                Me.tablePC_ReporteTransaccionesPorNumero.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_ReporteTransaccionesPorNumero"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_ReporteTransaccionesPorNumero.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteTransaccionesPorNumero = New PC_ReporteTransaccionesPorNumeroDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteTransaccionesPorNumero)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_ReporteTransaccionesPorNumero() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_ReporteTransaccionesPorNumero = New PC_ReporteTransaccionesPorNumero
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteTransaccionesPorNumeroRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteTransaccionesPorNumeroRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteTransaccionesPorNumeroDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnCodigoServicio As Global.System.Data.DataColumn
        
        Private columnNomCortoServicio As Global.System.Data.DataColumn
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnDescripcionTran As Global.System.Data.DataColumn
        
        Private columnNumeroServicio As Global.System.Data.DataColumn
        
        Private columnCodigoReferencia As Global.System.Data.DataColumn
        
        Private columnCodigoMotivoEnvio As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnImportado As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnUsuarioAprueba As Global.System.Data.DataColumn
        
        Private columnFechaAprobacion As Global.System.Data.DataColumn
        
        Private columnUsuarioEnvia As Global.System.Data.DataColumn
        
        Private columnFechaEnvio As Global.System.Data.DataColumn
        
        Private columnUsuarioAutoriza As Global.System.Data.DataColumn
        
        Private columnFechaAutoriza As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnIdVerificacion As Global.System.Data.DataColumn
        
        Private columnFechaCiclo As Global.System.Data.DataColumn
        
        Private columnUsuarioFirma1 As Global.System.Data.DataColumn
        
        Private columnUsuarioFirma2 As Global.System.Data.DataColumn
        
        Private columnFechaFirma1 As Global.System.Data.DataColumn
        
        Private columnFechaFirma2 As Global.System.Data.DataColumn
        
        Private columnNombreMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnCedulaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreClienteOrigen As Global.System.Data.DataColumn
        
        Private columnCuentaClienteOrigen As Global.System.Data.DataColumn
        
        Private columnNombreCanal As Global.System.Data.DataColumn
        
        Private columnIdCanal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteTransaccionesPorNumero"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomCortoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomCortoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivoEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImportadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImportado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioApruebaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAprueba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioEnviaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioEnvia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAutorizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAutoriza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdVerificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdVerificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCicloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCiclo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioFirma1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioFirma1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioFirma2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioFirma2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFirma1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFirma1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFirma2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFirma2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaClienteOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteTransaccionesPorNumeroRow
            Get
                Return CType(Me.Rows(index),PC_ReporteTransaccionesPorNumeroRow)
            End Get
        End Property
        
        Public Event PC_ReporteTransaccionesPorNumeroRowChanging As PC_ReporteTransaccionesPorNumeroRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesPorNumeroRowChanged As PC_ReporteTransaccionesPorNumeroRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesPorNumeroRowDeleting As PC_ReporteTransaccionesPorNumeroRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesPorNumeroRowDeleted As PC_ReporteTransaccionesPorNumeroRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteTransaccionesPorNumeroRow(ByVal row As PC_ReporteTransaccionesPorNumeroRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteTransaccionesPorNumeroRow( _
                    ByVal TipoOperacion As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal CodigoServicio As Integer,  _
                    ByVal NomCortoServicio As String,  _
                    ByVal NumeroOrden As Integer,  _
                    ByVal CodigoCentro As Integer,  _
                    ByVal NombreCentro As String,  _
                    ByVal CodigoConcepto As Integer,  _
                    ByVal NombreConcepto As String,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal NombreMoneda As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal NombreBanco As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal DescripcionTran As String,  _
                    ByVal NumeroServicio As String,  _
                    ByVal CodigoReferencia As String,  _
                    ByVal CodigoMotivoEnvio As Integer,  _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal Importado As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal UsuarioRegistra As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal UsuarioAprueba As String,  _
                    ByVal FechaAprobacion As Date,  _
                    ByVal UsuarioEnvia As String,  _
                    ByVal FechaEnvio As Date,  _
                    ByVal UsuarioAutoriza As String,  _
                    ByVal FechaAutoriza As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal IdVerificacion As String,  _
                    ByVal FechaCiclo As Date,  _
                    ByVal UsuarioFirma1 As String,  _
                    ByVal UsuarioFirma2 As String,  _
                    ByVal FechaFirma1 As Date,  _
                    ByVal FechaFirma2 As Date,  _
                    ByVal NombreMotivoRechazo As String,  _
                    ByVal CedulaClienteOrigen As String,  _
                    ByVal NombreClienteOrigen As String,  _
                    ByVal CuentaClienteOrigen As String,  _
                    ByVal NombreCanal As String) As PC_ReporteTransaccionesPorNumeroRow
            Dim rowPC_ReporteTransaccionesPorNumeroRow As PC_ReporteTransaccionesPorNumeroRow = CType(Me.NewRow,PC_ReporteTransaccionesPorNumeroRow)
            Dim columnValuesArray() As Object = New Object() {TipoOperacion, NumeroTransaccion, CodigoServicio, NomCortoServicio, NumeroOrden, CodigoCentro, NombreCentro, CodigoConcepto, NombreConcepto, CedulaPersona, NombrePersona, CodigoMoneda, NombreMoneda, CuentaCliente, NombreBanco, Monto, NumeroDocumento, DescripcionTran, NumeroServicio, CodigoReferencia, CodigoMotivoEnvio, NumeroEnvio, Importado, EstadoTran, UsuarioRegistra, FechaRegistro, UsuarioAprueba, FechaAprobacion, UsuarioEnvia, FechaEnvio, UsuarioAutoriza, FechaAutoriza, CodMotivoRechazo, IdVerificacion, FechaCiclo, UsuarioFirma1, UsuarioFirma2, FechaFirma1, FechaFirma2, NombreMotivoRechazo, CedulaClienteOrigen, NombreClienteOrigen, CuentaClienteOrigen, NombreCanal, Nothing}
            rowPC_ReporteTransaccionesPorNumeroRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteTransaccionesPorNumeroRow)
            Return rowPC_ReporteTransaccionesPorNumeroRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoOperacionNumeroTransaccion(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer) As PC_ReporteTransaccionesPorNumeroRow
            Return CType(Me.Rows.Find(New Object() {TipoOperacion, NumeroTransaccion}),PC_ReporteTransaccionesPorNumeroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteTransaccionesPorNumeroDataTable = CType(MyBase.Clone,PC_ReporteTransaccionesPorNumeroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteTransaccionesPorNumeroDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnCodigoServicio = MyBase.Columns("CodigoServicio")
            Me.columnNomCortoServicio = MyBase.Columns("NomCortoServicio")
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnDescripcionTran = MyBase.Columns("DescripcionTran")
            Me.columnNumeroServicio = MyBase.Columns("NumeroServicio")
            Me.columnCodigoReferencia = MyBase.Columns("CodigoReferencia")
            Me.columnCodigoMotivoEnvio = MyBase.Columns("CodigoMotivoEnvio")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnImportado = MyBase.Columns("Importado")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnUsuarioAprueba = MyBase.Columns("UsuarioAprueba")
            Me.columnFechaAprobacion = MyBase.Columns("FechaAprobacion")
            Me.columnUsuarioEnvia = MyBase.Columns("UsuarioEnvia")
            Me.columnFechaEnvio = MyBase.Columns("FechaEnvio")
            Me.columnUsuarioAutoriza = MyBase.Columns("UsuarioAutoriza")
            Me.columnFechaAutoriza = MyBase.Columns("FechaAutoriza")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnIdVerificacion = MyBase.Columns("IdVerificacion")
            Me.columnFechaCiclo = MyBase.Columns("FechaCiclo")
            Me.columnUsuarioFirma1 = MyBase.Columns("UsuarioFirma1")
            Me.columnUsuarioFirma2 = MyBase.Columns("UsuarioFirma2")
            Me.columnFechaFirma1 = MyBase.Columns("FechaFirma1")
            Me.columnFechaFirma2 = MyBase.Columns("FechaFirma2")
            Me.columnNombreMotivoRechazo = MyBase.Columns("NombreMotivoRechazo")
            Me.columnCedulaClienteOrigen = MyBase.Columns("CedulaClienteOrigen")
            Me.columnNombreClienteOrigen = MyBase.Columns("NombreClienteOrigen")
            Me.columnCuentaClienteOrigen = MyBase.Columns("CuentaClienteOrigen")
            Me.columnNombreCanal = MyBase.Columns("NombreCanal")
            Me.columnIdCanal = MyBase.Columns("IdCanal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnCodigoServicio = New Global.System.Data.DataColumn("CodigoServicio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicio)
            Me.columnNomCortoServicio = New Global.System.Data.DataColumn("NomCortoServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCortoServicio)
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnDescripcionTran = New Global.System.Data.DataColumn("DescripcionTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionTran)
            Me.columnNumeroServicio = New Global.System.Data.DataColumn("NumeroServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroServicio)
            Me.columnCodigoReferencia = New Global.System.Data.DataColumn("CodigoReferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoReferencia)
            Me.columnCodigoMotivoEnvio = New Global.System.Data.DataColumn("CodigoMotivoEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivoEnvio)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnImportado = New Global.System.Data.DataColumn("Importado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImportado)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnUsuarioAprueba = New Global.System.Data.DataColumn("UsuarioAprueba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAprueba)
            Me.columnFechaAprobacion = New Global.System.Data.DataColumn("FechaAprobacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAprobacion)
            Me.columnUsuarioEnvia = New Global.System.Data.DataColumn("UsuarioEnvia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioEnvia)
            Me.columnFechaEnvio = New Global.System.Data.DataColumn("FechaEnvio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaEnvio)
            Me.columnUsuarioAutoriza = New Global.System.Data.DataColumn("UsuarioAutoriza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioAutoriza)
            Me.columnFechaAutoriza = New Global.System.Data.DataColumn("FechaAutoriza", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAutoriza)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnIdVerificacion = New Global.System.Data.DataColumn("IdVerificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdVerificacion)
            Me.columnFechaCiclo = New Global.System.Data.DataColumn("FechaCiclo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCiclo)
            Me.columnUsuarioFirma1 = New Global.System.Data.DataColumn("UsuarioFirma1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioFirma1)
            Me.columnUsuarioFirma2 = New Global.System.Data.DataColumn("UsuarioFirma2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioFirma2)
            Me.columnFechaFirma1 = New Global.System.Data.DataColumn("FechaFirma1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFirma1)
            Me.columnFechaFirma2 = New Global.System.Data.DataColumn("FechaFirma2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFirma2)
            Me.columnNombreMotivoRechazo = New Global.System.Data.DataColumn("NombreMotivoRechazo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMotivoRechazo)
            Me.columnCedulaClienteOrigen = New Global.System.Data.DataColumn("CedulaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaClienteOrigen)
            Me.columnNombreClienteOrigen = New Global.System.Data.DataColumn("NombreClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreClienteOrigen)
            Me.columnCuentaClienteOrigen = New Global.System.Data.DataColumn("CuentaClienteOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaClienteOrigen)
            Me.columnNombreCanal = New Global.System.Data.DataColumn("NombreCanal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCanal)
            Me.columnIdCanal = New Global.System.Data.DataColumn("IdCanal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCanal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoOperacion, Me.columnNumeroTransaccion}, true))
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnCodigoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.MaxLength = 30
            Me.columnCodigoCentro.AllowDBNull = false
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnNombreBanco.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnDescripcionTran.AllowDBNull = false
            Me.columnDescripcionTran.MaxLength = 255
            Me.columnNumeroServicio.AllowDBNull = false
            Me.columnNumeroServicio.MaxLength = 20
            Me.columnCodigoReferencia.MaxLength = 25
            Me.columnCodigoMotivoEnvio.AllowDBNull = false
            Me.columnImportado.AllowDBNull = false
            Me.columnImportado.MaxLength = 1
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnUsuarioAprueba.MaxLength = 35
            Me.columnUsuarioEnvia.MaxLength = 35
            Me.columnUsuarioAutoriza.MaxLength = 35
            Me.columnIdVerificacion.AllowDBNull = false
            Me.columnIdVerificacion.MaxLength = 200
            Me.columnUsuarioFirma1.MaxLength = 35
            Me.columnUsuarioFirma2.MaxLength = 35
            Me.columnNombreMotivoRechazo.ReadOnly = true
            Me.columnNombreMotivoRechazo.MaxLength = 80
            Me.columnCedulaClienteOrigen.MaxLength = 20
            Me.columnNombreClienteOrigen.MaxLength = 100
            Me.columnCuentaClienteOrigen.MaxLength = 17
            Me.columnNombreCanal.MaxLength = 255
            Me.columnIdCanal.AutoIncrement = true
            Me.columnIdCanal.AutoIncrementSeed = -1
            Me.columnIdCanal.AutoIncrementStep = -1
            Me.columnIdCanal.ReadOnly = true
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_ReporteTransaccionesPorNumero")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_ReporteTransaccionesPorNumero")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteTransaccionesPorNumeroRow() As PC_ReporteTransaccionesPorNumeroRow
            Return CType(Me.NewRow,PC_ReporteTransaccionesPorNumeroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteTransaccionesPorNumeroRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteTransaccionesPorNumeroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteTransaccionesPorNumeroRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesPorNumeroRowChanged(Me, New PC_ReporteTransaccionesPorNumeroRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesPorNumeroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteTransaccionesPorNumeroRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesPorNumeroRowChanging(Me, New PC_ReporteTransaccionesPorNumeroRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesPorNumeroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteTransaccionesPorNumeroRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesPorNumeroRowDeleted(Me, New PC_ReporteTransaccionesPorNumeroRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesPorNumeroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteTransaccionesPorNumeroRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesPorNumeroRowDeleting(Me, New PC_ReporteTransaccionesPorNumeroRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesPorNumeroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteTransaccionesPorNumeroRow(ByVal row As PC_ReporteTransaccionesPorNumeroRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_ReporteTransaccionesPorNumero = New PC_ReporteTransaccionesPorNumero
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteTransaccionesPorNumeroDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteTransaccionesPorNumeroRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteTransaccionesPorNumero As PC_ReporteTransaccionesPorNumeroDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteTransaccionesPorNumero = CType(Me.Table,PC_ReporteTransaccionesPorNumeroDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoServicioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCortoServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NomCortoServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NomCortoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroOrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroOrden' de la tabla 'PC_ReporteTransaccionesPorNumer"& _ 
                            "o' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoCentroColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreBancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreBanco' de la tabla 'PC_ReporteTransaccionesPorNumer"& _ 
                            "o' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReporteTransaccionesPorN"& _ 
                            "umero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.DescripcionTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.DescripcionTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoReferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoReferencia' de la tabla 'PC_ReporteTransaccionesPor"& _ 
                            "Numero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivoEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoMotivoEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoMotivoEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteTransaccionesPorNumer"& _ 
                            "o' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importado() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.ImportadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.ImportadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAprueba() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioApruebaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAprueba' de la tabla 'PC_ReporteTransaccionesPorNu"& _ 
                            "mero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioApruebaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAprobacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaAprobacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAprobacion' de la tabla 'PC_ReporteTransaccionesPorN"& _ 
                            "umero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioEnvia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioEnviaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioEnvia' de la tabla 'PC_ReporteTransaccionesPorNume"& _ 
                            "ro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioEnviaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaEnvio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaEnvioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaEnvio' de la tabla 'PC_ReporteTransaccionesPorNumero"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioAutoriza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioAutorizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioAutoriza' de la tabla 'PC_ReporteTransaccionesPorN"& _ 
                            "umero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAutoriza() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaAutorizaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAutoriza' de la tabla 'PC_ReporteTransaccionesPorNum"& _ 
                            "ero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaAutorizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReporteTransaccionesPor"& _ 
                            "Numero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdVerificacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.IdVerificacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.IdVerificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCiclo() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaCicloColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaCiclo' de la tabla 'PC_ReporteTransaccionesPorNumero"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaCicloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioFirma1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioFirma1' de la tabla 'PC_ReporteTransaccionesPorNum"& _ 
                            "ero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioFirma2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UsuarioFirma2' de la tabla 'PC_ReporteTransaccionesPorNum"& _ 
                            "ero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFirma1() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFirma1' de la tabla 'PC_ReporteTransaccionesPorNumer"& _ 
                            "o' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFirma2() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFirma2' de la tabla 'PC_ReporteTransaccionesPorNumer"& _ 
                            "o' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMotivoRechazo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreMotivoRechazoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreMotivoRechazo' de la tabla 'PC_ReporteTransacciones"& _ 
                            "PorNumero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CedulaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CedulaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "PorNumero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CedulaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "PorNumero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaClienteOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.CuentaClienteOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaClienteOrigen' de la tabla 'PC_ReporteTransacciones"& _ 
                            "PorNumero' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.CuentaClienteOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCanal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreCanalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCanal' de la tabla 'PC_ReporteTransaccionesPorNumer"& _ 
                            "o' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCanal() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesPorNumero.IdCanalColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdCanal' de la tabla 'PC_ReporteTransaccionesPorNumero' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesPorNumero.IdCanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroOrdenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.NumeroOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroOrdenNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreBancoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.NombreBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreBancoNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreBancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.CodigoReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoReferenciaNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.CodigoReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioApruebaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioApruebaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioApruebaNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioApruebaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.FechaAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAprobacionNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioEnviaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioEnviaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioEnviaNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioEnviaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.FechaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAutorizaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.FechaAutorizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAutorizaNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaAutorizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCicloNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.FechaCicloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCicloNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaCicloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioFirma1Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioFirma1Null()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioFirma2Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioFirma2Null()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.UsuarioFirma2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFirma1Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFirma1Null()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFirma2Null() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFirma2Null()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.FechaFirma2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.NombreMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreMotivoRechazoNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCedulaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.CedulaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCedulaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.CedulaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.NombreClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaClienteOrigenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.CuentaClienteOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaClienteOrigenNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.CuentaClienteOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.NombreCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCanalNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.NombreCanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCanalNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesPorNumero.IdCanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCanalNull()
            Me(Me.tablePC_ReporteTransaccionesPorNumero.IdCanalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteTransaccionesPorNumeroRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteTransaccionesPorNumeroRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteTransaccionesPorNumeroRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteTransaccionesPorNumeroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'Esta definición de tipo ha sido generada por la extensión del importador de esquemas System.Data.Design.TypedDataSetSchemaImporterExtension.
'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PC_ReporteTransaccionesSinFechaCiclo"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PC_ReporteTransaccionesSinFechaCiclo
    Inherits Global.System.Data.DataSet
    
    Private tablePC_ReporteTransaccionesSinFechaCiclo As PC_ReporteTransaccionesSinFechaCicloDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PC_ReporteTransaccionesSinFechaCiclo")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesSinFechaCicloDataTable(ds.Tables("PC_ReporteTransaccionesSinFechaCiclo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _PC_ReporteTransaccionesSinFechaCiclo() As PC_ReporteTransaccionesSinFechaCicloDataTable
        Get
            Return Me.tablePC_ReporteTransaccionesSinFechaCiclo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PC_ReporteTransaccionesSinFechaCiclo = CType(MyBase.Clone,PC_ReporteTransaccionesSinFechaCiclo)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PC_ReporteTransaccionesSinFechaCiclo")) Is Nothing) Then
                MyBase.Tables.Add(New PC_ReporteTransaccionesSinFechaCicloDataTable(ds.Tables("PC_ReporteTransaccionesSinFechaCiclo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePC_ReporteTransaccionesSinFechaCiclo = CType(MyBase.Tables("PC_ReporteTransaccionesSinFechaCiclo"),PC_ReporteTransaccionesSinFechaCicloDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePC_ReporteTransaccionesSinFechaCiclo) Is Nothing) Then
                Me.tablePC_ReporteTransaccionesSinFechaCiclo.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PC_ReporteTransaccionesSinFechaCiclo"
        Me.Prefix = ""
        Me.Namespace = "http://www.prosoft.cr/ReportesCGPWINDOWS/PC_ReporteTransaccionesSinFechaCiclo.xsd"& _ 
            ""
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePC_ReporteTransaccionesSinFechaCiclo = New PC_ReporteTransaccionesSinFechaCicloDataTable
        MyBase.Tables.Add(Me.tablePC_ReporteTransaccionesSinFechaCiclo)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_PC_ReporteTransaccionesSinFechaCiclo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PC_ReporteTransaccionesSinFechaCiclo = New PC_ReporteTransaccionesSinFechaCiclo
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PC_ReporteTransaccionesSinFechaCicloRowChangeEventHandler(ByVal sender As Object, ByVal e As PC_ReporteTransaccionesSinFechaCicloRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PC_ReporteTransaccionesSinFechaCicloDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTipoOperacion As Global.System.Data.DataColumn
        
        Private columnNumeroTransaccion As Global.System.Data.DataColumn
        
        Private columnCodigoServicio As Global.System.Data.DataColumn
        
        Private columnNomCortoServicio As Global.System.Data.DataColumn
        
        Private columnNumeroOrden As Global.System.Data.DataColumn
        
        Private columnCodigoCentro As Global.System.Data.DataColumn
        
        Private columnNombreCentro As Global.System.Data.DataColumn
        
        Private columnCodigoConcepto As Global.System.Data.DataColumn
        
        Private columnNombreConcepto As Global.System.Data.DataColumn
        
        Private columnCedulaPersona As Global.System.Data.DataColumn
        
        Private columnNombrePersona As Global.System.Data.DataColumn
        
        Private columnCodigoMoneda As Global.System.Data.DataColumn
        
        Private columnNombreMoneda As Global.System.Data.DataColumn
        
        Private columnCuentaCliente As Global.System.Data.DataColumn
        
        Private columnNombreBanco As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnNumeroDocumento As Global.System.Data.DataColumn
        
        Private columnDescripcionTran As Global.System.Data.DataColumn
        
        Private columnNumeroServicio As Global.System.Data.DataColumn
        
        Private columnCodigoReferencia As Global.System.Data.DataColumn
        
        Private columnCodigoMotivoEnvio As Global.System.Data.DataColumn
        
        Private columnNumeroEnvio As Global.System.Data.DataColumn
        
        Private columnImportado As Global.System.Data.DataColumn
        
        Private columnEstadoTran As Global.System.Data.DataColumn
        
        Private columnUsuarioRegistra As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnCodMotivoRechazo As Global.System.Data.DataColumn
        
        Private columnIdVerificacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PC_ReporteTransaccionesSinFechaCiclo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoOperacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoOperacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroTransaccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTransaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomCortoServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomCortoServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCentroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCentro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CedulaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCedulaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroServicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroServicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoMotivoEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoMotivoEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImportadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImportado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoTranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoTran
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioRegistraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuarioRegistra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMotivoRechazoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMotivoRechazo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdVerificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdVerificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PC_ReporteTransaccionesSinFechaCicloRow
            Get
                Return CType(Me.Rows(index),PC_ReporteTransaccionesSinFechaCicloRow)
            End Get
        End Property
        
        Public Event PC_ReporteTransaccionesSinFechaCicloRowChanging As PC_ReporteTransaccionesSinFechaCicloRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesSinFechaCicloRowChanged As PC_ReporteTransaccionesSinFechaCicloRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesSinFechaCicloRowDeleting As PC_ReporteTransaccionesSinFechaCicloRowChangeEventHandler
        
        Public Event PC_ReporteTransaccionesSinFechaCicloRowDeleted As PC_ReporteTransaccionesSinFechaCicloRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPC_ReporteTransaccionesSinFechaCicloRow(ByVal row As PC_ReporteTransaccionesSinFechaCicloRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPC_ReporteTransaccionesSinFechaCicloRow( _
                    ByVal TipoOperacion As String,  _
                    ByVal NumeroTransaccion As Integer,  _
                    ByVal CodigoServicio As Integer,  _
                    ByVal NomCortoServicio As String,  _
                    ByVal NumeroOrden As Integer,  _
                    ByVal CodigoCentro As Integer,  _
                    ByVal NombreCentro As String,  _
                    ByVal CodigoConcepto As Integer,  _
                    ByVal NombreConcepto As String,  _
                    ByVal CedulaPersona As String,  _
                    ByVal NombrePersona As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal NombreMoneda As String,  _
                    ByVal CuentaCliente As String,  _
                    ByVal NombreBanco As String,  _
                    ByVal Monto As Decimal,  _
                    ByVal NumeroDocumento As String,  _
                    ByVal DescripcionTran As String,  _
                    ByVal NumeroServicio As String,  _
                    ByVal CodigoReferencia As String,  _
                    ByVal CodigoMotivoEnvio As Integer,  _
                    ByVal NumeroEnvio As Integer,  _
                    ByVal Importado As String,  _
                    ByVal EstadoTran As String,  _
                    ByVal UsuarioRegistra As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal CodMotivoRechazo As Integer,  _
                    ByVal IdVerificacion As String) As PC_ReporteTransaccionesSinFechaCicloRow
            Dim rowPC_ReporteTransaccionesSinFechaCicloRow As PC_ReporteTransaccionesSinFechaCicloRow = CType(Me.NewRow,PC_ReporteTransaccionesSinFechaCicloRow)
            Dim columnValuesArray() As Object = New Object() {TipoOperacion, NumeroTransaccion, CodigoServicio, NomCortoServicio, NumeroOrden, CodigoCentro, NombreCentro, CodigoConcepto, NombreConcepto, CedulaPersona, NombrePersona, CodigoMoneda, NombreMoneda, CuentaCliente, NombreBanco, Monto, NumeroDocumento, DescripcionTran, NumeroServicio, CodigoReferencia, CodigoMotivoEnvio, NumeroEnvio, Importado, EstadoTran, UsuarioRegistra, FechaRegistro, CodMotivoRechazo, IdVerificacion}
            rowPC_ReporteTransaccionesSinFechaCicloRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPC_ReporteTransaccionesSinFechaCicloRow)
            Return rowPC_ReporteTransaccionesSinFechaCicloRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoOperacionNumeroTransaccion(ByVal TipoOperacion As String, ByVal NumeroTransaccion As Integer) As PC_ReporteTransaccionesSinFechaCicloRow
            Return CType(Me.Rows.Find(New Object() {TipoOperacion, NumeroTransaccion}),PC_ReporteTransaccionesSinFechaCicloRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PC_ReporteTransaccionesSinFechaCicloDataTable = CType(MyBase.Clone,PC_ReporteTransaccionesSinFechaCicloDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PC_ReporteTransaccionesSinFechaCicloDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoOperacion = MyBase.Columns("TipoOperacion")
            Me.columnNumeroTransaccion = MyBase.Columns("NumeroTransaccion")
            Me.columnCodigoServicio = MyBase.Columns("CodigoServicio")
            Me.columnNomCortoServicio = MyBase.Columns("NomCortoServicio")
            Me.columnNumeroOrden = MyBase.Columns("NumeroOrden")
            Me.columnCodigoCentro = MyBase.Columns("CodigoCentro")
            Me.columnNombreCentro = MyBase.Columns("NombreCentro")
            Me.columnCodigoConcepto = MyBase.Columns("CodigoConcepto")
            Me.columnNombreConcepto = MyBase.Columns("NombreConcepto")
            Me.columnCedulaPersona = MyBase.Columns("CedulaPersona")
            Me.columnNombrePersona = MyBase.Columns("NombrePersona")
            Me.columnCodigoMoneda = MyBase.Columns("CodigoMoneda")
            Me.columnNombreMoneda = MyBase.Columns("NombreMoneda")
            Me.columnCuentaCliente = MyBase.Columns("CuentaCliente")
            Me.columnNombreBanco = MyBase.Columns("NombreBanco")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
            Me.columnDescripcionTran = MyBase.Columns("DescripcionTran")
            Me.columnNumeroServicio = MyBase.Columns("NumeroServicio")
            Me.columnCodigoReferencia = MyBase.Columns("CodigoReferencia")
            Me.columnCodigoMotivoEnvio = MyBase.Columns("CodigoMotivoEnvio")
            Me.columnNumeroEnvio = MyBase.Columns("NumeroEnvio")
            Me.columnImportado = MyBase.Columns("Importado")
            Me.columnEstadoTran = MyBase.Columns("EstadoTran")
            Me.columnUsuarioRegistra = MyBase.Columns("UsuarioRegistra")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnCodMotivoRechazo = MyBase.Columns("CodMotivoRechazo")
            Me.columnIdVerificacion = MyBase.Columns("IdVerificacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoOperacion = New Global.System.Data.DataColumn("TipoOperacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoOperacion)
            Me.columnNumeroTransaccion = New Global.System.Data.DataColumn("NumeroTransaccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTransaccion)
            Me.columnCodigoServicio = New Global.System.Data.DataColumn("CodigoServicio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoServicio)
            Me.columnNomCortoServicio = New Global.System.Data.DataColumn("NomCortoServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCortoServicio)
            Me.columnNumeroOrden = New Global.System.Data.DataColumn("NumeroOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroOrden)
            Me.columnCodigoCentro = New Global.System.Data.DataColumn("CodigoCentro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoCentro)
            Me.columnNombreCentro = New Global.System.Data.DataColumn("NombreCentro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCentro)
            Me.columnCodigoConcepto = New Global.System.Data.DataColumn("CodigoConcepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoConcepto)
            Me.columnNombreConcepto = New Global.System.Data.DataColumn("NombreConcepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreConcepto)
            Me.columnCedulaPersona = New Global.System.Data.DataColumn("CedulaPersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCedulaPersona)
            Me.columnNombrePersona = New Global.System.Data.DataColumn("NombrePersona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePersona)
            Me.columnCodigoMoneda = New Global.System.Data.DataColumn("CodigoMoneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMoneda)
            Me.columnNombreMoneda = New Global.System.Data.DataColumn("NombreMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMoneda)
            Me.columnCuentaCliente = New Global.System.Data.DataColumn("CuentaCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCliente)
            Me.columnNombreBanco = New Global.System.Data.DataColumn("NombreBanco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBanco)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroDocumento)
            Me.columnDescripcionTran = New Global.System.Data.DataColumn("DescripcionTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionTran)
            Me.columnNumeroServicio = New Global.System.Data.DataColumn("NumeroServicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroServicio)
            Me.columnCodigoReferencia = New Global.System.Data.DataColumn("CodigoReferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoReferencia)
            Me.columnCodigoMotivoEnvio = New Global.System.Data.DataColumn("CodigoMotivoEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoMotivoEnvio)
            Me.columnNumeroEnvio = New Global.System.Data.DataColumn("NumeroEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroEnvio)
            Me.columnImportado = New Global.System.Data.DataColumn("Importado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImportado)
            Me.columnEstadoTran = New Global.System.Data.DataColumn("EstadoTran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoTran)
            Me.columnUsuarioRegistra = New Global.System.Data.DataColumn("UsuarioRegistra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuarioRegistra)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnCodMotivoRechazo = New Global.System.Data.DataColumn("CodMotivoRechazo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMotivoRechazo)
            Me.columnIdVerificacion = New Global.System.Data.DataColumn("IdVerificacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdVerificacion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipoOperacion, Me.columnNumeroTransaccion}, true))
            Me.columnTipoOperacion.AllowDBNull = false
            Me.columnTipoOperacion.MaxLength = 1
            Me.columnNumeroTransaccion.AllowDBNull = false
            Me.columnCodigoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.AllowDBNull = false
            Me.columnNomCortoServicio.MaxLength = 30
            Me.columnCodigoCentro.AllowDBNull = false
            Me.columnNombreCentro.AllowDBNull = false
            Me.columnNombreCentro.MaxLength = 60
            Me.columnCodigoConcepto.AllowDBNull = false
            Me.columnNombreConcepto.AllowDBNull = false
            Me.columnNombreConcepto.MaxLength = 50
            Me.columnCedulaPersona.AllowDBNull = false
            Me.columnCedulaPersona.MaxLength = 20
            Me.columnNombrePersona.AllowDBNull = false
            Me.columnNombrePersona.MaxLength = 100
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnNombreMoneda.AllowDBNull = false
            Me.columnNombreMoneda.MaxLength = 30
            Me.columnCuentaCliente.AllowDBNull = false
            Me.columnCuentaCliente.MaxLength = 17
            Me.columnNombreBanco.AllowDBNull = false
            Me.columnNombreBanco.MaxLength = 100
            Me.columnMonto.AllowDBNull = false
            Me.columnNumeroDocumento.MaxLength = 15
            Me.columnDescripcionTran.AllowDBNull = false
            Me.columnDescripcionTran.MaxLength = 255
            Me.columnNumeroServicio.AllowDBNull = false
            Me.columnNumeroServicio.MaxLength = 20
            Me.columnCodigoReferencia.MaxLength = 25
            Me.columnCodigoMotivoEnvio.AllowDBNull = false
            Me.columnNumeroEnvio.ReadOnly = true
            Me.columnImportado.AllowDBNull = false
            Me.columnImportado.MaxLength = 1
            Me.columnEstadoTran.AllowDBNull = false
            Me.columnEstadoTran.MaxLength = 1
            Me.columnUsuarioRegistra.AllowDBNull = false
            Me.columnUsuarioRegistra.MaxLength = 35
            Me.columnFechaRegistro.AllowDBNull = false
            Me.columnIdVerificacion.AllowDBNull = false
            Me.columnIdVerificacion.MaxLength = 200
            Me.ExtendedProperties.Add("Generator_TablePropName", "_PC_ReporteTransaccionesSinFechaCiclo")
            Me.ExtendedProperties.Add("Generator_UserTableName", "PC_ReporteTransaccionesSinFechaCiclo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPC_ReporteTransaccionesSinFechaCicloRow() As PC_ReporteTransaccionesSinFechaCicloRow
            Return CType(Me.NewRow,PC_ReporteTransaccionesSinFechaCicloRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PC_ReporteTransaccionesSinFechaCicloRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PC_ReporteTransaccionesSinFechaCicloRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PC_ReporteTransaccionesSinFechaCicloRowChangedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesSinFechaCicloRowChanged(Me, New PC_ReporteTransaccionesSinFechaCicloRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesSinFechaCicloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PC_ReporteTransaccionesSinFechaCicloRowChangingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesSinFechaCicloRowChanging(Me, New PC_ReporteTransaccionesSinFechaCicloRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesSinFechaCicloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PC_ReporteTransaccionesSinFechaCicloRowDeletedEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesSinFechaCicloRowDeleted(Me, New PC_ReporteTransaccionesSinFechaCicloRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesSinFechaCicloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PC_ReporteTransaccionesSinFechaCicloRowDeletingEvent) Is Nothing) Then
                RaiseEvent PC_ReporteTransaccionesSinFechaCicloRowDeleting(Me, New PC_ReporteTransaccionesSinFechaCicloRowChangeEvent(CType(e.Row,PC_ReporteTransaccionesSinFechaCicloRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePC_ReporteTransaccionesSinFechaCicloRow(ByVal row As PC_ReporteTransaccionesSinFechaCicloRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PC_ReporteTransaccionesSinFechaCiclo = New PC_ReporteTransaccionesSinFechaCiclo
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PC_ReporteTransaccionesSinFechaCicloDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PC_ReporteTransaccionesSinFechaCicloRow
        Inherits Global.System.Data.DataRow
        
        Private tablePC_ReporteTransaccionesSinFechaCiclo As PC_ReporteTransaccionesSinFechaCicloDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePC_ReporteTransaccionesSinFechaCiclo = CType(Me.Table,PC_ReporteTransaccionesSinFechaCicloDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoOperacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.TipoOperacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.TipoOperacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroTransaccion() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroTransaccionColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroTransaccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoServicio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoServicioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCortoServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NomCortoServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NomCortoServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroOrden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroOrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroOrden' de la tabla 'PC_ReporteTransaccionesSinFecha"& _ 
                            "Ciclo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoCentro() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoCentroColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCentro() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreCentroColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreCentroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoConcepto() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoConceptoColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreConcepto() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreConceptoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CedulaPersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CedulaPersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CedulaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePersona() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombrePersonaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombrePersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMoneda() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMoneda() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCliente() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CuentaClienteColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CuentaClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBanco() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreBancoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NombreBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Monto() As Decimal
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.MontoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroDocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroDocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'PC_ReporteTransaccionesSinF"& _ 
                            "echaCiclo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.DescripcionTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.DescripcionTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroServicio() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroServicioColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroServicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoReferencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoReferencia' de la tabla 'PC_ReporteTransaccionesSin"& _ 
                            "FechaCiclo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoMotivoEnvio() As Integer
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoMotivoEnvioColumn),Integer)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoMotivoEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroEnvio' de la tabla 'PC_ReporteTransaccionesSinFecha"& _ 
                            "Ciclo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importado() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.ImportadoColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.ImportadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoTran() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.EstadoTranColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.EstadoTranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRegistra() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.UsuarioRegistraColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.UsuarioRegistraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.FechaRegistroColumn),Date)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMotivoRechazo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodMotivoRechazoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMotivoRechazo' de la tabla 'PC_ReporteTransaccionesSin"& _ 
                            "FechaCiclo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodMotivoRechazoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdVerificacion() As String
            Get
                Return CType(Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.IdVerificacionColumn),String)
            End Get
            Set
                Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.IdVerificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroOrdenNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroOrdenNull()
            Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroDocumentoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroDocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroDocumentoNull()
            Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroDocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoReferenciaNull()
            Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodigoReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroEnvioNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroEnvioNull()
            Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.NumeroEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMotivoRechazoNull() As Boolean
            Return Me.IsNull(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodMotivoRechazoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMotivoRechazoNull()
            Me(Me.tablePC_ReporteTransaccionesSinFechaCiclo.CodMotivoRechazoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PC_ReporteTransaccionesSinFechaCicloRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PC_ReporteTransaccionesSinFechaCicloRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PC_ReporteTransaccionesSinFechaCicloRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PC_ReporteTransaccionesSinFechaCicloRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneAutorizacionesConceptoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneAutorizacionesConceptoCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneAutorizacionesConceptoCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneAutorizacionesConceptoBasicoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneAutorizacionesConceptoBasicoCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneAutorizacionesConceptoBasicoCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Autorizaciones_Concepto.PC_ReporteAutorizacionesBasicoDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneAutorizacionesConceptoPorBancoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneAutorizacionesConceptoPorBancoCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneAutorizacionesConceptoPorBancoCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Autorizaciones_ConceptoBanco
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Autorizaciones_ConceptoBanco)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoCentrosCostoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoCentrosCostoCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoCentrosCostoCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As CatalogoCentrosCosto
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),CatalogoCentrosCosto)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoConceptosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoConceptosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoConceptosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As CatalogoConceptos.PC_ReporteConceptosDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),CatalogoConceptos.PC_ReporteConceptosDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoDestinatariosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoDestinatariosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoDestinatariosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As Destinatarios.PC_MatriculaPersonasDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),Destinatarios.PC_MatriculaPersonasDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoEntidadesFinacierasCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoEntidadesFinacierasCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoEntidadesFinacierasCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_Bancos.PC_BancosDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_Bancos.PC_BancosDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoMonedasCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoMonedasCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoMonedasCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_Monedas.PC_MonedasDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_Monedas.PC_MonedasDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoMotivosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoMotivosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoMotivosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_Motivos.PC_MotivosDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_Motivos.PC_MotivosDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoServiciosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoServiciosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoServiciosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_Servicios.PC_ServiciosDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_Servicios.PC_ServiciosDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneCatalogoUsuariosCentrosCostosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneCatalogoUsuariosCentrosCostosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneCatalogoUsuariosCentrosCostosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As CatalogoUsuarioCentroCosto
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),CatalogoUsuarioCentroCosto)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ObtieneDomiciliacionesPorPeriodoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneDomiciliacionesPorPeriodoCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ObtieneDomiciliacionesPorPeriodoCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As DomiciliacionesPeriodo.PC_ReporteDomicPeriodoDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),DomiciliacionesPeriodo.PC_ReporteDomicPeriodoDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteEstadisticasConceptoCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteEstadisticasConceptoCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteEstadisticasConceptoCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As EstadisticasporConcepto.PC_ReporteEstadisticasPorConceptoDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),EstadisticasporConcepto.PC_ReporteEstadisticasPorConceptoDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteEstadisticasDestinatariosCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteEstadisticasDestinatariosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteEstadisticasDestinatariosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As EstadisticasDestinatarios.PC_ReporteEstadisticasPorDestinatarioDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),EstadisticasDestinatarios.PC_ReporteEstadisticasPorDestinatarioDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteDetalleEventosCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteDetalleEventosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteDetalleEventosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As ReporteDetalleEventos.PC_ReporteDetalleEventosDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),ReporteDetalleEventos.PC_ReporteDetalleEventosDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteEventosCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteEventosCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteEventosCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As ReporteEventos.PC_ReporteEventosDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),ReporteEventos.PC_ReporteEventosDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteEventosEnvioCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteEventosEnvioCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteEventosEnvioCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As ReporteEventosEnvio.PC_ReporteEventosEnvioDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),ReporteEventosEnvio.PC_ReporteEventosEnvioDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteEventosTranCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteEventosTranCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteEventosTranCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As ReporteEventosTran.PC_ReporteEventosTranDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),ReporteEventosTran.PC_ReporteEventosTranDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReportePropuestasCompletedEventHandler(ByVal sender As Object, ByVal e As ReportePropuestasCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReportePropuestasCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_ReportePropuestas.PC_ReportePropuestasDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_ReportePropuestas.PC_ReportePropuestasDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteDEvolucionesCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteDEvolucionesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteDEvolucionesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_ReporteDevoluciones.PC_ReporteDevolucionesDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_ReporteDevoluciones.PC_ReporteDevolucionesDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteEntidadesCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteEntidadesCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteEntidadesCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_ReporteEntidades.PC_ReporteEntidadesDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_ReporteEntidades.PC_ReporteEntidadesDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReportePropuestasListaCompletedEventHandler(ByVal sender As Object, ByVal e As ReportePropuestasListaCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReportePropuestasListaCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_ReportePropuestasListas.PC_ReportePropuestasLista2DataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_ReportePropuestasListas.PC_ReportePropuestasLista2DataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteTransaccionesTranCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteTransaccionesTranCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteTransaccionesTranCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_ReporteTransaccionesTran.PC_ReporteTransaccionesTranDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_ReporteTransaccionesTran.PC_ReporteTransaccionesTranDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteTransaccionesFecCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteTransaccionesFecCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteTransaccionesFecCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As ReporteTransaccionesFec.PC_ReporteTransaccionesFecDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),ReporteTransaccionesFec.PC_ReporteTransaccionesFecDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteTransaccionesFec2CompletedEventHandler(ByVal sender As Object, ByVal e As ReporteTransaccionesFec2CompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteTransaccionesFec2CompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As ReporteTransaccionesFec2.PC_ReporteTransaccionesFec2DataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),ReporteTransaccionesFec2.PC_ReporteTransaccionesFec2DataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteTransaccionesPorNumeroCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteTransaccionesPorNumeroCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteTransaccionesPorNumeroCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_ReporteTransaccionesPorNumero.PC_ReporteTransaccionesPorNumeroDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_ReporteTransaccionesPorNumero.PC_ReporteTransaccionesPorNumeroDataTable)
        End Get
    End Property
End Class

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
Public Delegate Sub ReporteTransaccionesSinFechaCicloCompletedEventHandler(ByVal sender As Object, ByVal e As ReporteTransaccionesSinFechaCicloCompletedEventArgs)

'''<remarks/>
<System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
 System.Diagnostics.DebuggerStepThroughAttribute(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Partial Public Class ReporteTransaccionesSinFechaCicloCompletedEventArgs
    Inherits System.ComponentModel.AsyncCompletedEventArgs
    
    Private results() As Object
    
    Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
        MyBase.New(exception, cancelled, userState)
        Me.results = results
    End Sub
    
    '''<remarks/>
    Public ReadOnly Property Result() As PC_ReporteTransaccionesSinFechaCiclo.PC_ReporteTransaccionesSinFechaCicloDataTable
        Get
            Me.RaiseExceptionIfNecessary
            Return CType(Me.results(0),PC_ReporteTransaccionesSinFechaCiclo.PC_ReporteTransaccionesSinFechaCicloDataTable)
        End Get
    End Property
End Class
End Namespace