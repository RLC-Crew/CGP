'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3603
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization
Imports System.Configuration

'
'This source code was auto-generated by wsdl, Version=2.0.50727.3038.
'

Namespace Seguridad.SeguridadLib.Derechos

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="DerechosSoap", [Namespace]:="http://www.prosoft.cr/")> _
    Partial Public Class Derechos
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private LoginRealOperationCompleted As System.Threading.SendOrPostCallback

        Private ExistenOpcionesOperationCompleted As System.Threading.SendOrPostCallback

        Private OpcionPermitidaOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneInfoGenOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneInfoExtraOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneDerechosOperationCompleted As System.Threading.SendOrPostCallback

        Private ObtieneDerechosTotalOperationCompleted As System.Threading.SendOrPostCallback

        Private OpcionPermitidaPorModuloOperationCompleted As System.Threading.SendOrPostCallback

        Private ExistenOpcionesPorModuloOperationCompleted As System.Threading.SendOrPostCallback

        Private ExistenOpcionesPorSistemaOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New()
            Me.Url = ConfigurationManager.AppSettings(Constantes.ServidorDatos) + "/SeguridadLib/Derechos.asmx"
        End Sub

        '''<remarks/>
        Public Event LoginRealCompleted As LoginRealCompletedEventHandler

        '''<remarks/>
        Public Event ExistenOpcionesCompleted As ExistenOpcionesCompletedEventHandler

        '''<remarks/>
        Public Event OpcionPermitidaCompleted As OpcionPermitidaCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneInfoGenCompleted As ObtieneInfoGenCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneInfoExtraCompleted As ObtieneInfoExtraCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneDerechosCompleted As ObtieneDerechosCompletedEventHandler

        '''<remarks/>
        Public Event ObtieneDerechosTotalCompleted As ObtieneDerechosTotalCompletedEventHandler

        '''<remarks/>
        Public Event OpcionPermitidaPorModuloCompleted As OpcionPermitidaPorModuloCompletedEventHandler

        '''<remarks/>
        Public Event ExistenOpcionesPorModuloCompleted As ExistenOpcionesPorModuloCompletedEventHandler

        '''<remarks/>
        Public Event ExistenOpcionesPorSistemaCompleted As ExistenOpcionesPorSistemaCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/LoginReal", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function LoginReal(ByVal pLogin As String, ByVal pClave As String) As String
            Dim results() As Object = Me.Invoke("LoginReal", New Object() {pLogin, pClave})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginLoginReal(ByVal pLogin As String, ByVal pClave As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoginReal", New Object() {pLogin, pClave}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndLoginReal(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub LoginRealAsync(ByVal pLogin As String, ByVal pClave As String)
            Me.LoginRealAsync(pLogin, pClave, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub LoginRealAsync(ByVal pLogin As String, ByVal pClave As String, ByVal userState As Object)
            If (Me.LoginRealOperationCompleted Is Nothing) Then
                Me.LoginRealOperationCompleted = AddressOf Me.OnLoginRealOperationCompleted
            End If
            Me.InvokeAsync("LoginReal", New Object() {pLogin, pClave}, Me.LoginRealOperationCompleted, userState)
        End Sub

        Private Sub OnLoginRealOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginRealCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginRealCompleted(Me, New LoginRealCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExistenOpciones", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExistenOpciones() As Boolean
            Dim results() As Object = Me.Invoke("ExistenOpciones", New Object(-1) {})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginExistenOpciones(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExistenOpciones", New Object(-1) {}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndExistenOpciones(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ExistenOpcionesAsync()
            Me.ExistenOpcionesAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExistenOpcionesAsync(ByVal userState As Object)
            If (Me.ExistenOpcionesOperationCompleted Is Nothing) Then
                Me.ExistenOpcionesOperationCompleted = AddressOf Me.OnExistenOpcionesOperationCompleted
            End If
            Me.InvokeAsync("ExistenOpciones", New Object(-1) {}, Me.ExistenOpcionesOperationCompleted, userState)
        End Sub

        Private Sub OnExistenOpcionesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistenOpcionesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistenOpcionesCompleted(Me, New ExistenOpcionesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/OpcionPermitida", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function OpcionPermitida(ByVal pCodigoOpcion As Double) As Boolean
            Dim results() As Object = Me.Invoke("OpcionPermitida", New Object() {pCodigoOpcion})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginOpcionPermitida(ByVal pCodigoOpcion As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("OpcionPermitida", New Object() {pCodigoOpcion}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndOpcionPermitida(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub OpcionPermitidaAsync(ByVal pCodigoOpcion As Double)
            Me.OpcionPermitidaAsync(pCodigoOpcion, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub OpcionPermitidaAsync(ByVal pCodigoOpcion As Double, ByVal userState As Object)
            If (Me.OpcionPermitidaOperationCompleted Is Nothing) Then
                Me.OpcionPermitidaOperationCompleted = AddressOf Me.OnOpcionPermitidaOperationCompleted
            End If
            Me.InvokeAsync("OpcionPermitida", New Object() {pCodigoOpcion}, Me.OpcionPermitidaOperationCompleted, userState)
        End Sub

        Private Sub OnOpcionPermitidaOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpcionPermitidaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpcionPermitidaCompleted(Me, New OpcionPermitidaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneInfoGen", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Sub ObtieneInfoGen(ByVal pLogin As String, ByRef pCodigoUsuario As Double, ByRef pNombre1 As String, ByRef pNombre2 As String, ByRef pApellido1 As String, ByRef pApellido2 As String, ByRef pCedula As String, ByRef pIdentif1 As String, ByRef pIdentif2 As String, ByRef pAccesoEstaciones As String, ByRef pCuentaBloqueada As Boolean, ByRef pCambiarClave As Boolean)
            Dim results() As Object = Me.Invoke("ObtieneInfoGen", New Object() {pLogin, pCodigoUsuario, pNombre1, pNombre2, pApellido1, pApellido2, pCedula, pIdentif1, pIdentif2, pAccesoEstaciones, pCuentaBloqueada, pCambiarClave})
            pCodigoUsuario = CType(results(0), Double)
            pNombre1 = CType(results(1), String)
            pNombre2 = CType(results(2), String)
            pApellido1 = CType(results(3), String)
            pApellido2 = CType(results(4), String)
            pCedula = CType(results(5), String)
            pIdentif1 = CType(results(6), String)
            pIdentif2 = CType(results(7), String)
            pAccesoEstaciones = CType(results(8), String)
            pCuentaBloqueada = CType(results(9), Boolean)
            pCambiarClave = CType(results(10), Boolean)
        End Sub

        '''<remarks/>
        Public Function BeginObtieneInfoGen(ByVal pLogin As String, ByVal pCodigoUsuario As Double, ByVal pNombre1 As String, ByVal pNombre2 As String, ByVal pApellido1 As String, ByVal pApellido2 As String, ByVal pCedula As String, ByVal pIdentif1 As String, ByVal pIdentif2 As String, ByVal pAccesoEstaciones As String, ByVal pCuentaBloqueada As Boolean, ByVal pCambiarClave As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneInfoGen", New Object() {pLogin, pCodigoUsuario, pNombre1, pNombre2, pApellido1, pApellido2, pCedula, pIdentif1, pIdentif2, pAccesoEstaciones, pCuentaBloqueada, pCambiarClave}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Sub EndObtieneInfoGen(ByVal asyncResult As System.IAsyncResult, ByRef pCodigoUsuario As Double, ByRef pNombre1 As String, ByRef pNombre2 As String, ByRef pApellido1 As String, ByRef pApellido2 As String, ByRef pCedula As String, ByRef pIdentif1 As String, ByRef pIdentif2 As String, ByRef pAccesoEstaciones As String, ByRef pCuentaBloqueada As Boolean, ByRef pCambiarClave As Boolean)
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pCodigoUsuario = CType(results(0), Double)
            pNombre1 = CType(results(1), String)
            pNombre2 = CType(results(2), String)
            pApellido1 = CType(results(3), String)
            pApellido2 = CType(results(4), String)
            pCedula = CType(results(5), String)
            pIdentif1 = CType(results(6), String)
            pIdentif2 = CType(results(7), String)
            pAccesoEstaciones = CType(results(8), String)
            pCuentaBloqueada = CType(results(9), Boolean)
            pCambiarClave = CType(results(10), Boolean)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneInfoGenAsync(ByVal pLogin As String, ByVal pCodigoUsuario As Double, ByVal pNombre1 As String, ByVal pNombre2 As String, ByVal pApellido1 As String, ByVal pApellido2 As String, ByVal pCedula As String, ByVal pIdentif1 As String, ByVal pIdentif2 As String, ByVal pAccesoEstaciones As String, ByVal pCuentaBloqueada As Boolean, ByVal pCambiarClave As Boolean)
            Me.ObtieneInfoGenAsync(pLogin, pCodigoUsuario, pNombre1, pNombre2, pApellido1, pApellido2, pCedula, pIdentif1, pIdentif2, pAccesoEstaciones, pCuentaBloqueada, pCambiarClave, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneInfoGenAsync(ByVal pLogin As String, ByVal pCodigoUsuario As Double, ByVal pNombre1 As String, ByVal pNombre2 As String, ByVal pApellido1 As String, ByVal pApellido2 As String, ByVal pCedula As String, ByVal pIdentif1 As String, ByVal pIdentif2 As String, ByVal pAccesoEstaciones As String, ByVal pCuentaBloqueada As Boolean, ByVal pCambiarClave As Boolean, ByVal userState As Object)
            If (Me.ObtieneInfoGenOperationCompleted Is Nothing) Then
                Me.ObtieneInfoGenOperationCompleted = AddressOf Me.OnObtieneInfoGenOperationCompleted
            End If
            Me.InvokeAsync("ObtieneInfoGen", New Object() {pLogin, pCodigoUsuario, pNombre1, pNombre2, pApellido1, pApellido2, pCedula, pIdentif1, pIdentif2, pAccesoEstaciones, pCuentaBloqueada, pCambiarClave}, Me.ObtieneInfoGenOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneInfoGenOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneInfoGenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneInfoGenCompleted(Me, New ObtieneInfoGenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneInfoExtra", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneInfoExtra(ByVal pLogin As String, ByVal pCodigoValorExtra As Integer) As String
            Dim results() As Object = Me.Invoke("ObtieneInfoExtra", New Object() {pLogin, pCodigoValorExtra})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginObtieneInfoExtra(ByVal pLogin As String, ByVal pCodigoValorExtra As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneInfoExtra", New Object() {pLogin, pCodigoValorExtra}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneInfoExtra(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneInfoExtraAsync(ByVal pLogin As String, ByVal pCodigoValorExtra As Integer)
            Me.ObtieneInfoExtraAsync(pLogin, pCodigoValorExtra, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneInfoExtraAsync(ByVal pLogin As String, ByVal pCodigoValorExtra As Integer, ByVal userState As Object)
            If (Me.ObtieneInfoExtraOperationCompleted Is Nothing) Then
                Me.ObtieneInfoExtraOperationCompleted = AddressOf Me.OnObtieneInfoExtraOperationCompleted
            End If
            Me.InvokeAsync("ObtieneInfoExtra", New Object() {pLogin, pCodigoValorExtra}, Me.ObtieneInfoExtraOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneInfoExtraOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneInfoExtraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneInfoExtraCompleted(Me, New ObtieneInfoExtraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneDerechos", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneDerechos(ByVal pLogin As String, ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcionPadre As Double) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneDerechos", New Object() {pLogin, pCodigoSistema, pCodigoModulo, pCodigoOpcionPadre})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginObtieneDerechos(ByVal pLogin As String, ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcionPadre As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneDerechos", New Object() {pLogin, pCodigoSistema, pCodigoModulo, pCodigoOpcionPadre}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneDerechos(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneDerechosAsync(ByVal pLogin As String, ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcionPadre As Double)
            Me.ObtieneDerechosAsync(pLogin, pCodigoSistema, pCodigoModulo, pCodigoOpcionPadre, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneDerechosAsync(ByVal pLogin As String, ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcionPadre As Double, ByVal userState As Object)
            If (Me.ObtieneDerechosOperationCompleted Is Nothing) Then
                Me.ObtieneDerechosOperationCompleted = AddressOf Me.OnObtieneDerechosOperationCompleted
            End If
            Me.InvokeAsync("ObtieneDerechos", New Object() {pLogin, pCodigoSistema, pCodigoModulo, pCodigoOpcionPadre}, Me.ObtieneDerechosOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneDerechosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneDerechosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneDerechosCompleted(Me, New ObtieneDerechosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ObtieneDerechosTotal", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ObtieneDerechosTotal(ByVal pLogin As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ObtieneDerechosTotal", New Object() {pLogin})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Function BeginObtieneDerechosTotal(ByVal pLogin As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ObtieneDerechosTotal", New Object() {pLogin}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndObtieneDerechosTotal(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub ObtieneDerechosTotalAsync(ByVal pLogin As String)
            Me.ObtieneDerechosTotalAsync(pLogin, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ObtieneDerechosTotalAsync(ByVal pLogin As String, ByVal userState As Object)
            If (Me.ObtieneDerechosTotalOperationCompleted Is Nothing) Then
                Me.ObtieneDerechosTotalOperationCompleted = AddressOf Me.OnObtieneDerechosTotalOperationCompleted
            End If
            Me.InvokeAsync("ObtieneDerechosTotal", New Object() {pLogin}, Me.ObtieneDerechosTotalOperationCompleted, userState)
        End Sub

        Private Sub OnObtieneDerechosTotalOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtieneDerechosTotalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtieneDerechosTotalCompleted(Me, New ObtieneDerechosTotalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/OpcionPermitidaPorModulo", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function OpcionPermitidaPorModulo(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcion As Double) As Boolean
            Dim results() As Object = Me.Invoke("OpcionPermitidaPorModulo", New Object() {pCodigoSistema, pCodigoModulo, pCodigoOpcion})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginOpcionPermitidaPorModulo(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcion As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("OpcionPermitidaPorModulo", New Object() {pCodigoSistema, pCodigoModulo, pCodigoOpcion}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndOpcionPermitidaPorModulo(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub OpcionPermitidaPorModuloAsync(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcion As Double)
            Me.OpcionPermitidaPorModuloAsync(pCodigoSistema, pCodigoModulo, pCodigoOpcion, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub OpcionPermitidaPorModuloAsync(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal pCodigoOpcion As Double, ByVal userState As Object)
            If (Me.OpcionPermitidaPorModuloOperationCompleted Is Nothing) Then
                Me.OpcionPermitidaPorModuloOperationCompleted = AddressOf Me.OnOpcionPermitidaPorModuloOperationCompleted
            End If
            Me.InvokeAsync("OpcionPermitidaPorModulo", New Object() {pCodigoSistema, pCodigoModulo, pCodigoOpcion}, Me.OpcionPermitidaPorModuloOperationCompleted, userState)
        End Sub

        Private Sub OnOpcionPermitidaPorModuloOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpcionPermitidaPorModuloCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpcionPermitidaPorModuloCompleted(Me, New OpcionPermitidaPorModuloCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExistenOpcionesPorModulo", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExistenOpcionesPorModulo(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double) As Boolean
            Dim results() As Object = Me.Invoke("ExistenOpcionesPorModulo", New Object() {pCodigoSistema, pCodigoModulo})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginExistenOpcionesPorModulo(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExistenOpcionesPorModulo", New Object() {pCodigoSistema, pCodigoModulo}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndExistenOpcionesPorModulo(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ExistenOpcionesPorModuloAsync(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double)
            Me.ExistenOpcionesPorModuloAsync(pCodigoSistema, pCodigoModulo, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExistenOpcionesPorModuloAsync(ByVal pCodigoSistema As Double, ByVal pCodigoModulo As Double, ByVal userState As Object)
            If (Me.ExistenOpcionesPorModuloOperationCompleted Is Nothing) Then
                Me.ExistenOpcionesPorModuloOperationCompleted = AddressOf Me.OnExistenOpcionesPorModuloOperationCompleted
            End If
            Me.InvokeAsync("ExistenOpcionesPorModulo", New Object() {pCodigoSistema, pCodigoModulo}, Me.ExistenOpcionesPorModuloOperationCompleted, userState)
        End Sub

        Private Sub OnExistenOpcionesPorModuloOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistenOpcionesPorModuloCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistenOpcionesPorModuloCompleted(Me, New ExistenOpcionesPorModuloCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prosoft.cr/ExistenOpcionesPorSistema", RequestNamespace:="http://www.prosoft.cr/", ResponseNamespace:="http://www.prosoft.cr/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function ExistenOpcionesPorSistema(ByVal pCodigoSistema As Double) As Boolean
            Dim results() As Object = Me.Invoke("ExistenOpcionesPorSistema", New Object() {pCodigoSistema})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Function BeginExistenOpcionesPorSistema(ByVal pCodigoSistema As Double, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ExistenOpcionesPorSistema", New Object() {pCodigoSistema}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndExistenOpcionesPorSistema(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub ExistenOpcionesPorSistemaAsync(ByVal pCodigoSistema As Double)
            Me.ExistenOpcionesPorSistemaAsync(pCodigoSistema, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub ExistenOpcionesPorSistemaAsync(ByVal pCodigoSistema As Double, ByVal userState As Object)
            If (Me.ExistenOpcionesPorSistemaOperationCompleted Is Nothing) Then
                Me.ExistenOpcionesPorSistemaOperationCompleted = AddressOf Me.OnExistenOpcionesPorSistemaOperationCompleted
            End If
            Me.InvokeAsync("ExistenOpcionesPorSistema", New Object() {pCodigoSistema}, Me.ExistenOpcionesPorSistemaOperationCompleted, userState)
        End Sub

        Private Sub OnExistenOpcionesPorSistemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistenOpcionesPorSistemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistenOpcionesPorSistemaCompleted(Me, New ExistenOpcionesPorSistemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub LoginRealCompletedEventHandler(ByVal sender As Object, ByVal e As LoginRealCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class LoginRealCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ExistenOpcionesCompletedEventHandler(ByVal sender As Object, ByVal e As ExistenOpcionesCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExistenOpcionesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub OpcionPermitidaCompletedEventHandler(ByVal sender As Object, ByVal e As OpcionPermitidaCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class OpcionPermitidaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ObtieneInfoGenCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneInfoGenCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneInfoGenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property pCodigoUsuario() As Double
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Double)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pNombre1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(1), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pNombre2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(2), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pApellido1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(3), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pApellido2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(4), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pCedula() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(5), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pIdentif1() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(6), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pIdentif2() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(7), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pAccesoEstaciones() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(8), String)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pCuentaBloqueada() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(9), Boolean)
            End Get
        End Property

        '''<remarks/>
        Public ReadOnly Property pCambiarClave() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(10), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ObtieneInfoExtraCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneInfoExtraCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneInfoExtraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ObtieneDerechosCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneDerechosCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneDerechosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ObtieneDerechosTotalCompletedEventHandler(ByVal sender As Object, ByVal e As ObtieneDerechosTotalCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ObtieneDerechosTotalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub OpcionPermitidaPorModuloCompletedEventHandler(ByVal sender As Object, ByVal e As OpcionPermitidaPorModuloCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class OpcionPermitidaPorModuloCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ExistenOpcionesPorModuloCompletedEventHandler(ByVal sender As Object, ByVal e As ExistenOpcionesPorModuloCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExistenOpcionesPorModuloCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")> _
    Public Delegate Sub ExistenOpcionesPorSistemaCompletedEventHandler(ByVal sender As Object, ByVal e As ExistenOpcionesPorSistemaCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class ExistenOpcionesPorSistemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

End Namespace
